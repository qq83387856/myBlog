(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!*************************************************!*\
  !*** (webpack)/hot sync nonrecursive ^\.\/log$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./src/$$_lazy_route_resource lazy recursive":
/*!**********************************************************!*\
  !*** ./src/$$_lazy_route_resource lazy namespace object ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./login/login.module": [
		"./src/app/login/login.module.ts",
		"default~login-login-module~main-main-module~viewer-viewer-module",
		"login-login-module"
	],
	"./main/main.module": [
		"./src/app/main/main.module.ts",
		"default~login-login-module~main-main-module~viewer-viewer-module",
		"default~main-main-module~viewer-viewer-module",
		"main-main-module"
	],
	"./viewer/viewer.module": [
		"./src/app/viewer/viewer.module.ts",
		"default~login-login-module~main-main-module~viewer-viewer-module",
		"default~main-main-module~viewer-viewer-module",
		"viewer-viewer-module"
	]
};
function webpackAsyncContext(req) {
	var ids = map[req];
	if(!ids) {
		return Promise.resolve().then(function() {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {
		var id = ids[0];
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = function webpackAsyncContextKeys() {
	return Object.keys(map);
};
webpackAsyncContext.id = "./src/$$_lazy_route_resource lazy recursive";
module.exports = webpackAsyncContext;

/***/ }),

/***/ "./src/app/app-routing.module.ts":
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/*! exports provided: prodRoutes, prodMainRoutes, prodViewerRoutes, devRoutes, devMainRoutes, devViewerRoutes, AppRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prodRoutes", function() { return prodRoutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prodMainRoutes", function() { return prodMainRoutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prodViewerRoutes", function() { return prodViewerRoutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "devRoutes", function() { return devRoutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "devMainRoutes", function() { return devMainRoutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "devViewerRoutes", function() { return devViewerRoutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRoutingModule", function() { return AppRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../environments/environment */ "./src/environments/environment.ts");
/* harmony import */ var _core_services_auth_guard_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core/services/auth-guard.service */ "./src/app/core/services/auth-guard.service.ts");






/**
 * 製品版の、アプリケーション全体のルーティング設定
 *
 * ダミーのルーティング設定を含みます
 *
 * 動的にrouting設定をロードした場合
 * loadChildrenに設定されたパスをwebpackが生成してくれないため
 * loadChildrenへのパスが行方不明になってしまう
 * そのため、ダミー設定をロードして予めパスを生成しておく
 */
var prodRoutes = [
    {
        path: 'dummyMain',
        loadChildren: './main/main.module#MainModule',
        pathMatch: 'full'
    },
    {
        path: 'dummyViewer',
        loadChildren: './viewer/viewer.module#ViewerModule',
        pathMatch: 'full'
    }
];
/**
 * 製品版のMain画面用ルーティング設定
 */
var prodMainRoutes = [
    {
        path: '',
        loadChildren: './main/main.module#MainModule',
        pathMatch: 'full'
    },
    {
        path: 'FolViewer',
        loadChildren: './main/main.module#MainModule',
        pathMatch: 'full'
    },
    { path: '**', redirectTo: '' }
];
/**
 * 製品版のViewer画面用ルーティング設定
 */
var prodViewerRoutes = [
    {
        path: '',
        loadChildren: './viewer/viewer.module#ViewerModule',
        pathMatch: 'full'
    },
    {
        path: 'DocViewer',
        loadChildren: './viewer/viewer.module#ViewerModule',
        pathMatch: 'full'
    },
    { path: '**', redirectTo: '' }
];
/**
 * 開発モードでの、アプリケーション全体のルーティング設定
 *
 * 開発用ログインページモジュールとcanLoadを含む
 *
 * ダミーのルーティング設定を含みます
 *
 * 動的にrouting設定をロードした場合
 * loadChildrenに設定されたパスをwebpackが生成してくれないため
 * loadChildrenへのパスが行方不明になってしまう
 * そのため、ダミー設定をロードして予めパスを生成しておく
 */
var devRoutes = [
    {
        path: 'login',
        loadChildren: './login/login.module#LoginModule',
        pathMatch: 'full'
    },
    {
        path: 'dummyMain',
        loadChildren: './main/main.module#MainModule',
        pathMatch: 'full'
    },
    {
        path: 'dummyViewer',
        loadChildren: './viewer/viewer.module#ViewerModule',
        pathMatch: 'full'
    }
];
/**
 * 開発モードのMain画面用ルーティング設定
 */
var devMainRoutes = [
    {
        path: '',
        loadChildren: './main/main.module#MainModule',
        pathMatch: 'full',
        canLoad: [_core_services_auth_guard_service__WEBPACK_IMPORTED_MODULE_5__["AuthGuard"]]
    },
    {
        path: 'FolViewer',
        loadChildren: './main/main.module#MainModule',
        pathMatch: 'full',
        canLoad: [_core_services_auth_guard_service__WEBPACK_IMPORTED_MODULE_5__["AuthGuard"]]
    },
    { path: '**', redirectTo: '' }
];
/**
 * 開発モードのViewer画面用ルーティング設定
 */
var devViewerRoutes = [
    {
        path: '',
        loadChildren: './viewer/viewer.module#ViewerModule',
        pathMatch: 'full',
        canLoad: [_core_services_auth_guard_service__WEBPACK_IMPORTED_MODULE_5__["AuthGuard"]]
    },
    {
        path: 'DocViewer',
        loadChildren: './viewer/viewer.module#ViewerModule',
        pathMatch: 'full',
        canLoad: [_core_services_auth_guard_service__WEBPACK_IMPORTED_MODULE_5__["AuthGuard"]]
    },
    { path: '**', redirectTo: '' }
];
/**
 * アプリケーション全体のルーティング設定
 *
 * 開発用ログインのために、production mode とdevelopment mode で異なる設定を使います
 *
 * 動的ルーティング設定のために、ダミーのルーティングを一時的にロードします
 */
var appRoutes = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].production ? prodRoutes : devRoutes;
/**
 * アプリケーションのルーティングモジュール
 */
var AppRoutingModule = /** @class */ (function () {
    function AppRoutingModule() {
    }
    AppRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"].forRoot(appRoutes)],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"]],
            declarations: []
        })
    ], AppRoutingModule);
    return AppRoutingModule;
}());



/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _core_services_routing_manage_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/services/routing-manage.service */ "./src/app/core/services/routing-manage.service.ts");



/**
 * ブートストラップコンポーネント
 */
var AppComponent = /** @class */ (function () {
    function AppComponent(routingManager) {
        this.routingManager = routingManager;
    }
    AppComponent.prototype.ngOnInit = function () {
        // 現在のURLを元にルーティングを動的に設定する
        this.routingManager.setConfigByUrl();
    };
    AppComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-root',
            template: "\n    <router-outlet></router-outlet>\n  "
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_core_services_routing_manage_service__WEBPACK_IMPORTED_MODULE_2__["RoutingManageService"]])
    ], AppComponent);
    return AppComponent;
}());



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
/* harmony import */ var _ngrx_effects__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngrx/effects */ "./node_modules/@ngrx/effects/fesm5/effects.js");
/* harmony import */ var _ngrx_store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
/* harmony import */ var _ngrx_store_devtools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ngrx/store-devtools */ "./node_modules/@ngrx/store-devtools/fesm5/store-devtools.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../environments/environment */ "./src/environments/environment.ts");
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app-routing.module */ "./src/app/app-routing.module.ts");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var _core_core_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./core/core.module */ "./src/app/core/core.module.ts");
/* harmony import */ var _core_store_core_effects__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./core/store/core.effects */ "./src/app/core/store/core.effects.ts");












/**
 * ルートモジュールです
 */
var AppModule = /** @class */ (function () {
    function AppModule() {
    }
    AppModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            declarations: [_app_component__WEBPACK_IMPORTED_MODULE_9__["AppComponent"]],
            imports: [
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["BrowserModule"],
                _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__["BrowserAnimationsModule"],
                _core_core_module__WEBPACK_IMPORTED_MODULE_10__["CoreModule"],
                _app_routing_module__WEBPACK_IMPORTED_MODULE_8__["AppRoutingModule"],
                _ngrx_store__WEBPACK_IMPORTED_MODULE_5__["StoreModule"].forRoot({}),
                _ngrx_effects__WEBPACK_IMPORTED_MODULE_4__["EffectsModule"].forRoot([_core_store_core_effects__WEBPACK_IMPORTED_MODULE_11__["CoreEffects"]]),
                _environments_environment__WEBPACK_IMPORTED_MODULE_7__["environment"].production
                    ? [] // productionではdevtoolsを使わない
                    : _ngrx_store_devtools__WEBPACK_IMPORTED_MODULE_6__["StoreDevtoolsModule"].instrument({
                        maxAge: 50 // Redux Devtoolsのデフォルト値が50であるのにならった
                    })
            ],
            providers: [],
            bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_9__["AppComponent"]]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], AppModule);
    return AppModule;
}());



/***/ }),

/***/ "./src/app/core/application-error.ts":
/*!*******************************************!*\
  !*** ./src/app/core/application-error.ts ***!
  \*******************************************/
/*! exports provided: ApplicationError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationError", function() { return ApplicationError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Angularアプリケーション共通エラー
 */
var ApplicationError = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ApplicationError, _super);
    /**
     * コンストラクタ
     * @param {string} message エラーメッセージ
     */
    function ApplicationError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, ApplicationError.prototype);
        return _this;
    }
    return ApplicationError;
}(Error));



/***/ }),

/***/ "./src/app/core/commands/base-command.ts":
/*!***********************************************!*\
  !*** ./src/app/core/commands/base-command.ts ***!
  \***********************************************/
/*! exports provided: BaseCommand */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseCommand", function() { return BaseCommand; });
/* harmony import */ var _ngrx_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _environments_environment_prod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../environments/environment.prod */ "./src/environments/environment.prod.ts");
/* harmony import */ var _application_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../application-error */ "./src/app/core/application-error.ts");
/* harmony import */ var _services_command_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/command-provider */ "./src/app/core/services/command-provider.ts");
/* harmony import */ var _services_logger_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../services/logger.service */ "./src/app/core/services/logger.service.ts");
/* harmony import */ var _services_message_dialog_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../services/message-dialog.service */ "./src/app/core/services/message-dialog.service.ts");
/* harmony import */ var _services_popup_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../services/popup.service */ "./src/app/core/services/popup.service.ts");
/* harmony import */ var _services_progress_manager_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../services/progress-manager.service */ "./src/app/core/services/progress-manager.service.ts");
/* harmony import */ var _services_state_util_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../services/state-util.service */ "./src/app/core/services/state-util.service.ts");
/* harmony import */ var _services_view_manager_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../services/view-manager.service */ "./src/app/core/services/view-manager.service.ts");
/* harmony import */ var _services_wording_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../services/wording.service */ "./src/app/core/services/wording.service.ts");
/* harmony import */ var _utils_injector_provider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/injector-provider */ "./src/app/core/utils/injector-provider.ts");













/**
 * Commandの基底クラス
 */
var BaseCommand = /** @class */ (function () {
    /**
     * コンストラクタ
     */
    function BaseCommand() {
        /**
         * 処理中フラグ
         */
        this.isBusy = false;
        /**
         * Commandがeffectsに返す値
         */
        this.commandResult = {};
        this.injector = _utils_injector_provider__WEBPACK_IMPORTED_MODULE_12__["InjectorProvider"].get();
        this.setDependencies();
        /**
         * コマンドのすべてのメソッドをbindするようにしました。
         *
         * これにより、各コマンドでbind(this)を意識する必要がなくなります。
         */
        var proto = Object.getPrototypeOf(this);
        // tslint:disable-next-line:forin // 意図してプロトタイプチェーンをさかのぼる実装をしているのでこのlintは無効にする
        for (var m in proto) {
            // PropertyDescriptorを取得する
            var descriptor = BaseCommand.getPropertyDescriptor(proto, m);
            if (descriptor == null) {
                continue;
            }
            // プロパティがfunctionならばbind処理をする（getterの場合はdescriptor.getに関数が入るのでifの中に入らない）
            if (m in this && typeof descriptor.value === 'function') {
                // definePropertyにて追加することにより、列挙可能なプロパティ
                // とせずにメソッドを追加しています。(Object.keysなどの動きを踏襲する)
                Object.defineProperty(this, m, { value: this[m].bind(this) });
            }
        }
    }
    /**
     * 指定されたプロパティ名のdescriptorを返します。プロトタイプチェーンをさかのぼります。（descriptor：プロパティの属性を記録したもの）
     * @param obj オブジェクト
     * @param name プロパティ名
     * @returns descriptor
     */
    BaseCommand.getPropertyDescriptor = function (obj, name) {
        // descriptorを取得する
        var descriptor = Object.getOwnPropertyDescriptor(obj, name);
        // descriptorが見つかった場合はそれを返す
        if (descriptor) {
            return descriptor;
        }
        // descriptorが見つからなかった場合
        var proto = Object.getPrototypeOf(obj);
        if (proto) {
            // プロトタイプをさかのぼって再度試す
            return this.getPropertyDescriptor(proto, name);
        }
        // プロトタイプをもうさかのぼれない場合はその名前のプロパティは見つからなかったということなのでundefinedを返す
        return undefined;
    };
    /**
     * Reducer処理を呼び出すメソッド。このクラスではデフォルト実装を提供する。
     * @param state Storeの現在のState
     * @param action Storeに渡されたAction
     * @returns 新しく生成されたState
     */
    BaseCommand.prototype.doReducer = function (state, action) {
        // 何も変更しない
        return state;
    };
    /**
     * Controllerから呼び出される際に
     * @param payload Actionが格納しているpayload
     * @returns effectsに返すObservable
     */
    BaseCommand.prototype.execute = function (payload) {
        this.payload = payload;
        if (payload != null) {
            this.event = payload.event;
            // this.eventと同じところを指すので混乱防止のため削除する
            delete this.payload.event;
        }
        var promise = this.executeInner();
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["from"])(promise);
    };
    /**
     * Commandを破棄する際の処理
     */
    BaseCommand.prototype.dispose = function () { };
    /**
     * 終了を通知します。
     * このクラスをオーバライドして使用する場合は、必ず最後に一度だけ呼び出すようにします。
     *
     * terminate()の呼び出しを行なわない場合、2度目以降の処理が行なわれなくなります。
     *
     * また、terminate()を処理内で2度呼び出されるとApplicationErrorが発生します。
     */
    BaseCommand.prototype.terminate = function () {
        if (this.isBusy === false) {
            if (!_environments_environment_prod__WEBPACK_IMPORTED_MODULE_2__["environment"].production) {
                throw new _application_error__WEBPACK_IMPORTED_MODULE_3__["ApplicationError"]('You have already been notified of the end');
            }
            else {
                this.logger.info('You have already been notified of the end');
            }
        }
        this.isBusy = false;
        if (this.terminateCallback) {
            this.terminateCallback(this.commandResult);
        }
    };
    /**
     * execute()メソッドから呼ばれる起動処理本体
     * @returns 非同期で結果を返すPromise
     */
    BaseCommand.prototype.executeInner = function () {
        var _this = this;
        // 非同期で結果を返すためにPromiseを生成する
        var promise = new Promise(function (resolve) {
            _this.terminateCallback = function (result) {
                resolve(result);
            };
            _this.execCommand();
        }).catch(function (e) {
            // Promiseはcatchを書かないとエラーを握りつぶす。
            // setTimeoutの中でthrowすると通常のエラー処理に合流する。
            setTimeout(function () {
                // Promise処理の中で terminate()するとresolve()がコールされてPromise処理が終了してしまい
                // terminate()後にthrowされたexceptionが握りつぶされてしまうため
                // Promise内の処理を  terminate() → resolve() → throw exception から
                // throw exception → terminate() → resolve() の順に処理されるように変更
                _this.terminate();
                throw e;
            });
            // ここでthrowしないとvoidが返ってしまうためthrowする。
            throw e;
        });
        return promise;
    };
    /**
     * DIを実施する
     */
    BaseCommand.prototype.setDependencies = function () {
        this.stateUtilService = this.injector.get(_services_state_util_service__WEBPACK_IMPORTED_MODULE_9__["StateUtilService"]);
        this.logger = this.injector.get(_services_logger_service__WEBPACK_IMPORTED_MODULE_5__["Logger"]);
        this.messageService = this.injector.get(_services_message_dialog_service__WEBPACK_IMPORTED_MODULE_6__["MessageDialogService"]);
        this.wording = this.injector.get(_services_wording_service__WEBPACK_IMPORTED_MODULE_11__["WordingService"]);
        this.popup = this.injector.get(_services_popup_service__WEBPACK_IMPORTED_MODULE_7__["PopupService"]);
        this.progress = this.injector.get(_services_progress_manager_service__WEBPACK_IMPORTED_MODULE_8__["ProgressManager"]);
        this.commandProvider = this.injector.get(_services_command_provider__WEBPACK_IMPORTED_MODULE_4__["COMMAND_PROVIDER"]);
        this.viewManager = this.injector.get(_services_view_manager_service__WEBPACK_IMPORTED_MODULE_10__["ViewManagerService"]);
        this.store = this.injector.get(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["Store"]);
    };
    return BaseCommand;
}());



/***/ }),

/***/ "./src/app/core/commands/default-command.ts":
/*!**************************************************!*\
  !*** ./src/app/core/commands/default-command.ts ***!
  \**************************************************/
/*! exports provided: DefaultCommand */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultCommand", function() { return DefaultCommand; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _base_command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-command */ "./src/app/core/commands/base-command.ts");



/**
 * デフォルトのCommand
 */
var DefaultCommand = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DefaultCommand, _super);
    function DefaultCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * デフォルトのReducer関数。何も影響を与えない。
     * @param state
     * @param action
     */
    DefaultCommand.prototype.doReducer = function (state, action) {
        return state;
    };
    /**
     * デフォルトのexecuteメソッド。何もしない。
     */
    DefaultCommand.prototype.execute = function () {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])({});
    };
    /**
     * 何もしない。
     */
    DefaultCommand.prototype.check = function () { };
    /**
     * デフォルトのexecCommandメソッド。何もしない。
     */
    DefaultCommand.prototype.execCommand = function () { };
    return DefaultCommand;
}(_base_command__WEBPACK_IMPORTED_MODULE_2__["BaseCommand"]));



/***/ }),

/***/ "./src/app/core/containers/dialogs/sys0-alert.ts":
/*!*******************************************************!*\
  !*** ./src/app/core/containers/dialogs/sys0-alert.ts ***!
  \*******************************************************/
/*! exports provided: Sys0Alert */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sys0Alert", function() { return Sys0Alert; });
/* harmony import */ var _shared_containers_dialogs_alert_dialog_alert_dialog_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/containers/dialogs/alert-dialog/alert-dialog.component */ "./src/app/shared/containers/dialogs/alert-dialog/alert-dialog.component.ts");
/* harmony import */ var _models_alert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models/alert */ "./src/app/core/models/alert.ts");
/* harmony import */ var _models_close_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/close-event */ "./src/app/core/models/close-event.ts");
/* harmony import */ var _models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../models/sys0-alert-type */ "./src/app/core/models/sys0-alert-type.ts");
/* harmony import */ var _services_popup_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/popup.service */ "./src/app/core/services/popup.service.ts");
/* harmony import */ var _utils_injector_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/injector-provider */ "./src/app/core/utils/injector-provider.ts");






/**
 * Sys0用のAlertクラス
 *
 * ★Stitch V1.3対応
 * MessageDialogServiceにて利用されるため、Coreに配置
 * AngularではAlertDialogComponent(Flex Alertに相当)と継承関係を取る必要がないので分離
 * また、AlertDialogComponentはFlex AlertFormの責務も集約する
 * 用語解決の責務もAlertDialogComponentに集約する
 *
 * なお、AlertDialogComponentはPrimeNGに依存するため、Sharedに配置
 */
var Sys0Alert = /** @class */ (function () {
    function Sys0Alert() {
    }
    /**
     * Alertを表示します。
     *
     * @param messageKey
     * Alertに表示するメッセージキーを指定します。
     * @param flags
     * Alertに表示するボタン群を指定します。
     * @param type
     * Alertのエラーの種類を指定します。これにより、タイトル・アイコンが定まります。
     * @param closeHandler
     * Alertを閉じたときに発生したCloseEventを取得するHandlerFanctionを指定します。
     * @param enableAlartCloseOnEscKeyDownFlag
     * Alert表示中に、キーボードでEscキーが押された場合にAlertを閉じるかどうかを指定します。
     *
     * ★Stitch V1.3対応
     * 引数 textをmessageKeyに変更（本メソッド呼び出し時には用語解決されていないことを明示するため）
     * 引数 title・iconClassは削除
     * これらは実質的にtypeによって定まっているため、
     * Sys0Alert(AlertDialogComponent)側に制御を集約する
     * 引数 defaultButtonFlagはAngularで不要のため、削除（詳細はAlertDialogComponentのクラスコメント参照）
     * 引数 enableCloseOnEscKeyDownFlagは設定した真偽値と逆の動きをするバグがあるので、修正
     */
    Sys0Alert.show = function (messageKey, flags, type, closeHandler, enableCloseOnEscKeyDownFlag) {
        if (messageKey === void 0) { messageKey = ''; }
        if (flags === void 0) { flags = _models_alert__WEBPACK_IMPORTED_MODULE_1__["Alert"].OK; }
        if (type === void 0) { type = _models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_3__["Sys0AlertType"].TYPE_NONE; }
        if (closeHandler === void 0) { closeHandler = null; }
        if (enableCloseOnEscKeyDownFlag === void 0) { enableCloseOnEscKeyDownFlag = true; }
        var injector = _utils_injector_provider__WEBPACK_IMPORTED_MODULE_5__["InjectorProvider"].get();
        // ダイアログインスタンスの生成
        // ★Stitch V1.3対応
        // PopUpService経由で生成
        // popUpServiceが生成できるのはAngularコンポーネントなので、
        // Sys0Alertでなく、AlertDialogComponentをalertとして生成する
        var popup = injector.get(_services_popup_service__WEBPACK_IMPORTED_MODULE_4__["PopupService"]);
        var alert = popup.createComponentInstance(_shared_containers_dialogs_alert_dialog_alert_dialog_component__WEBPACK_IMPORTED_MODULE_0__["AlertDialogComponent"]);
        if (alert == null) {
            return null;
        }
        // プロパティ設定：ボタンフラグ
        if (flags & _models_alert__WEBPACK_IMPORTED_MODULE_1__["Alert"].OK ||
            flags & _models_alert__WEBPACK_IMPORTED_MODULE_1__["Alert"].CANCEL ||
            flags & _models_alert__WEBPACK_IMPORTED_MODULE_1__["Alert"].YES ||
            flags & _models_alert__WEBPACK_IMPORTED_MODULE_1__["Alert"].NO ||
            flags & _models_alert__WEBPACK_IMPORTED_MODULE_1__["Alert"].SKIP ||
            flags & _models_alert__WEBPACK_IMPORTED_MODULE_1__["Alert"].STOP ||
            flags & _models_alert__WEBPACK_IMPORTED_MODULE_1__["Alert"].RENAME) {
            alert.instance.buttonFlags = flags;
        }
        // プロパティ設定：メッセージキー
        alert.instance.messageKey = messageKey;
        // プロパティ設定：Alertタイプ(これによりタイトル・アイコンが定まる)
        alert.instance.type = type;
        // プロパティ設定：CloseHandler
        if (closeHandler != null) {
            alert.instance.addEventListener(_models_close_event__WEBPACK_IMPORTED_MODULE_2__["CloseEvent"].CLOSE, closeHandler);
        }
        // プロパティ設定：EscキーによるClose有効化フラグ
        alert.instance.enableAlartCloseOnEscKeyDownFlag = enableCloseOnEscKeyDownFlag;
        // ダイアログの表示
        // ★Stitch V1.3対応
        // parent、modal削除
        popup.addPopUp(alert);
        return alert;
    };
    return Sys0Alert;
}());



/***/ }),

/***/ "./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.html":
/*!************************************************************************************************!*\
  !*** ./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.html ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.scss":
/*!************************************************************************************************!*\
  !*** ./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.scss ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvY29udGFpbmVycy9kaWFsb2dzL3N5c3RlbS1jbG9zZS1kaWFsb2cvc3lzdGVtLWNsb3NlLWRpYWxvZy5jb21wb25lbnQuc2NzcyJ9 */"

/***/ }),

/***/ "./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.ts":
/*!**********************************************************************************************!*\
  !*** ./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.ts ***!
  \**********************************************************************************************/
/*! exports provided: SystemCloseDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemCloseDialogComponent", function() { return SystemCloseDialogComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _models_alert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../models/alert */ "./src/app/core/models/alert.ts");
/* harmony import */ var _models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../models/sys0-alert-type */ "./src/app/core/models/sys0-alert-type.ts");
/* harmony import */ var _sys0_alert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sys0-alert */ "./src/app/core/containers/dialogs/sys0-alert.ts");





var SystemCloseDialogComponent = /** @class */ (function () {
    function SystemCloseDialogComponent() {
    }
    SystemCloseDialogComponent.prototype.ngOnInit = function () { };
    SystemCloseDialogComponent.prototype.showDialog = function () {
        // ★Stitch V1.3対応 sys0Alertを表示する。
        _sys0_alert__WEBPACK_IMPORTED_MODULE_4__["Sys0Alert"].show(this.messageLabel, _models_alert__WEBPACK_IMPORTED_MODULE_2__["Alert"].NONE, _models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_3__["Sys0AlertType"].TYPE_SYSTEM_ERROR);
    };
    SystemCloseDialogComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-system-close-dialog',
            template: __webpack_require__(/*! ./system-close-dialog.component.html */ "./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.html"),
            styles: [__webpack_require__(/*! ./system-close-dialog.component.scss */ "./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], SystemCloseDialogComponent);
    return SystemCloseDialogComponent;
}());



/***/ }),

/***/ "./src/app/core/controls/image-manager.ts":
/*!************************************************!*\
  !*** ./src/app/core/controls/image-manager.ts ***!
  \************************************************/
/*! exports provided: ImageManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageManager", function() { return ImageManager; });
/**
 * 埋め込み画像クラスです。
 */
// ★Stitch V1.3対応
// 画像アイコンのURLはsrc/styles.scssに定義。定義したCSSクラス名を、当クラスに定義した。
// 当クラスからクラス名を取得し、画面該当部分のclassに指定することで画像を表示させる。
var ImageManager = /** @class */ (function () {
    function ImageManager() {
        // フォルダーのアイコン
        this.folder = 'folder';
        // フォルダー(開)のアイコン
        this.folderOpened = 'folderOpened';
        // 文書のアイコン(複数セクション)
        this.documents = 'documents';
        // 文書のアイコン
        this.document = 'document';
        // 検索結果一覧のアイコン
        this.searchlist = 'searchlist';
        // お気に入り文書のアイコン
        this.fav_doc = 'fav_doc';
        // お気に入りフォルダーのアイコン
        this.fav_folder = 'fav_folder';
        // お気に入り検索条件のアイコン
        this.fav_search = 'fav_search';
        // フォルダー（大）のアイコン
        this.folder_l = 'folder_l';
        // お気に入り文書（大）のアイコン
        this.fav_doc_l = 'fav_doc_l';
        // お気に入りフォルダー（大）のアイコン
        this.fav_folder_l = 'fav_folder_l';
        // お気に入り検索条件（大）のアイコン
        this.fav_search_l = 'fav_search_l';
        // ゴミ箱のアイコン
        this.trashcan = 'trashcan';
        // TODOのアイコン
        this.todo = 'todo';
        // TODOのアイコン
        this.todoIcon = 'todoIcon';
        // キャビネットのアイコン
        this.cabinet = 'cabinet';
        // お気に入りアイコン
        this.favorite = 'favorite';
        // 検索アイコン
        this.search = 'search';
        // 検索条件変更アイコン
        this.changeSearch = 'changeSearch';
        // 検索条件変更ボタン
        this.changeSearchButton = 'changeSearchButton';
        // +アイコン
        this.plus = 'plus';
        // +アイコン(非アクティブ)
        this.plusFalse = 'plusFalse';
        // -アイコン
        this.minus = 'minus';
        // -アイコン(非アクティブ)
        this.minusFalse = 'minusFalse';
        // ■アイコン
        this.bulletTitle = 'bulletTitle';
        // 文書ボタンアイコン
        this.fileButton = 'fileButton';
        // フォルダーボタンアイコン
        this.folderButton = 'folderButton';
        // ビットマップのアイコン
        this.bmp = 'bmp';
        // PDFのアイコン
        this.pdf = 'pdf';
        // Wordのアイコン
        this.doc = 'doc';
        // Word2007のアイコン
        this.docx = 'docx';
        // Word(マクロ付)のアイコン
        this.docm = 'docm';
        // テキストファイルのアイコン
        this.txt = 'txt';
        // PowerPointのアイコン
        this.ppt = 'ppt';
        // PowerPoint2007のアイコン
        this.pptx = 'pptx';
        // PowerPoint(マクロ付)のアイコン
        this.pptm = 'pptm';
        // Excelのアイコン
        this.xls = 'xls';
        // Excel2007のアイコン
        this.xlsx = 'xlsx';
        // Excel(マクロ付)のアイコン
        this.xlsm = 'xlsm';
        // Excelのアイコン
        this.csv = 'csv';
        // JPEGのアイコン
        this.jpg = 'jpg';
        // PNGのアイコン
        this.png = 'png';
        // 一太郎
        this.jtd = 'jtd';
        // Tiffファイルのアイコン
        this.tif = 'tif';
        // Visioのアイコン
        this.vsd = 'vsd';
        // Visio(マクロ付き)のアイコン
        this.vsdm = 'vsdm';
        // Visio2013のアイコン
        this.vsdx = 'vsdx';
        // セクションなしの拡張子のアイコン
        this.icon0 = 'icon0';
        // システムエラーアイコン
        this.iconSystemError = 'iconSystemError';
        // 業務エラーアイコン
        this.iconError = 'iconError';
        // 警告アイコン
        this.iconWarning = 'iconWarning';
        // 確認アイコン
        this.iconQuestion = 'iconQuestion';
        // 情報アイコン
        this.iconInfo = 'iconInfo';
        this.bulletClose = 'bulletClose';
        this.bulletOpen = 'bulletOpen';
        // htmlのアイコン
        this.html = 'html';
        this.dwg = 'dwg';
        this.lwp = 'lwp';
        this.otr = 'otr';
        this.prz = 'prz';
        // 文書ショートカットのアイコン
        this.txt_sc = 'txt_sc';
        // 文書ショートカットのアイコン
        this.txt_sc_l = 'txt_sc_l';
        // 文書情報編集ボタンアイコン
        this.edit = 'edit';
        // 条件保存ボタンアイコン
        this.saveFavorite = 'saveFavorite';
        // 上へアイコン
        this.up = 'up';
        // 上へアイコン(非アクティブ)
        this.upFalse = 'upFalse';
        // 下へボタンアイコン
        this.down = 'down';
        // 下へボタン(非アクティブ)アイコン
        this.downFalse = 'downFalse';
        // ユーザーグループアイコン
        this.userGroup = 'userGroup';
        // ユーザーアイコン
        this.user = 'user';
        // グループアイコン
        this.group = 'group';
        // フォルダーサイズ表示アイコン
        this.calculate = 'calculate';
        // 文書情報設定の編集アイコン
        this.toggleEdit = 'toggleEdit';
        // 文書情報設定の参照アイコン
        this.togglePreview = 'togglePreview';
        // 所有権取得アイコン
        this.ownerChange = 'ownerChange';
        // 所有権取得アイコン(over)
        this.ownerChangeOver = 'ownerChangeOver';
        // 所有権取得アイコン(false)
        this.ownerChangeFalse = 'ownerChangeFalse';
        // 保存アイコン
        this.save = 'save';
        // 保存アイコン(over)
        this.saveOver = 'saveOver';
        // 保存アイコン(false)
        this.saveFalse = 'saveFalse';
        // 編集アイコン
        this.editComment = 'editComment';
        // 編集アイコン(over)
        this.editOver = 'editOver';
        // 編集アイコン(false)
        this.editFalse = 'editFalse';
        // 右へアイコン
        this.right = 'right';
        // 右へアイコン(false)
        this.rightFalse = 'rightFalse';
        // 左へアイコン
        this.left = 'left';
        // 左へアイコン(false)
        this.leftFalse = 'leftFalse';
        // 戻るアイコン
        this.returnButton = 'returnButton';
        // 前へアイコン
        this.back = 'back';
        // 前へアイコン(over)
        this.backOver = 'backOver';
        // 次へアイコン
        this.next = 'next';
        // 次へアイコン(over)
        this.nextOver = 'nextOver';
        this.globalGroup = 'globalGroup';
        this.localGroup = 'localGroup';
        this.universalGroup = 'universalGroup';
        this.groupIcon = 'groupIcon';
        this.userGroupIcon = 'userGroupIcon';
        this.userIcon = 'userIcon';
        // クリップ(仮)
        this.clipIcon = 'clipIcon';
        // 文書プロパティ_プロパティのカレントビューを指すアイコン
        this.current = 'current';
        // 簡単ビューア
        this.openViewer = 'openViewer';
        this.closeViewer = 'closeViewer';
        this.openProperty = 'openProperty';
        this.closeProperty = 'closeProperty';
        this.view_list = 'view_list';
        this.view_thumbnail = 'view_thumbnail';
    }
    return ImageManager;
}());



/***/ }),

/***/ "./src/app/core/core.module.ts":
/*!*************************************!*\
  !*** ./src/app/core/core.module.ts ***!
  \*************************************/
/*! exports provided: CoreModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CoreModule", function() { return CoreModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _containers_dialogs_system_close_dialog_system_close_dialog_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./containers/dialogs/system-close-dialog/system-close-dialog.component */ "./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.ts");
/* harmony import */ var _services_base_model_locator_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/base-model-locator.service */ "./src/app/core/services/base-model-locator.service.ts");
/* harmony import */ var _services_command_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/command-provider */ "./src/app/core/services/command-provider.ts");
/* harmony import */ var _services_controller_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/controller.service */ "./src/app/core/services/controller.service.ts");
/* harmony import */ var _services_http_cookie_interceptor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/http/cookie-interceptor */ "./src/app/core/services/http/cookie-interceptor.ts");
/* harmony import */ var _services_locator_service_factory__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./services/locator-service-factory */ "./src/app/core/services/locator-service-factory.ts");
/* harmony import */ var _utils_injector_provider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/injector-provider */ "./src/app/core/utils/injector-provider.ts");










/**
 * アプリ全体で一度だけ読み込まれるモジュール。<br>
 * ルートモジュールにのみ登録を行い、他のモジュールからは読み込めない
 */
var CoreModule = /** @class */ (function () {
    function CoreModule(parentModule, injector) {
        _utils_injector_provider__WEBPACK_IMPORTED_MODULE_9__["InjectorProvider"].set(injector);
        // 複数モジュールからの読み込み防止
        if (parentModule) {
            throw new Error('CoreModule is already loaded. Import it in the AppModule only.');
        }
    }
    CoreModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
            imports: [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClientModule"]],
            declarations: [_containers_dialogs_system_close_dialog_system_close_dialog_component__WEBPACK_IMPORTED_MODULE_3__["SystemCloseDialogComponent"]],
            providers: [
                { provide: _services_command_provider__WEBPACK_IMPORTED_MODULE_5__["COMMAND_PROVIDER"], useExisting: _services_controller_service__WEBPACK_IMPORTED_MODULE_6__["ControllerService"] },
                { provide: _services_base_model_locator_service__WEBPACK_IMPORTED_MODULE_4__["BaseModelLocatorService"], useFactory: _services_locator_service_factory__WEBPACK_IMPORTED_MODULE_8__["locatorServiceFactory"] },
                { provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HTTP_INTERCEPTORS"], useClass: _services_http_cookie_interceptor__WEBPACK_IMPORTED_MODULE_7__["CookieInterceptor"], multi: true }
            ],
            entryComponents: [_containers_dialogs_system_close_dialog_system_close_dialog_component__WEBPACK_IMPORTED_MODULE_3__["SystemCloseDialogComponent"]]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"])()),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["SkipSelf"])()),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [CoreModule,
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injector"]])
    ], CoreModule);
    return CoreModule;
}());



/***/ }),

/***/ "./src/app/core/event/base-event.ts":
/*!******************************************!*\
  !*** ./src/app/core/event/base-event.ts ***!
  \******************************************/
/*! exports provided: BaseEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseEvent", function() { return BaseEvent; });
/**
 * 基本的なEventのプロパティを表す
 */
var BaseEvent = /** @class */ (function () {
    function BaseEvent() {
    }
    /**
     * デフォルト処理を防ぎます。
     * 基本的にAngularのイベントは自前なので
     * デフォルト処理はなく、このメソッドは
     * 何もしません。
     * 意図的に処理をしたい場合はこのメソッドを上書きして
     * 各々のイベントで意味をもたせてください。
     */
    BaseEvent.prototype.preventDefault = function () { };
    BaseEvent.ACTIVATE = 'activate';
    BaseEvent.ADDED = 'added';
    BaseEvent.ADDED_TO_STAGE = 'addedToStage';
    BaseEvent.BROWSER_ZOOM_CHANGE = 'browserZoomChange';
    BaseEvent.CANCEL = 'cancel';
    BaseEvent.CHANGE = 'change';
    BaseEvent.CHANNEL_MESSAGE = 'channelMessage';
    BaseEvent.CHANNEL_STATE = 'channelState';
    BaseEvent.CLEAR = 'clear';
    BaseEvent.CLOSE = 'close';
    BaseEvent.CLOSING = 'closing';
    BaseEvent.COMPLETE = 'complete';
    BaseEvent.CONNECT = 'connect';
    BaseEvent.CONTEXT3D_CREATE = 'context3DCreate';
    BaseEvent.COPY = 'copy';
    BaseEvent.CUT = 'cut';
    BaseEvent.DEACTIVATE = 'deactivate';
    BaseEvent.DISPLAYING = 'displaying';
    BaseEvent.ENTER_FRAME = 'enterFrame';
    BaseEvent.EXIT_FRAME = 'exitFrame';
    BaseEvent.EXITING = 'exiting';
    BaseEvent.FRAME_CONSTRUCTED = 'frameConstructed';
    BaseEvent.FRAME_LABEL = 'frameLabel';
    BaseEvent.FULLSCREEN = 'fullScreen';
    BaseEvent.HTML_BOUNDS_CHANGE = 'htmlBoundsChange';
    BaseEvent.HTML_DOM_INITIALIZE = 'htmlDOMInitialize';
    BaseEvent.HTML_RENDER = 'htmlRender';
    BaseEvent.ID3 = 'id3';
    BaseEvent.INIT = 'init';
    BaseEvent.LOCATION_CHANGE = 'locationChange';
    BaseEvent.MOUSE_LEAVE = 'mouseLeave';
    BaseEvent.NETWORK_CHANGE = 'networkChange';
    BaseEvent.OPEN = 'open';
    BaseEvent.PASTE = 'paste';
    BaseEvent.PREPARING = 'preparing';
    BaseEvent.REMOVED = 'removed';
    BaseEvent.REMOVED_FROM_STAGE = 'removedFromStage';
    BaseEvent.RENDER = 'render';
    BaseEvent.RESIZE = 'resize';
    BaseEvent.SCROLL = 'scroll';
    BaseEvent.SELECT = 'select';
    BaseEvent.SELECT_ALL = 'selectAll';
    BaseEvent.SOUND_COMPLETE = 'soundComplete';
    BaseEvent.STANDARD_ERROR_CLOSE = 'standardErrorClose';
    BaseEvent.STANDARD_INPUT_CLOSE = 'standardInputClose';
    BaseEvent.STANDARD_OUTPUT_CLOSE = 'standardOutputClose';
    BaseEvent.SUSPEND = 'suspend';
    BaseEvent.TAB_CHILDREN_CHANGE = 'tabChildrenChange';
    BaseEvent.TAB_ENABLED_CHANGE = 'tabEnabledChange';
    BaseEvent.TAB_INDEX_CHANGE = 'tabIndexChange';
    BaseEvent.TEXT_INTERACTION_MODE_CHANGE = 'textInteractionModeChange';
    BaseEvent.TEXTURE_READY = 'textureReady';
    BaseEvent.UNLOAD = 'unload';
    BaseEvent.USER_IDLE = 'userIdle';
    BaseEvent.USER_PRESENT = 'userPresent';
    BaseEvent.VIDEO_FRAME = 'videoFrame';
    BaseEvent.WORKER_STATE = 'workerState';
    return BaseEvent;
}());



/***/ }),

/***/ "./src/app/core/models/alert.ts":
/*!**************************************!*\
  !*** ./src/app/core/models/alert.ts ***!
  \**************************************/
/*! exports provided: Alert */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alert", function() { return Alert; });
/**
 * メッセージ表示画面のボタン表示用定義
 */
var Alert = /** @class */ (function () {
    function Alert() {
    }
    /**
     * ボタンを出さない値
     */
    Alert.NONE = 0x0000;
    /**
     * [はい]ボタンを有効にする値
     *
     * 他のボタンと同時に表示したい場合はORを取得して使用してください
     * @example  Alert.OK | Alert.NO
     */
    Alert.YES = 0x0001;
    /**
     * [いいえ]ボタンを有効にする値
     *
     * 他のボタンと同時に表示したい場合はORを取得して使用してください
     * @example  Alert.OK | Alert.NO
     */
    Alert.NO = 0x0002;
    /**
     * [OK]ボタンを有効にする値
     *
     * 他のボタンと同時に表示したい場合はORを取得して使用してください
     * @example  Alert.OK | Alert.NO
     */
    Alert.OK = 0x0004;
    /**
     * [キャンセル]ボタンを有効にする値
     *
     * 他のボタンと同時に表示したい場合はORを取得して使用してください
     * @example  Alert.OK | Alert.NO
     */
    Alert.CANCEL = 0x0008;
    // ★Stitch V1.3対応
    // 以下Sys0Alertに定義されていた独自拡張ボタン
    // Alertでの集約管理に変更する
    /**
     * [スキップ]ボタンを有効にする値
     *
     * 他のボタンと同時に表示したい場合はORを取得して使用してください
     * @example  Alert.OK | Alert.NO
     */
    Alert.SKIP = 0x0010;
    /**
     * [名前変更]ボタンを有効にする値
     *
     * 他のボタンと同時に表示したい場合はORを取得して使用してください
     * @example  Alert.OK | Alert.NO
     */
    Alert.RENAME = 0x0020;
    /**
     * [スキップ]ボタンを有効にする値
     *
     * 他のボタンと同時に表示したい場合はORを取得して使用してください
     * @example  Alert.OK | Alert.NO
     */
    Alert.STOP = 0x0040;
    return Alert;
}());



/***/ }),

/***/ "./src/app/core/models/client-info.ts":
/*!********************************************!*\
  !*** ./src/app/core/models/client-info.ts ***!
  \********************************************/
/*! exports provided: ClientInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClientInfo", function() { return ClientInfo; });
/**
 * クライアントアプリの設定
 */
var ClientInfo = /** @class */ (function () {
    function ClientInfo() {
    }
    var _a;
    /**
     * ClientInfoはサーバーからはkeyとvalueの配列で得られる。そのキー名。
     *
     * それぞれ、このクラスのプロパティ名に対応する
     */
    ClientInfo.Key = (_a = /** @class */ (function () {
            function class_1() {
            }
            return class_1;
        }()),
        _a.MAIN_DND_PATH = 'mainD&DPath',
        _a.MAIN_DND_STATUS = 'mainD&DStatus',
        _a.VIEWER_DND_PATH = 'viewerD&DPath',
        _a.VIEWER_DND_STATUS = 'viewerD&DStatus',
        _a.VIEWER_DND_DISABLE_PATH = 'viewerD&DDisablePath',
        _a.SEARCH_MAX_COUNT = 'searchMaxCount',
        _a.TRASH_MAX_COUNT = 'trashMaxCount',
        _a.TIMESTAMP_ON = 'timestampOn',
        _a.TIMESTAMP_TOTAL_TRADE_PRICE_DISPLAY_NAME = 'timestampTotalTradePriceDisplayName',
        _a);
    /**
     * timestampOnメンバがONである
     */
    ClientInfo.TIME_STAMP_ON = '1';
    return ClientInfo;
}());



/***/ }),

/***/ "./src/app/core/models/close-event.ts":
/*!********************************************!*\
  !*** ./src/app/core/models/close-event.ts ***!
  \********************************************/
/*! exports provided: CloseEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloseEvent", function() { return CloseEvent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _event_base_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../event/base-event */ "./src/app/core/event/base-event.ts");


/**
 * 画面クローズ時のイベントです
 */
var CloseEvent = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CloseEvent, _super);
    function CloseEvent(type, bubbles, cancelable, 
    // ダイアログで押下されたボタンの種類
    detail) {
        if (bubbles === void 0) { bubbles = false; }
        if (cancelable === void 0) { cancelable = false; }
        if (detail === void 0) { detail = -1; }
        var _this = _super.call(this) || this;
        _this.detail = detail;
        _this.type = type;
        _this.bubbles = bubbles;
        _this.cancelable = cancelable;
        return _this;
    }
    return CloseEvent;
}(_event_base_event__WEBPACK_IMPORTED_MODULE_1__["BaseEvent"]));



/***/ }),

/***/ "./src/app/core/models/cursor-css.ts":
/*!*******************************************!*\
  !*** ./src/app/core/models/cursor-css.ts ***!
  \*******************************************/
/*! exports provided: CursorType, DragManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CursorType", function() { return CursorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragManager", function() { return DragManager; });
/**
 * カーソルのenum
 */
var CursorType;
(function (CursorType) {
    CursorType["WAIT"] = "wait";
    CursorType["AUTO"] = "auto";
})(CursorType || (CursorType = {}));
/**
 * D&D時cursorのenum
 */
var DragManager;
(function (DragManager) {
    DragManager["COPY"] = "copy";
    DragManager["MOVE"] = "move";
    DragManager["LINK"] = "link";
    DragManager["NONE"] = "none";
})(DragManager || (DragManager = {}));


/***/ }),

/***/ "./src/app/core/models/login-info.ts":
/*!*******************************************!*\
  !*** ./src/app/core/models/login-info.ts ***!
  \*******************************************/
/*! exports provided: LoginInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginInfo", function() { return LoginInfo; });
/**
 * ログインユーザーの情報
 */
var LoginInfo = /** @class */ (function () {
    function LoginInfo() {
    }
    return LoginInfo;
}());



/***/ }),

/***/ "./src/app/core/models/server-info.ts":
/*!********************************************!*\
  !*** ./src/app/core/models/server-info.ts ***!
  \********************************************/
/*! exports provided: ServerInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerInfo", function() { return ServerInfo; });
/**
 * サーバーの設定
 */
var ServerInfo = /** @class */ (function () {
    function ServerInfo() {
    }
    return ServerInfo;
}());



/***/ }),

/***/ "./src/app/core/models/sys0-alert-type.ts":
/*!************************************************!*\
  !*** ./src/app/core/models/sys0-alert-type.ts ***!
  \************************************************/
/*! exports provided: Sys0AlertType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sys0AlertType", function() { return Sys0AlertType; });
/**
 * Sys0Alertのエラータイプに指定する定数
 */
var Sys0AlertType = /** @class */ (function () {
    function Sys0AlertType() {
    }
    /** 無し */
    Sys0AlertType.TYPE_NONE = -1;
    /** システムエラー */
    Sys0AlertType.TYPE_SYSTEM_ERROR = 0;
    /** エラー */
    Sys0AlertType.TYPE_ERROR = 1;
    /** 警告 */
    Sys0AlertType.TYPE_WARNING = 2;
    /** 処理通知 */
    Sys0AlertType.TYPE_QUESTION = 3;
    /** 情報 */
    Sys0AlertType.TYPE_INFO = 4;
    return Sys0AlertType;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-access-right-vo.ts":
/*!**********************************************************!*\
  !*** ./src/app/core/server-vo/server-access-right-vo.ts ***!
  \**********************************************************/
/*! exports provided: ServerAccessRightVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerAccessRightVO", function() { return ServerAccessRightVO; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * 組み合わせアクセス権詳細データモデル
 */
var ServerAccessRightVO = /** @class */ (function () {
    function ServerAccessRightVO() {
        this.enableReadProperty = null;
        this.enableWriteProperty = null;
        this.enableRead = null;
        this.enableUpdate = null;
        this.enableDelete = null;
        this.enableChangeACL = null;
        this.enableAcquireOwnship = null;
        this.enableCreateDocument = null;
        this.enableCreateSubFolder = null;
        this.enableClearTrash = null;
    }
    ServerAccessRightVO.convert = function (target) {
        var defaultProperty = new ServerAccessRightVO();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerAccessRightVO;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-ace-vo.ts":
/*!*************************************************!*\
  !*** ./src/app/core/server-vo/server-ace-vo.ts ***!
  \*************************************************/
/*! exports provided: ServerAceVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerAceVo", function() { return ServerAceVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/http/vo-converter */ "./src/app/core/services/http/vo-converter.ts");
/* harmony import */ var _vo_access_right_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vo/access-right-vo */ "./src/app/core/vo/access-right-vo.ts");
/* harmony import */ var _vo_entry_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../vo/entry-vo */ "./src/app/core/vo/entry-vo.ts");
/* harmony import */ var _server_access_right_vo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./server-access-right-vo */ "./src/app/core/server-vo/server-access-right-vo.ts");
/* harmony import */ var _server_entry_vo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./server-entry-vo */ "./src/app/core/server-vo/server-entry-vo.ts");






/**
 * １ユーザーはドキュメントまたはショートカットオブジェクトに対するアクセス権詳細データモデル
 */
var ServerAceVo = /** @class */ (function () {
    function ServerAceVo() {
        this.entry = null;
        this.accessRight = null;
        this.detail = null;
        this.documentDefaultaccessRight = null;
        this.documentDefaultDetail = null;
    }
    ServerAceVo.convert = function (target) {
        var castPair = [{ cast: _vo_entry_vo__WEBPACK_IMPORTED_MODULE_3__["isEntryVO"], serverVo: _server_entry_vo__WEBPACK_IMPORTED_MODULE_5__["ServerEntryVo"] }, { cast: _vo_access_right_vo__WEBPACK_IMPORTED_MODULE_2__["isAccessRightVO"], serverVo: _server_access_right_vo__WEBPACK_IMPORTED_MODULE_4__["ServerAccessRightVO"] }];
        var defaultProperty = new ServerAceVo();
        var pick = _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__["VoConverter"].convertVoProperties(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)), castPair, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty));
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](pick, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerAceVo;
}());

var CastPair = /** @class */ (function () {
    function CastPair() {
    }
    return CastPair;
}());


/***/ }),

/***/ "./src/app/core/server-vo/server-acl-vo.ts":
/*!*************************************************!*\
  !*** ./src/app/core/server-vo/server-acl-vo.ts ***!
  \*************************************************/
/*! exports provided: ServerAclVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerAclVo", function() { return ServerAclVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/http/vo-converter */ "./src/app/core/services/http/vo-converter.ts");
/* harmony import */ var _vo_ace_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vo/ace-vo */ "./src/app/core/vo/ace-vo.ts");
/* harmony import */ var _vo_entry_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../vo/entry-vo */ "./src/app/core/vo/entry-vo.ts");
/* harmony import */ var _server_ace_vo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./server-ace-vo */ "./src/app/core/server-vo/server-ace-vo.ts");
/* harmony import */ var _server_entry_vo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./server-entry-vo */ "./src/app/core/server-vo/server-entry-vo.ts");






/**
 * オブジェクトのアクセス権詳細データクラス
 * id,cabIdはアクセス権の対象のオブジェクトのID
 *
 */
var ServerAclVo = /** @class */ (function () {
    function ServerAclVo() {
        this.id = null;
        this.cabId = null;
        this.type = null;
        this.owner = null;
        this.aceList = null;
    }
    ServerAclVo.convert = function (target) {
        var castPair = [{ cast: _vo_entry_vo__WEBPACK_IMPORTED_MODULE_3__["isEntryVO"], serverVo: _server_entry_vo__WEBPACK_IMPORTED_MODULE_5__["ServerEntryVo"] }, { cast: _vo_ace_vo__WEBPACK_IMPORTED_MODULE_2__["isAceVO"], serverVo: _server_ace_vo__WEBPACK_IMPORTED_MODULE_4__["ServerAceVo"] }];
        var defaultProperty = new ServerAclVo();
        var pick = _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__["VoConverter"].convertVoProperties(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)), castPair, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty));
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](pick, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerAclVo;
}());

var CastPair = /** @class */ (function () {
    function CastPair() {
    }
    return CastPair;
}());


/***/ }),

/***/ "./src/app/core/server-vo/server-cabinet-vo.ts":
/*!*****************************************************!*\
  !*** ./src/app/core/server-vo/server-cabinet-vo.ts ***!
  \*****************************************************/
/*! exports provided: ServerCabinetVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerCabinetVo", function() { return ServerCabinetVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * キャビネットデータモデル
 */
var ServerCabinetVo = /** @class */ (function () {
    function ServerCabinetVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.type = null;
        this.icon = null;
        this.children = null;
        this.parentId = null;
        this.typeId = null;
    }
    ServerCabinetVo.convert = function (target) {
        var defaultProperty = new ServerCabinetVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerCabinetVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-config-file-vo.ts":
/*!*********************************************************!*\
  !*** ./src/app/core/server-vo/server-config-file-vo.ts ***!
  \*********************************************************/
/*! exports provided: ServerConfigFileVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerConfigFileVo", function() { return ServerConfigFileVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * プロファイルデータモデル
 */
var ServerConfigFileVo = /** @class */ (function () {
    function ServerConfigFileVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.type = null;
        this.profileId = null;
    }
    ServerConfigFileVo.convert = function (target) {
        var defaultProperty = new ServerConfigFileVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerConfigFileVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-create-sub-data-vo.ts":
/*!*************************************************************!*\
  !*** ./src/app/core/server-vo/server-create-sub-data-vo.ts ***!
  \*************************************************************/
/*! exports provided: ServerCreateSubDataVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerCreateSubDataVo", function() { return ServerCreateSubDataVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * サブデータ作成のデータモデル
 */
var ServerCreateSubDataVo = /** @class */ (function () {
    function ServerCreateSubDataVo() {
        this.fts = null;
        this.pdf = null;
        this.thumbnail = null;
    }
    ServerCreateSubDataVo.convert = function (target) {
        var defaultProperty = new ServerCreateSubDataVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerCreateSubDataVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-document-type-vo.ts":
/*!***********************************************************!*\
  !*** ./src/app/core/server-vo/server-document-type-vo.ts ***!
  \***********************************************************/
/*! exports provided: ServerDocumentTypeVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerDocumentTypeVo", function() { return ServerDocumentTypeVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/http/vo-converter */ "./src/app/core/services/http/vo-converter.ts");
/* harmony import */ var _vo_property_detail_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vo/property-detail-vo */ "./src/app/core/vo/property-detail-vo.ts");
/* harmony import */ var _server_property_detail_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./server-property-detail-vo */ "./src/app/core/server-vo/server-property-detail-vo.ts");




/**
 * 文書タイプ詳細モデル
 */
var ServerDocumentTypeVo = /** @class */ (function () {
    function ServerDocumentTypeVo() {
        this.id = null;
        this.name = null;
        this.ib_Form = null;
        this.reqAttrNum = null;
        this.category = null;
        this.retensionYear = null;
        this.enableProps = null;
    }
    ServerDocumentTypeVo.convert = function (target) {
        var castPair = [{ cast: _vo_property_detail_vo__WEBPACK_IMPORTED_MODULE_2__["isPropertyDetailVO"], serverVo: _server_property_detail_vo__WEBPACK_IMPORTED_MODULE_3__["ServerPropertyDetailVo"] }];
        var defaultProperty = new ServerDocumentTypeVo();
        var pick = _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__["VoConverter"].convertVoProperties(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)), castPair, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty));
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](pick, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerDocumentTypeVo;
}());

var CastPair = /** @class */ (function () {
    function CastPair() {
    }
    return CastPair;
}());


/***/ }),

/***/ "./src/app/core/server-vo/server-document-vo.ts":
/*!******************************************************!*\
  !*** ./src/app/core/server-vo/server-document-vo.ts ***!
  \******************************************************/
/*! exports provided: ServerDocumentVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerDocumentVo", function() { return ServerDocumentVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/http/vo-converter */ "./src/app/core/services/http/vo-converter.ts");
/* harmony import */ var _vo_tag_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vo/tag-vo */ "./src/app/core/vo/tag-vo.ts");
/* harmony import */ var _server_tag_model_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./server-tag-model-vo */ "./src/app/core/server-vo/server-tag-model-vo.ts");




/**
 * 文書データモデル
 */
var ServerDocumentVo = /** @class */ (function () {
    function ServerDocumentVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.type = null;
        this.icon = null;
        this.number = null;
        this.creater = null;
        this.lastUpdateDate = null;
        this.retensionDate = null;
        this.sections = null;
        this.size = null;
        this.typeId = null;
        this.status = null;
        this.version = null;
        this.trashDoc = null;
        this.entryDate = null;
        this.lastAccessDate = null;
        this.accessCount = null;
        this.userString1 = null;
        this.userString2 = null;
        this.userString3 = null;
        this.userString4 = null;
        this.userString5 = null;
        this.userString6 = null;
        this.userString7 = null;
        this.userString8 = null;
        this.userString9 = null;
        this.userString10 = null;
        this.userString11 = null;
        this.userString12 = null;
        this.userString13 = null;
        this.userString14 = null;
        this.userString15 = null;
        this.userString16 = null;
        this.userString17 = null;
        this.userString18 = null;
        this.userString19 = null;
        this.userString20 = null;
        this.userInteger1 = null;
        this.userInteger2 = null;
        this.userInteger3 = null;
        this.userInteger4 = null;
        this.userInteger5 = null;
        this.userInteger6 = null;
        this.userInteger7 = null;
        this.userInteger8 = null;
        this.userInteger9 = null;
        this.userInteger10 = null;
        this.userMemo1 = null;
        this.userMemo2 = null;
        this.userMemo3 = null;
        this.userMemo4 = null;
        this.userMemo5 = null;
        this.userDate1 = null;
        this.userDate2 = null;
        this.userDate3 = null;
        this.userDate4 = null;
        this.userDate5 = null;
        this.userNumber = null;
        this.autoNumber = null;
        this.memo = null;
        this.workFlowStatus = null;
        this.applicant = null;
        this.approver = null;
        this.children = null;
        this.parentId = null;
        this.pathIds = null;
        this.pathNames = null;
        this.tagList = null;
        this.thumbnailData = null;
        this.versionMemo = null;
        this.waitingApprover = null;
    }
    ServerDocumentVo.convert = function (target) {
        var castPair = [{ cast: _vo_tag_vo__WEBPACK_IMPORTED_MODULE_2__["isTagVO"], serverVo: _server_tag_model_vo__WEBPACK_IMPORTED_MODULE_3__["ServerTagModelVo"] }];
        var defaultProperty = new ServerDocumentVo();
        var pick = _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__["VoConverter"].convertVoProperties(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)), castPair, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty));
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](pick, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerDocumentVo;
}());

var CastPair = /** @class */ (function () {
    function CastPair() {
    }
    return CastPair;
}());


/***/ }),

/***/ "./src/app/core/server-vo/server-domain-model-vo.ts":
/*!**********************************************************!*\
  !*** ./src/app/core/server-vo/server-domain-model-vo.ts ***!
  \**********************************************************/
/*! exports provided: ServerDomainModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerDomainModelVo", function() { return ServerDomainModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * ドメイン用のデータモデル
 */
var ServerDomainModelVo = /** @class */ (function () {
    function ServerDomainModelVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.folderType = null;
        this.phoneticName = null;
        this.pathName = null;
    }
    ServerDomainModelVo.convert = function (target) {
        var defaultProperty = new ServerDomainModelVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerDomainModelVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-entry-vo.ts":
/*!***************************************************!*\
  !*** ./src/app/core/server-vo/server-entry-vo.ts ***!
  \***************************************************/
/*! exports provided: ServerEntryVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerEntryVo", function() { return ServerEntryVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * UDから取得したエントリ（ユーザー、グループ）
 */
var ServerEntryVo = /** @class */ (function () {
    function ServerEntryVo() {
        this.cabId = null;
        this.createDate = null;
        this.domainName = null;
        this.entryType = null;
        this.id = null;
        this.name = null;
        this.index = null;
        // ★Stitch V1.3対応 サーバー側のコピーライブラリ対応のため、isProtectedからprotedtedに変更
        this.protected = null;
        this.longName = null;
        this.mailAddress = null;
        this.mailAddressList = null;
        this.phoneticName = null;
        this.propPrefixes = null;
        this.shortName = null;
        this.userSpace = null;
    }
    ServerEntryVo.convert = function (target) {
        var defaultProperty = new ServerEntryVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerEntryVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-favorite-category-model-vo.ts":
/*!*********************************************************************!*\
  !*** ./src/app/core/server-vo/server-favorite-category-model-vo.ts ***!
  \*********************************************************************/
/*! exports provided: ServerFavoriteCategoryModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerFavoriteCategoryModelVo", function() { return ServerFavoriteCategoryModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * お気に入りカテゴリーデータモデル
 */
var ServerFavoriteCategoryModelVo = /** @class */ (function () {
    function ServerFavoriteCategoryModelVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.type = null;
        this.icon = null;
        this.children = null;
        this.parentId = null;
        this.size = null;
        this.typeId = null;
        this.pathIds = null;
        this.pathNames = null;
        this.isSystemCategory = null;
        this.categoryType = null;
        this.profileId = null;
    }
    ServerFavoriteCategoryModelVo.convert = function (target) {
        var defaultProperty = new ServerFavoriteCategoryModelVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerFavoriteCategoryModelVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-favorite-vo.ts":
/*!******************************************************!*\
  !*** ./src/app/core/server-vo/server-favorite-vo.ts ***!
  \******************************************************/
/*! exports provided: ServerFavoriteVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerFavoriteVo", function() { return ServerFavoriteVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/http/vo-converter */ "./src/app/core/services/http/vo-converter.ts");
/* harmony import */ var _vo_document_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vo/document-vo */ "./src/app/core/vo/document-vo.ts");
/* harmony import */ var _vo_folder_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../vo/folder-vo */ "./src/app/core/vo/folder-vo.ts");
/* harmony import */ var _server_document_vo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./server-document-vo */ "./src/app/core/server-vo/server-document-vo.ts");
/* harmony import */ var _server_folder_type_vo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./server-folder-type-vo */ "./src/app/core/server-vo/server-folder-type-vo.ts");






/**
 * お気に入データモデル
 */
var ServerFavoriteVo = /** @class */ (function () {
    function ServerFavoriteVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.type = null;
        this.icon = null;
        this.children = null;
        this.parentId = null;
        this.profileId = null;
        this.linkId = null;
        this.targetType = null;
        this.digest = null;
        this.isDefault = null;
        this.pathIds = null;
        this.pathNames = null;
        this.linkObject = null;
    }
    ServerFavoriteVo.convert = function (target) {
        var castPair = [{ cast: _vo_document_vo__WEBPACK_IMPORTED_MODULE_2__["isDocumentVO"], serverVo: _server_document_vo__WEBPACK_IMPORTED_MODULE_4__["ServerDocumentVo"] }, { cast: _vo_folder_vo__WEBPACK_IMPORTED_MODULE_3__["isFolderVO"], serverVo: _server_folder_type_vo__WEBPACK_IMPORTED_MODULE_5__["ServerFolderTypeVo"] }];
        var defaultProperty = new ServerFavoriteVo();
        var pick = _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__["VoConverter"].convertVoProperties(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)), castPair, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty));
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](pick, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerFavoriteVo;
}());

var CastPair = /** @class */ (function () {
    function CastPair() {
    }
    return CastPair;
}());


/***/ }),

/***/ "./src/app/core/server-vo/server-folder-type-vo.ts":
/*!*********************************************************!*\
  !*** ./src/app/core/server-vo/server-folder-type-vo.ts ***!
  \*********************************************************/
/*! exports provided: ServerFolderTypeVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerFolderTypeVo", function() { return ServerFolderTypeVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * フォルダタイプの定数
 */
var ServerFolderTypeVo = /** @class */ (function () {
    function ServerFolderTypeVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.type = null;
        this.icon = null;
        this.children = null;
        this.parentId = null;
        this.size = null;
        this.typeId = null;
        this.pathIds = null;
        this.pathNames = null;
    }
    ServerFolderTypeVo.convert = function (target) {
        var defaultProperty = new ServerFolderTypeVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerFolderTypeVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-object-base-vo.ts":
/*!*********************************************************!*\
  !*** ./src/app/core/server-vo/server-object-base-vo.ts ***!
  \*********************************************************/
/*! exports provided: ServerObjectBaseVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerObjectBaseVo", function() { return ServerObjectBaseVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _vo_acl_vo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vo/acl-vo */ "./src/app/core/vo/acl-vo.ts");
/* harmony import */ var _vo_cabinet_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vo/cabinet-vo */ "./src/app/core/vo/cabinet-vo.ts");
/* harmony import */ var _vo_document_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../vo/document-vo */ "./src/app/core/vo/document-vo.ts");
/* harmony import */ var _vo_favorite_vo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../vo/favorite-vo */ "./src/app/core/vo/favorite-vo.ts");
/* harmony import */ var _vo_folder_vo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../vo/folder-vo */ "./src/app/core/vo/folder-vo.ts");
/* harmony import */ var _vo_shortcut_vo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../vo/shortcut-vo */ "./src/app/core/vo/shortcut-vo.ts");
/* harmony import */ var _vo_trash_vo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../vo/trash-vo */ "./src/app/core/vo/trash-vo.ts");
/* harmony import */ var _server_acl_vo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./server-acl-vo */ "./src/app/core/server-vo/server-acl-vo.ts");
/* harmony import */ var _server_cabinet_vo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./server-cabinet-vo */ "./src/app/core/server-vo/server-cabinet-vo.ts");
/* harmony import */ var _server_document_vo__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./server-document-vo */ "./src/app/core/server-vo/server-document-vo.ts");
/* harmony import */ var _server_favorite_vo__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./server-favorite-vo */ "./src/app/core/server-vo/server-favorite-vo.ts");
/* harmony import */ var _server_folder_type_vo__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./server-folder-type-vo */ "./src/app/core/server-vo/server-folder-type-vo.ts");
/* harmony import */ var _server_shortcut_model_vo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./server-shortcut-model-vo */ "./src/app/core/server-vo/server-shortcut-model-vo.ts");
/* harmony import */ var _server_trash_model_vo__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./server-trash-model-vo */ "./src/app/core/server-vo/server-trash-model-vo.ts");















/**
 * Sys0上で使用するオブジェクト（文書、ショートカット、フォルダ、お気に入り、ごみ箱、キャビネットなど）のベースモデル。
 */
var ServerObjectBaseVo = /** @class */ (function () {
    function ServerObjectBaseVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.type = null;
        this.icon = null;
        this.children = null;
        this.parentId = null;
    }
    ServerObjectBaseVo.convert = function (target) {
        var childs = [
            { cast: _vo_acl_vo__WEBPACK_IMPORTED_MODULE_1__["isAclVO"], serverVo: _server_acl_vo__WEBPACK_IMPORTED_MODULE_8__["ServerAclVo"] },
            { cast: _vo_cabinet_vo__WEBPACK_IMPORTED_MODULE_2__["isCabinetVO"], serverVo: _server_cabinet_vo__WEBPACK_IMPORTED_MODULE_9__["ServerCabinetVo"] },
            { cast: _vo_document_vo__WEBPACK_IMPORTED_MODULE_3__["isDocumentVO"], serverVo: _server_document_vo__WEBPACK_IMPORTED_MODULE_10__["ServerDocumentVo"] },
            { cast: _vo_favorite_vo__WEBPACK_IMPORTED_MODULE_4__["isFavoriteVO"], serverVo: _server_favorite_vo__WEBPACK_IMPORTED_MODULE_11__["ServerFavoriteVo"] },
            { cast: _vo_folder_vo__WEBPACK_IMPORTED_MODULE_5__["isFolderVO"], serverVo: _server_folder_type_vo__WEBPACK_IMPORTED_MODULE_12__["ServerFolderTypeVo"] },
            { cast: _vo_shortcut_vo__WEBPACK_IMPORTED_MODULE_6__["isShortcutVO"], serverVo: _server_shortcut_model_vo__WEBPACK_IMPORTED_MODULE_13__["ServerShortcutModelVo"] },
            { cast: _vo_trash_vo__WEBPACK_IMPORTED_MODULE_7__["isTrashVO"], serverVo: _server_trash_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerTrashModelVo"] }
        ];
        var defaultProperty = null;
        for (var _i = 0, childs_1 = childs; _i < childs_1.length; _i++) {
            var child = childs_1[_i];
            if (child.cast(target)) {
                if (child.serverVo.convert) {
                    return child.serverVo.convert(target);
                }
                else {
                    defaultProperty = child.serverVo;
                    break;
                }
            }
        }
        if (defaultProperty == null) {
            defaultProperty = new ServerObjectBaseVo();
        }
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerObjectBaseVo;
}());

var CastPair = /** @class */ (function () {
    function CastPair() {
    }
    return CastPair;
}());


/***/ }),

/***/ "./src/app/core/server-vo/server-property-detail-vo.ts":
/*!*************************************************************!*\
  !*** ./src/app/core/server-vo/server-property-detail-vo.ts ***!
  \*************************************************************/
/*! exports provided: ServerPropertyDetailVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerPropertyDetailVo", function() { return ServerPropertyDetailVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * 属性詳細データモデル
 */
var ServerPropertyDetailVo = /** @class */ (function () {
    function ServerPropertyDetailVo() {
        this.displayName = null;
        this.editableEntry = null;
        this.editableUpdate = null;
        this.initialValue = null;
        this.maxSize = null;
        this.name = null;
        this.notNull = null;
        this.overWordBook = null;
        this.propDispIdx = null;
        this.searchDispIdx = null;
        this.type = null;
        this.wordBookName = null;
        this.resultDispIdx = null;
    }
    ServerPropertyDetailVo.convert = function (target) {
        var defaultProperty = new ServerPropertyDetailVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerPropertyDetailVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-search-condition-item-model-vo.ts":
/*!*************************************************************************!*\
  !*** ./src/app/core/server-vo/server-search-condition-item-model-vo.ts ***!
  \*************************************************************************/
/*! exports provided: ServerSearchConditionItemModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerSearchConditionItemModelVo", function() { return ServerSearchConditionItemModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * 詳細検索の検索項目データモデル
 */
var ServerSearchConditionItemModelVo = /** @class */ (function () {
    function ServerSearchConditionItemModelVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.values = null;
        this.keyword = null;
        this.intValueFrom = null;
        this.intValueTo = null;
        this.dateValueFrom = null;
        this.dateValueTo = null;
        this.dateConditionType = null;
        this.dateConditionPattern = null;
        this.matchConditionType = null;
        this.sizeConditionType = null;
        this.sizeConditionPattern = null;
        this.type = null;
        this.matchPattern = null;
    }
    ServerSearchConditionItemModelVo.convert = function (target) {
        var defaultProperty = new ServerSearchConditionItemModelVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerSearchConditionItemModelVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-search-condition-model-vo.ts":
/*!********************************************************************!*\
  !*** ./src/app/core/server-vo/server-search-condition-model-vo.ts ***!
  \********************************************************************/
/*! exports provided: ServerSearchConditionModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerSearchConditionModelVo", function() { return ServerSearchConditionModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/http/vo-converter */ "./src/app/core/services/http/vo-converter.ts");
/* harmony import */ var _vo_cabinet_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vo/cabinet-vo */ "./src/app/core/vo/cabinet-vo.ts");
/* harmony import */ var _vo_folder_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../vo/folder-vo */ "./src/app/core/vo/folder-vo.ts");
/* harmony import */ var _vo_search_condition_item_vo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../vo/search-condition-item-vo */ "./src/app/core/vo/search-condition-item-vo.ts");
/* harmony import */ var _server_cabinet_vo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./server-cabinet-vo */ "./src/app/core/server-vo/server-cabinet-vo.ts");
/* harmony import */ var _server_folder_type_vo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./server-folder-type-vo */ "./src/app/core/server-vo/server-folder-type-vo.ts");
/* harmony import */ var _server_search_condition_item_model_vo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./server-search-condition-item-model-vo */ "./src/app/core/server-vo/server-search-condition-item-model-vo.ts");








/**
 * 検索条件データモデル
 */
var ServerSearchConditionModelVo = /** @class */ (function () {
    function ServerSearchConditionModelVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.digest = null;
        this.type = null;
        this.range = null;
        this.sort = null;
        this.docProps = null;
        this.keywords = null;
        this.orKeywords = null;
        this.notKeywords = null;
        this.searchDocument = null;
        this.searchFolder = null;
        this.fts = null;
        this.searchSubFolder = null;
        this.documentTypeId = null;
        this.documentTypeName = null;
        this.boolOperator = null;
        this.items = null;
        this.keyword = null;
        this.orKeyword = null;
        this.notKeyword = null;
        this.sortKey = null;
        this.sortOrder = null;
        this.isExpanded = null;
    }
    ServerSearchConditionModelVo.convert = function (target) {
        var castPair = [
            { cast: _vo_cabinet_vo__WEBPACK_IMPORTED_MODULE_2__["isCabinetVO"], serverVo: _server_cabinet_vo__WEBPACK_IMPORTED_MODULE_5__["ServerCabinetVo"] },
            { cast: _vo_folder_vo__WEBPACK_IMPORTED_MODULE_3__["isFolderVO"], serverVo: _server_folder_type_vo__WEBPACK_IMPORTED_MODULE_6__["ServerFolderTypeVo"] },
            { cast: _vo_search_condition_item_vo__WEBPACK_IMPORTED_MODULE_4__["isSearchConditionItemVO"], serverVo: _server_search_condition_item_model_vo__WEBPACK_IMPORTED_MODULE_7__["ServerSearchConditionItemModelVo"] }
        ];
        var defaultProperty = new ServerSearchConditionModelVo();
        var pick = _services_http_vo_converter__WEBPACK_IMPORTED_MODULE_1__["VoConverter"].convertVoProperties(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)), castPair, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty));
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](pick, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerSearchConditionModelVo;
}());

var CastPair = /** @class */ (function () {
    function CastPair() {
    }
    return CastPair;
}());


/***/ }),

/***/ "./src/app/core/server-vo/server-section-model-vo.ts":
/*!***********************************************************!*\
  !*** ./src/app/core/server-vo/server-section-model-vo.ts ***!
  \***********************************************************/
/*! exports provided: ServerSectionModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerSectionModelVo", function() { return ServerSectionModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * セクションデータモデル
 */
var ServerSectionModelVo = /** @class */ (function () {
    function ServerSectionModelVo() {
        this.cabId = null;
        this.createDate = null;
        this.dataFilePath = null;
        this.dataSize = null;
        this.enableFullText = null;
        this.enablePDF = null;
        this.enableThumbnail = null;
        this.fullTextFilePath = null;
        this.icon = null;
        this.id = null;
        this.name = null;
        this.pdfFilePath = null;
        this.sectionNo = null;
        this.thumbnailData = null;
        this.thumbnailFilePath = null;
    }
    ServerSectionModelVo.convert = function (target) {
        var defaultProperty = new ServerSectionModelVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerSectionModelVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-shortcut-model-vo.ts":
/*!************************************************************!*\
  !*** ./src/app/core/server-vo/server-shortcut-model-vo.ts ***!
  \************************************************************/
/*! exports provided: ServerShortcutModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerShortcutModelVo", function() { return ServerShortcutModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * ショートカットデータモデル
 */
var ServerShortcutModelVo = /** @class */ (function () {
    function ServerShortcutModelVo() {
        this.cabId = null;
        this.children = null;
        this.createDate = null;
        this.icon = null;
        this.id = null;
        this.linkId = null;
        this.linkName = null;
        this.linkPathNames = null;
        this.name = null;
        this.parentId = null;
        this.pathIds = null;
        this.pathNames = null;
        this.type = null;
    }
    ServerShortcutModelVo.convert = function (target) {
        var defaultProperty = new ServerShortcutModelVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerShortcutModelVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-sys0-base-model-vo.ts":
/*!*************************************************************!*\
  !*** ./src/app/core/server-vo/server-sys0-base-model-vo.ts ***!
  \*************************************************************/
/*! exports provided: ServerSys0BaseModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerSys0BaseModelVo", function() { return ServerSys0BaseModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _vo_config_file_vo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vo/config-file-vo */ "./src/app/core/vo/config-file-vo.ts");
/* harmony import */ var _vo_domain_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vo/domain-vo */ "./src/app/core/vo/domain-vo.ts");
/* harmony import */ var _vo_entry_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../vo/entry-vo */ "./src/app/core/vo/entry-vo.ts");
/* harmony import */ var _vo_object_base_vo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../vo/object-base-vo */ "./src/app/core/vo/object-base-vo.ts");
/* harmony import */ var _vo_search_condition_item_vo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../vo/search-condition-item-vo */ "./src/app/core/vo/search-condition-item-vo.ts");
/* harmony import */ var _vo_search_condition_vo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../vo/search-condition-vo */ "./src/app/core/vo/search-condition-vo.ts");
/* harmony import */ var _vo_section_vo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../vo/section-vo */ "./src/app/core/vo/section-vo.ts");
/* harmony import */ var _vo_version_vo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../vo/version-vo */ "./src/app/core/vo/version-vo.ts");
/* harmony import */ var _server_config_file_vo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./server-config-file-vo */ "./src/app/core/server-vo/server-config-file-vo.ts");
/* harmony import */ var _server_domain_model_vo__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./server-domain-model-vo */ "./src/app/core/server-vo/server-domain-model-vo.ts");
/* harmony import */ var _server_entry_vo__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./server-entry-vo */ "./src/app/core/server-vo/server-entry-vo.ts");
/* harmony import */ var _server_object_base_vo__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./server-object-base-vo */ "./src/app/core/server-vo/server-object-base-vo.ts");
/* harmony import */ var _server_search_condition_item_model_vo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./server-search-condition-item-model-vo */ "./src/app/core/server-vo/server-search-condition-item-model-vo.ts");
/* harmony import */ var _server_search_condition_model_vo__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./server-search-condition-model-vo */ "./src/app/core/server-vo/server-search-condition-model-vo.ts");
/* harmony import */ var _server_section_model_vo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./server-section-model-vo */ "./src/app/core/server-vo/server-section-model-vo.ts");
/* harmony import */ var _server_version_model_vo__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./server-version-model-vo */ "./src/app/core/server-vo/server-version-model-vo.ts");

















/**
 * ベースデータモデル
 */
var ServerSys0BaseModelVo = /** @class */ (function () {
    function ServerSys0BaseModelVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
    }
    ServerSys0BaseModelVo.convert = function (target) {
        var childs = [
            { cast: _vo_config_file_vo__WEBPACK_IMPORTED_MODULE_1__["isConfigFileVO"], serverVo: _server_config_file_vo__WEBPACK_IMPORTED_MODULE_9__["ServerConfigFileVo"] },
            { cast: _vo_domain_vo__WEBPACK_IMPORTED_MODULE_2__["isDomainVO"], serverVo: _server_domain_model_vo__WEBPACK_IMPORTED_MODULE_10__["ServerDomainModelVo"] },
            { cast: _vo_entry_vo__WEBPACK_IMPORTED_MODULE_3__["isEntryVO"], serverVo: _server_entry_vo__WEBPACK_IMPORTED_MODULE_11__["ServerEntryVo"] },
            { cast: _vo_object_base_vo__WEBPACK_IMPORTED_MODULE_4__["isObjectBaseVO"], serverVo: _server_object_base_vo__WEBPACK_IMPORTED_MODULE_12__["ServerObjectBaseVo"] },
            { cast: _vo_search_condition_item_vo__WEBPACK_IMPORTED_MODULE_5__["isSearchConditionItemVO"], serverVo: _server_search_condition_item_model_vo__WEBPACK_IMPORTED_MODULE_13__["ServerSearchConditionItemModelVo"] },
            { cast: _vo_search_condition_vo__WEBPACK_IMPORTED_MODULE_6__["isSearchConditionVO"], serverVo: _server_search_condition_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerSearchConditionModelVo"] },
            { cast: _vo_section_vo__WEBPACK_IMPORTED_MODULE_7__["isSectionVO"], serverVo: _server_section_model_vo__WEBPACK_IMPORTED_MODULE_15__["ServerSectionModelVo"] },
            { cast: _vo_version_vo__WEBPACK_IMPORTED_MODULE_8__["isVersionVO"], serverVo: _server_version_model_vo__WEBPACK_IMPORTED_MODULE_16__["ServerVersionModelVo"] }
            // { cast: isWorkflowVO, serverVo: ServerWorkflowVO }
        ];
        var defaultProperty = null;
        for (var _i = 0, childs_1 = childs; _i < childs_1.length; _i++) {
            var child = childs_1[_i];
            if (child.cast(target)) {
                if (child.serverVo.convert) {
                    return child.serverVo.convert(target);
                }
                else {
                    defaultProperty = child.serverVo;
                    break;
                }
            }
        }
        if (defaultProperty == null) {
            defaultProperty = new ServerSys0BaseModelVo();
        }
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerSys0BaseModelVo;
}());

var CastPair = /** @class */ (function () {
    function CastPair() {
    }
    return CastPair;
}());


/***/ }),

/***/ "./src/app/core/server-vo/server-tag-model-vo.ts":
/*!*******************************************************!*\
  !*** ./src/app/core/server-vo/server-tag-model-vo.ts ***!
  \*******************************************************/
/*! exports provided: ServerTagModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerTagModelVo", function() { return ServerTagModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * 付箋データモデル
 */
var ServerTagModelVo = /** @class */ (function () {
    function ServerTagModelVo() {
        this.sectionNo = null;
        this.tagColor = null;
        this.tagText = null;
    }
    ServerTagModelVo.convert = function (target) {
        var defaultProperty = new ServerTagModelVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerTagModelVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-trash-model-vo.ts":
/*!*********************************************************!*\
  !*** ./src/app/core/server-vo/server-trash-model-vo.ts ***!
  \*********************************************************/
/*! exports provided: ServerTrashModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerTrashModelVo", function() { return ServerTrashModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * ゴミ箱データモデル
 */
var ServerTrashModelVo = /** @class */ (function () {
    function ServerTrashModelVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.type = null;
        this.icon = null;
        this.children = null;
        this.parentId = null;
    }
    ServerTrashModelVo.convert = function (target) {
        var defaultProperty = new ServerTrashModelVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerTrashModelVo;
}());



/***/ }),

/***/ "./src/app/core/server-vo/server-version-model-vo.ts":
/*!***********************************************************!*\
  !*** ./src/app/core/server-vo/server-version-model-vo.ts ***!
  \***********************************************************/
/*! exports provided: ServerVersionModelVo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerVersionModelVo", function() { return ServerVersionModelVo; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * 版のデータモデル
 */
var ServerVersionModelVo = /** @class */ (function () {
    function ServerVersionModelVo() {
        this.id = null;
        this.name = null;
        this.cabId = null;
        this.createDate = null;
        this.docId = null;
        this.checkinDate = null;
        this.checkinUser = null;
        this.comment = null;
        this.sections = null;
    }
    ServerVersionModelVo.convert = function (target) {
        var defaultProperty = new ServerVersionModelVo();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerVersionModelVo;
}());



/***/ }),

/***/ "./src/app/core/server-xml/server-tool-button-model.ts":
/*!*************************************************************!*\
  !*** ./src/app/core/server-xml/server-tool-button-model.ts ***!
  \*************************************************************/
/*! exports provided: ServerToolButtonModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerToolButtonModel", function() { return ServerToolButtonModel; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * ツールボタンデータモデル
 *
 * XML由来
 */
var ServerToolButtonModel = /** @class */ (function () {
    function ServerToolButtonModel() {
        this.name = null;
        this.styleName = null;
        this.toolTipResource = null;
    }
    ServerToolButtonModel.convert = function (target) {
        var defaultProperty = new ServerToolButtonModel();
        return lodash__WEBPACK_IMPORTED_MODULE_0__["assign"](defaultProperty, lodash__WEBPACK_IMPORTED_MODULE_0__["pick"](target, lodash__WEBPACK_IMPORTED_MODULE_0__["keys"](defaultProperty)));
    };
    return ServerToolButtonModel;
}());



/***/ }),

/***/ "./src/app/core/services/auth-guard.service.ts":
/*!*****************************************************!*\
  !*** ./src/app/core/services/auth-guard.service.ts ***!
  \*****************************************************/
/*! exports provided: AuthGuard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthGuard", function() { return AuthGuard; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var url_search_params_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url-search-params-polyfill */ "./node_modules/url-search-params-polyfill/index.js");
/* harmony import */ var url_search_params_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(url_search_params_polyfill__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _storage_key__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../storage-key */ "./src/app/core/storage-key.ts");
/* harmony import */ var _http_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./http.service */ "./src/app/core/services/http.service.ts");
/* harmony import */ var _logger_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./logger.service */ "./src/app/core/services/logger.service.ts");
/* harmony import */ var _login_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./login.service */ "./src/app/core/services/login.service.ts");











/**
 * このサービスは開発モード用です
 *
 * 認証のブロックされているかどうかをによってページをナビゲートします
 *
 * 製品版では呼ばれることはないが、スクリプトとして含まれてInjectionシステムに登録されてしまうので
 * publicメソッドの先頭でブロックします
 */
var AuthGuard = /** @class */ (function () {
    function AuthGuard(router, loginService, logger, httpService, location) {
        this.router = router;
        this.loginService = loginService;
        this.logger = logger;
        this.httpService = httpService;
        this.location = location;
    }
    /**
     * 遅延ロード前に呼ばれる
     *
     * @param route
     */
    AuthGuard.prototype.canLoad = function (route) {
        var url = this.location.path();
        var urlSplit = url.split('?');
        // /rsn/xxx?aaa=111&bbb=222 から  /xxx　部分だけ抜き出し
        var urlParam = urlSplit[0];
        // /rsn/xxx?aaa=111&bbb=222 から  getパラメータ部分だけ抜き出し
        var queryParams = new URLSearchParams(urlSplit.length === 1 ? '' : urlSplit[1]);
        var ret = this.checkLogin(urlParam, queryParams);
        return ret;
    };
    /**
     * 未認証ならログインページに遷移する
     *
     * @param urlParam
     */
    AuthGuard.prototype.checkLogin = function (urlParam, queryParams) {
        var _this = this;
        var accessToken = localStorage.getItem(_storage_key__WEBPACK_IMPORTED_MODULE_7__["StorageKey"].token);
        if (accessToken) {
            // コネクト状態の確認を行い、トークンのチェックを行う
            return this.httpService.isConnectServerInner().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(function (result) {
                // トークン期限切れもこちらの判定に入ってしまう
                return true;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["catchError"])(function (error) {
                // サーバコネクトに失敗した場合はトークンが不正とする
                _this.redirectToLoginPage(urlParam, queryParams);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])(false);
            }));
        }
        else {
            // トークンが取得できなかったら未ログインとする
            this.redirectToLoginPage(urlParam, queryParams);
            return false;
        }
    };
    /**
     * ログインページに遷移し、ログイン後のリダイレクトページ設定を行う
     * @param urlParam
     * @param queryParams
     */
    AuthGuard.prototype.redirectToLoginPage = function (urlParam, queryParams) {
        // リダイレクト用にクエリパラメタを保存
        var redirectQueryParams = { queryParams: {} };
        queryParams.forEach(function (value, key) {
            redirectQueryParams.queryParams[key] = value;
        });
        this.loginService.queryParams = redirectQueryParams;
        this.loginService.setRedirectUrl(urlParam); // 認証成功したらここにリダイレクト
        this.router.navigate(['/login']);
    };
    AuthGuard = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
            _login_service__WEBPACK_IMPORTED_MODULE_10__["LoginService"],
            _logger_service__WEBPACK_IMPORTED_MODULE_9__["Logger"],
            _http_service__WEBPACK_IMPORTED_MODULE_8__["HttpService"],
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"]])
    ], AuthGuard);
    return AuthGuard;
}());



/***/ }),

/***/ "./src/app/core/services/base-model-locator.service.ts":
/*!*************************************************************!*\
  !*** ./src/app/core/services/base-model-locator.service.ts ***!
  \*************************************************************/
/*! exports provided: BaseModelLocatorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseModelLocatorService", function() { return BaseModelLocatorService; });
/* harmony import */ var _utils_injector_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/injector-provider */ "./src/app/core/utils/injector-provider.ts");

/**
 * BaseModelLocatorを保持するサービスの基底クラス
 */
var BaseModelLocatorService = /** @class */ (function () {
    function BaseModelLocatorService() {
    }
    /**
     * 唯一つのインスタンスを取得する。
     */
    BaseModelLocatorService.getInstance = function () {
        return _utils_injector_provider__WEBPACK_IMPORTED_MODULE_0__["InjectorProvider"].get().get(BaseModelLocatorService).locator;
    };
    return BaseModelLocatorService;
}());



/***/ }),

/***/ "./src/app/core/services/command-provider.ts":
/*!***************************************************!*\
  !*** ./src/app/core/services/command-provider.ts ***!
  \***************************************************/
/*! exports provided: COMMAND_PROVIDER */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMAND_PROVIDER", function() { return COMMAND_PROVIDER; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");

/**
 * CommandProviderを取得するためのトークン
 */
var COMMAND_PROVIDER = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('CommandProvider');


/***/ }),

/***/ "./src/app/core/services/controller.service.ts":
/*!*****************************************************!*\
  !*** ./src/app/core/services/controller.service.ts ***!
  \*****************************************************/
/*! exports provided: ControllerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ControllerService", function() { return ControllerService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngrx/effects */ "./node_modules/@ngrx/effects/fesm5/effects.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _application_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../application-error */ "./src/app/core/application-error.ts");
/* harmony import */ var _commands_default_command__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../commands/default-command */ "./src/app/core/commands/default-command.ts");
/* harmony import */ var _store_action_interfaces__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../store/action-interfaces */ "./src/app/core/store/action-interfaces.ts");
/* harmony import */ var _utils_injector_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/injector-provider */ "./src/app/core/utils/injector-provider.ts");
/* harmony import */ var _logger_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./logger.service */ "./src/app/core/services/logger.service.ts");










/**
 * ActionをもとにCommandの生成・実行を行うAngular Service
 */
var ControllerService = /** @class */ (function () {
    /**
     * コンストラクタ
     */
    function ControllerService() {
        /**
         * 複数の「Action（type）からCommandのマッピング」を、何らかのオブジェクト（典型的にはView）に紐づけて保持するMap
         */
        this.commandMaps = new Map();
        /**
         * メニューキーとアクションを紐付けるマップ定義
         */
        this.menuToActionMap = new Map();
    }
    ControllerService_1 = ControllerService;
    /**
     * デフォルトのCommandインスタンスを取得します
     */
    ControllerService.getDefaultCommand = function () {
        return new _commands_default_command__WEBPACK_IMPORTED_MODULE_6__["DefaultCommand"]();
    };
    /**
     * CommandMapを追加する
     * @param defOwner CommandMap定義を所有するオブジェクトへの参照。典型的にはViewを指す。
     */
    ControllerService.prototype.addCommandMap = function (defOwner) {
        // もし既存のCommandMapオブジェクトがあれば削除する
        this.deleteCommandMap(defOwner);
        // CommandMapオブジェクトを生成する
        var commandMap = new Map(); // new CommandMap() と同じ意味
        // CommandMap定義を取得
        var def = this.viewCommands.getCommandMap(defOwner);
        // ViewにCommandMap定義をセットする
        defOwner.commandMapDef = def;
        // CommandMap定義に沿ってCommandを生成する
        def.forEach(function (item) {
            var command = new item.command();
            command.parent = defOwner;
            command.commandId = item.action;
            commandMap.set(item.action, command);
        });
        // CommandsMapオブジェクトをオブジェクト（view）に紐づけて保持する
        this.commandMaps.set(defOwner, commandMap);
    };
    /**
     * CommandMapを削除する
     * @param defOwner CommandMap定義を所有するオブジェクトへの参照。典型的にはViewを指す。
     */
    ControllerService.prototype.deleteCommandMap = function (defOwner) {
        // 指定された定義所有者に紐づくCommandMapオブジェクトを探す
        var commandMap = this.commandMaps.get(defOwner);
        if (commandMap == null) {
            return;
        }
        // 個々のCommandの破棄処理を行う
        commandMap.forEach(function (command) { return command.dispose(); });
        this.commandMaps.delete(defOwner);
    };
    /**
     * アクションを元にコマンドを呼び出してその結果でアクションを返す。
     * @param actions$
     * @param type 処理する対象のActionのtype
     * @param SuccessClass 成功時に返すAction
     * @param ErrorClass エラー時に返すAction
     * @returns 成功時に返すActionを格納するObservable
     */
    ControllerService.prototype.doSideEffect = function (actions$, type, SuccessClass, ErrorClass) {
        var _this = this;
        return actions$.pipe(Object(_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__["ofType"])(type), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["switchMap"])(function (action) {
            return _this.getCommandInstance(action)
                .execute(action['payload'])
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (result) { return SuccessClass && new SuccessClass(result); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (error) { return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(ErrorClass && new ErrorClass(error)); }));
        }));
    };
    /**
     * アクションを元にコマンドのreducer関数を呼び出してその結果を返す。
     * @param state 現在のState
     * @param action 実行するAction
     * @returns 新しいState
     */
    ControllerService.prototype.doReducer = function (state, action) {
        return this.getCommandInstance(action).doReducer(state, action);
    };
    /**
     * Commandのインスタンスを検索して返す。
     * @param view CommandMap定義を保持するViewへの参照
     * @param type ActionType
     * @returns Command。見つからないときはDefaultCommandを返す。
     */
    ControllerService.prototype.getCommand = function (view, type) {
        var commandMap = this.commandMaps.get(view);
        var instance = commandMap && commandMap.get(type);
        if (instance == null) {
            var logger = _utils_injector_provider__WEBPACK_IMPORTED_MODULE_8__["InjectorProvider"].get().get(_logger_service__WEBPACK_IMPORTED_MODULE_9__["Logger"]);
            var message = "ControllerService#getCommand: command not found(" + type + ", " + view.constructor.name + ")";
            logger.error(message);
            return ControllerService_1.getDefaultCommand();
        }
        return instance;
    };
    /**
     * Commandから呼び出されることを想定
     * （ComponentはActionをdispatchしてください）
     * Commandのインスタンスを取得して実行する
     * @param view CommandMapを所持するViewへの参照
     * @param type Actionのtype
     * @param event Commandに与えるevent
     */
    ControllerService.prototype.execCommand = function (view, type, event) {
        var command = this.getCommand(view, type);
        if (command == null) {
            throw new _application_error__WEBPACK_IMPORTED_MODULE_5__["ApplicationError"]('Failed to get command instance: ' + type);
        }
        command.event = event;
        command.execCommand();
    };
    /**
     * メニューキーとアクションを紐付けるMap定義を更新する
     * @param menuToActionMap メニューキーとアクションを紐付けるMap定義
     */
    ControllerService.prototype.setMenuToActionMap = function (menuToActionMap) {
        this.menuToActionMap = menuToActionMap;
    };
    /**
     * メニューキーからActionのtypeを解決する
     * @param menu メニューキー
     * @return Actionのtype
     */
    ControllerService.prototype.getMenuAction = function (menu) {
        return this.menuToActionMap.get(menu);
    };
    /**
     * メニューキーからActionのtypeを解決し、Commandのインスタンスを検索して返す。
     * @param view CommandMap定義を保持するViewへの参照
     * @param menu メニューキー
     * @returns Command。見つからないときはnullを返す。
     */
    ControllerService.prototype.getMenuCommand = function (view, menu) {
        var type = this.getMenuAction(menu);
        if (type == null) {
            var logger = _utils_injector_provider__WEBPACK_IMPORTED_MODULE_8__["InjectorProvider"].get().get(_logger_service__WEBPACK_IMPORTED_MODULE_9__["Logger"]);
            var message = "ControllerService#getMenuCommand: action not found(" + menu + ")";
            logger.error(message);
            return null;
        }
        if (!this.hasCommand(view, type)) {
            return null;
        }
        return this.getCommand(view, type);
    };
    /**
     * Commandのインスタンスを検索して返す。
     * @param action Action
     * @returns Command。見つからないときはDefaultCommandを返す。
     */
    ControllerService.prototype.getCommandInstance = function (action) {
        if (!Object(_store_action_interfaces__WEBPACK_IMPORTED_MODULE_7__["actionHasParentObject"])(action)) {
            var logger = _utils_injector_provider__WEBPACK_IMPORTED_MODULE_8__["InjectorProvider"].get().get(_logger_service__WEBPACK_IMPORTED_MODULE_9__["Logger"]);
            var message = "ControllerService#getCommandInstance: parent missing for action(" + action.type + ")";
            logger.error(message);
            return ControllerService_1.getDefaultCommand();
        }
        var parent = action.parentObject;
        return this.getCommand(parent, action.type);
    };
    /**
     * Commandのインスタンスを検索して返す。
     * @param view CommandMap定義を保持するViewへの参照
     * @param type ActionType
     */
    ControllerService.prototype.hasCommand = function (view, type) {
        var commandMap = this.commandMaps.get(view);
        var instance = commandMap && commandMap.get(type);
        return instance != null;
    };
    var ControllerService_1;
    ControllerService = ControllerService_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ControllerService);
    return ControllerService;
}());



/***/ }),

/***/ "./src/app/core/services/http.service.ts":
/*!***********************************************!*\
  !*** ./src/app/core/services/http.service.ts ***!
  \***********************************************/
/*! exports provided: HttpService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpService", function() { return HttpService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _models_login_info__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/login-info */ "./src/app/core/models/login-info.ts");
/* harmony import */ var _models_server_info__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/server-info */ "./src/app/core/models/server-info.ts");
/* harmony import */ var _server_vo_server_acl_vo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../server-vo/server-acl-vo */ "./src/app/core/server-vo/server-acl-vo.ts");
/* harmony import */ var _server_vo_server_cabinet_vo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../server-vo/server-cabinet-vo */ "./src/app/core/server-vo/server-cabinet-vo.ts");
/* harmony import */ var _server_vo_server_config_file_vo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../server-vo/server-config-file-vo */ "./src/app/core/server-vo/server-config-file-vo.ts");
/* harmony import */ var _server_vo_server_create_sub_data_vo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../server-vo/server-create-sub-data-vo */ "./src/app/core/server-vo/server-create-sub-data-vo.ts");
/* harmony import */ var _server_vo_server_document_type_vo__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../server-vo/server-document-type-vo */ "./src/app/core/server-vo/server-document-type-vo.ts");
/* harmony import */ var _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../server-vo/server-document-vo */ "./src/app/core/server-vo/server-document-vo.ts");
/* harmony import */ var _server_vo_server_domain_model_vo__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../server-vo/server-domain-model-vo */ "./src/app/core/server-vo/server-domain-model-vo.ts");
/* harmony import */ var _server_vo_server_entry_vo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../server-vo/server-entry-vo */ "./src/app/core/server-vo/server-entry-vo.ts");
/* harmony import */ var _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../server-vo/server-favorite-category-model-vo */ "./src/app/core/server-vo/server-favorite-category-model-vo.ts");
/* harmony import */ var _server_vo_server_favorite_vo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../server-vo/server-favorite-vo */ "./src/app/core/server-vo/server-favorite-vo.ts");
/* harmony import */ var _server_vo_server_folder_type_vo__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../server-vo/server-folder-type-vo */ "./src/app/core/server-vo/server-folder-type-vo.ts");
/* harmony import */ var _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../server-vo/server-object-base-vo */ "./src/app/core/server-vo/server-object-base-vo.ts");
/* harmony import */ var _server_vo_server_search_condition_model_vo__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../server-vo/server-search-condition-model-vo */ "./src/app/core/server-vo/server-search-condition-model-vo.ts");
/* harmony import */ var _server_vo_server_section_model_vo__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../server-vo/server-section-model-vo */ "./src/app/core/server-vo/server-section-model-vo.ts");
/* harmony import */ var _server_vo_server_shortcut_model_vo__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../server-vo/server-shortcut-model-vo */ "./src/app/core/server-vo/server-shortcut-model-vo.ts");
/* harmony import */ var _server_vo_server_sys0_base_model_vo__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../server-vo/server-sys0-base-model-vo */ "./src/app/core/server-vo/server-sys0-base-model-vo.ts");
/* harmony import */ var _server_vo_server_tag_model_vo__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../server-vo/server-tag-model-vo */ "./src/app/core/server-vo/server-tag-model-vo.ts");
/* harmony import */ var _server_vo_server_trash_model_vo__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../server-vo/server-trash-model-vo */ "./src/app/core/server-vo/server-trash-model-vo.ts");
/* harmony import */ var _server_vo_server_version_model_vo__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../server-vo/server-version-model-vo */ "./src/app/core/server-vo/server-version-model-vo.ts");
/* harmony import */ var _server_xml_server_tool_button_model__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../server-xml/server-tool-button-model */ "./src/app/core/server-xml/server-tool-button-model.ts");
/* harmony import */ var _storage_key__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../storage-key */ "./src/app/core/storage-key.ts");
/* harmony import */ var _vo_folder_vo__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../vo/folder-vo */ "./src/app/core/vo/folder-vo.ts");
/* harmony import */ var _vo_search_condition_vo__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../vo/search-condition-vo */ "./src/app/core/vo/search-condition-vo.ts");
/* harmony import */ var _vo_shortcut_vo__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../vo/shortcut-vo */ "./src/app/core/vo/shortcut-vo.ts");
/* harmony import */ var _http_date_converter__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./http/date-converter */ "./src/app/core/services/http/date-converter.ts");
/* harmony import */ var _http_map_util__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./http/map-util */ "./src/app/core/services/http/map-util.ts");
/* harmony import */ var _url_config__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./url.config */ "./src/app/core/services/url.config.ts");

































var encode = encodeURIComponent;
/**
 * REST API通信
 *
 * Observableを返すものでAPIから戻り値がないものは Observable<any>
 */
var HttpService = /** @class */ (function () {
    function HttpService(http) {
        this.http = http;
    }
    /**
     * 認証
     *
     * @param accountName ログイン名
     * @param password パスワード
     * @param domainName Windows認証の場合ドメイン名、ベーシック認証の場合空文字列
     * @returns 認証結果は、以降のREST API呼ぶだめのアクセストークンを含む
     */
    HttpService.prototype.authenticate = function (accountName, password, domainName) {
        var url = this.makeUrl(_url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].authenticate);
        var body = new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpParams"]()
            .set('accountName', accountName)
            .set('password', password)
            .set('domainName', domainName);
        var options = this.getAuthenticationHttpOptions();
        return this.http.post(url, body, options);
    };
    /**
     * キャビネットへ接続しているかどうかをチェックする。
     */
    HttpService.prototype.isConnectServerInner = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].isConnectServer;
        return this.post(url);
    };
    /**
     * ログイン情報を取得する。
     * @param successCallback 成功時のコールバック
     * @param errorCallback エラー時のコールバック
     */
    HttpService.prototype.getLoginInfo = function (successCallback, errorCallback) {
        this.getLoginInfoInner().subscribe(function (result) { return successCallback(result); }, function (error) { return errorCallback(error); });
    };
    /**
     * 用語リストを取得する。
     * @param successCallback 成功時のコールバック
     * @param errorCallback エラー時のコールバック
     */
    HttpService.prototype.getWording = function (successCallback, errorCallback) {
        this.getWordingInner().subscribe(function (result) { return successCallback(result); }, function (error) { return errorCallback(error); });
    };
    /**
     * 初期状態のフォルダ構造を取得する。
     * @param profileId プロファイルID. nullの場合はログインユーザーのプロファイルを取得する
     */
    HttpService.prototype.getTopFolder = function (profileId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getTopFolder;
        var body = {
            profileId: profileId
        };
        return this.post(url, body);
    };
    /**
     * 指定されたフォルダ直下のフォルダを取得する
     *
     * @param currentFolder フォルダ(FolderVO)またはキャビネット(CabinetVO)またはごみ箱(TrashVO)
     * @param sortMap
     */
    HttpService.prototype.getSortedFolderList = function (currentFolder, sortMap) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getSortedFolderList;
        var body = {
            currentFolder: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(currentFolder),
            sort: _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].convertToMapEntryArray(sortMap)
        };
        return this.post(url, body);
    };
    /**
     * セッションキープアライブのリクエストを送る
     */
    HttpService.prototype.keepAlive = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].keepAlive;
        return this.post(url);
    };
    /**
     * コネクト
     * UA/UDにて認証を行い、サーバへ接続する。
     * @param viewerId ビューID
     * @param successCallback 成功時のコールバック
     * @param errorCallback エラー時のコールバック
     */
    HttpService.prototype.connectServer = function (viewerId, successCallback, errorCallback) {
        this.connectServerInner(viewerId).subscribe(function (result) { return successCallback(result); }, function (error) { return errorCallback(error); });
    };
    /**
     * サーバー情報を取得する。
     * @param successCallback 成功時のコールバック
     * @param errorCallback エラー時のコールバック
     */
    HttpService.prototype.getServerInfo = function (successCallback, errorCallback) {
        this.getServerInfoInner().subscribe(function (result) { return successCallback(result); }, function (error) { return errorCallback(error); });
    };
    /**
     * クライアント情報を取得する。
     * @param successCallback 成功時のコールバック
     * @param errorCallback エラー時のコールバック
     */
    HttpService.prototype.getClientInfo = function (successCallback, errorCallback) {
        this.getClientInfoInner().subscribe(function (result) { return successCallback(result); }, function (error) { return errorCallback(error); });
    };
    /**
     * クライアントのログレベルを取得する。
     * @param successCallback 成功時のコールバック
     * @param errorCallback エラー時のコールバック
     */
    HttpService.prototype.getClientLogLevel = function (successCallback, errorCallback) {
        this.getClientLogLevelInner().subscribe(function (result) { return successCallback(result); }, function (error) { return errorCallback(error); });
    };
    /**
     * キャビネットへ接続しているかどうかをチェックする。
     * @param successCallback 成功時のコールバック
     * @param errorCallback エラー時のコールバック
     */
    HttpService.prototype.isConnectServer = function (successCallback, errorCallback) {
        this.isConnectServerInner().subscribe(function (result) { return successCallback(result); }, function (error) { return errorCallback(error); });
    };
    /**
     * ツールバーのプロファイルを取得する。
     * 該当するプロファイルが存在しなければシステムのデフォルトプロファイルを返す。
     */
    HttpService.prototype.getProfileToolBar = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getProfileToolBar;
        return this.post(url);
    };
    /**
     * 個人設定のプロファイルを取得する。
     * 該当するプロファイルが存在しなければ、システムのデフォルトプロファイルを返す。
     */
    HttpService.prototype.getProfileSetting = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getProfileSetting;
        return this.post(url);
    };
    /**
     * ドメイン一覧を取得する。
     * @param successCallback 成功時のコールバック
     * @param errorCallback エラー時のコールバック
     */
    HttpService.prototype.getDomainList = function (successCallback, errorCallback) {
        this.getDomainListInner().subscribe(function (result) { return successCallback(result); }, function (error) { return errorCallback(error); });
    };
    /**
     * クライアントのログを出力する。
     * @param logLevel ログレベル（0:fatal 1:error 2:warn 3:info 4:debug）
     * @param message ログに出力するメッセージ
     */
    HttpService.prototype.outClientLog = function (logLevel, message) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].outClientLog;
        var body = {
            logLevel: logLevel,
            message: message
        };
        return this.post(url, body);
    };
    /**
     * 文書を登録する。
     * @param document 登録する文書
     * @param selectedFolderName 登録先フォルダ名（エラーメッセージに使用）
     * @param fileNameList ファイル名リスト
     */
    HttpService.prototype.createDocument = function (document, selectedFolderName, fileNameList) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].createDocument;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(document),
            targetFolderName: selectedFolderName,
            fileNameList: fileNameList
        };
        return this.post(url, body);
    };
    /**
     * 指定されたフォルダのサブフォルダを取得する。
     * サブフォルダが1つもなかった場合は、nullを返す。
     * @param currentFolder サブフォルダを取得するフォルダ
     */
    HttpService.prototype.getFolderList = function (currentFolder) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getFolderList;
        var body = _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(currentFolder);
        return this.post(url, body);
    };
    /**
     * お気に入りを登録する。
     * @param favorite 登録するお気に入り
     * @param target 登録する対象(文書、フォルダ、検索条件)
     * @param destCategory 親のカテゴリ（お気に入り直下の場合は、nullかカテゴリタイプが"root"のカテゴリVO）
     * @param checkMode 名前チェックする/しない
     */
    HttpService.prototype.createFavorite = function (favorite, target, destCategory, checkMode) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].createFavorite;
        var body = {
            favorite: _server_vo_server_favorite_vo__WEBPACK_IMPORTED_MODULE_15__["ServerFavoriteVo"].convert(favorite),
            target: Object(_vo_search_condition_vo__WEBPACK_IMPORTED_MODULE_28__["isSearchConditionVO"])(target) ? _server_vo_server_search_condition_model_vo__WEBPACK_IMPORTED_MODULE_18__["ServerSearchConditionModelVo"].convert(target) : _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target),
            destCategory: _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(destCategory),
            checkMode: checkMode
        };
        return this.post(url, body);
    };
    /**
     * お気に入りのプロパティ(お気に入りの詳細情報)の取得する。
     * @param favorite 登録するお気に入り
     */
    HttpService.prototype.getFavoriteDetail = function (favorite) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getFavoriteDetail;
        var body = _server_vo_server_favorite_vo__WEBPACK_IMPORTED_MODULE_15__["ServerFavoriteVo"].convert(favorite);
        return this.post(url, body);
    };
    /**
     *
     * 検索開始用にリザルトセットIDを取得する。
     */
    HttpService.prototype.requestSearch = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].requestSearch;
        return this.postResponseTypeText(url);
    };
    /**
     * 検索を実行する。
     * 検索処理は1セッションに対して1つしかできない。
     * もし同一セッションにて検索を実行中にsearchが実行された場合は、
     * cancelSearchが自動的に行われ、新しい検索を行う。
     * @param resultSetId requestSearchで取得したID
     * @param  searchCondition 検索条件を指定
     * 　　　　　プロパティ　 Type：簡易検索と詳細条件検索を区別する。必須
     * 　　　　　　　　　　　　DocProps：取得するプロパティ名リスト。必須
     * 　　　　　　　　　　　　　　　　　　getFavoriteTargetより取得したsearchConditionには
     * 　　　　　　　　　　　　　　　　　　DocPropsが保持されていないので、設定しなおすこと。
     * 　　　　　　　　　　　　sort：ソート条件指定。必須
     * 　　　　　　　　　　　　　　　プロパティ名 ASC:false/DESC:true
     */
    HttpService.prototype.startSearch = function (resultSetId, searchCondition) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].startSearch;
        var searchConditionToSend = _server_vo_server_search_condition_model_vo__WEBPACK_IMPORTED_MODULE_18__["ServerSearchConditionModelVo"].convert(searchCondition);
        // sortの形式は次の2種類が混在しているため、(2)が来た場合(1)に変換を行う。
        // (1) sort: [{key: "name", value: "false"}]
        // -- 本来SearchConditionVOで定義されている形式。
        // (2) sort: {name: false}
        // -- サーバーからの/v2/favorite/target/getのレスポンスでsortの形式が{key: value}で返ってくるため混在している形式。
        var sort = searchConditionToSend.sort;
        if (!Array.isArray(sort)) {
            var newSort = [];
            var keys = Object.keys(sort);
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                var keyValue = { key: key, value: sort[key] };
                newSort.push(keyValue);
            }
            searchConditionToSend.sort = newSort;
        }
        var body = {
            resultSetId: resultSetId,
            searchCondition: searchConditionToSend
        };
        return this.post(url, body);
    };
    /**
     * 検索結果全オブジェクトを取得する。
     * searchにて取得したデータの一覧を取得する。
     * 事前にsearchが実行されていること。
     * @param resultSetId requestSearchで取得したID
     * @param nextIndex 開始インデックスを指定、0からスタート。
     *　　　　　　　　　　エントリがない場合は0とする。
     * @param count 取得件数を指定。必須。
     * @param docProps 取得するプロパティ名リスト
     */
    HttpService.prototype.retrieveSearchResult = function (resultSetId, nextIndex, count, docProps) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].retrieveSearchResult;
        var body = {
            resultSetId: resultSetId,
            nextIndex: nextIndex,
            count: count,
            docProps: docProps
        };
        return this.post(url, body).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var result = _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].create(Object, response.searchList);
            _http_date_converter__WEBPACK_IMPORTED_MODULE_30__["DateConverter"].numberToDateForArrayProps(result); // resultのメンバーはすべてObjectBaseVOの配列である
            return result;
        }));
    };
    /**
     * 検索結果一覧の再ソートを行う。
     * @param resultSetId requestSearchで取得したID
     * @param sort ソート条件指定。nullの場合は、ソートしない。
     * 　　　　　　 プロパティ名 ASC:false/DESC:true
     */
    HttpService.prototype.reSortSearchResult = function (resultSetId, sort) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].reSortSearchResult;
        var body = {
            resultSetId: resultSetId,
            sort: _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].convertToMapEntryArray(sort)
        };
        return this.post(url, body);
    };
    /**
     * 検索の中止を行う
     * @param resultSetId requestSearchで取得したID
     */
    HttpService.prototype.cancelSearch = function (resultSetId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].cancelSearch;
        var body = {
            resultSetId: resultSetId
        };
        return this.post(url, body);
    };
    /**
     * 文書タイプリストを取得する。
     * @param cabinet キャビネットを指定
     */
    HttpService.prototype.getDocumentTypeList = function (cabinet) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getDocumentTypeList;
        var body = _server_vo_server_cabinet_vo__WEBPACK_IMPORTED_MODULE_7__["ServerCabinetVo"].convert(cabinet);
        return this.post(url, body);
    };
    /**
     * 文書タイプ詳細リストを取得する。
     * @param cabinet キャビネットを指定
     * @param documentType 文書タイプIDを指定
     */
    HttpService.prototype.getDocumentTypeDetail = function (cabinet, documentType) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getDocumentTypeDetail;
        var body = {
            cabinet: _server_vo_server_cabinet_vo__WEBPACK_IMPORTED_MODULE_7__["ServerCabinetVo"].convert(cabinet),
            documentType: _server_vo_server_document_type_vo__WEBPACK_IMPORTED_MODULE_10__["ServerDocumentTypeVo"].convert(documentType)
        };
        return this.post(url, body);
    };
    /**
     * お気に入りのターゲット(文書、フォルダー、検索条件)を取得する。
     * 指定されたお気に入りにリンクするターゲットオブジェクトを取得。
     * @param favorite お気に入りオブジェクトを指定
     */
    HttpService.prototype.getFavoriteTarget = function (favorite) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getFavoriteTarget;
        var body = _server_vo_server_favorite_vo__WEBPACK_IMPORTED_MODULE_15__["ServerFavoriteVo"].convert(favorite);
        return this.post(url, body);
    };
    /**
     * お気に入りを削除する。
     * @param favoriteObject 削除するお気に入り
     */
    HttpService.prototype.deleteFavoriteObject = function (favoriteObject) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].deleteFavoriteObject;
        var body = favoriteObject;
        return this.post(url, body);
    };
    /**
     * お気に入りプロパティを更新する。
     * @param favorite 更新するお気に入り
     * @param checkMode 名前チェックする/しない
     * @param searchCondition 検索条件
     */
    HttpService.prototype.updateFavorite = function (favorite, checkMode, searchCondition) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].updateFavorite;
        var body = {
            favorite: favorite,
            checkMode: checkMode,
            searchCondition: searchCondition != null ? _server_vo_server_search_condition_model_vo__WEBPACK_IMPORTED_MODULE_18__["ServerSearchConditionModelVo"].convert(searchCondition) : searchCondition
        };
        return this.post(url, body);
    };
    /**
     * フォルダープロパティを参照する。
     * @param folder 参照するフォルダー
     * @param props 取得するプロパティ
     */
    HttpService.prototype.getFolderDetail = function (folder, props) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getFolderDetail;
        var body = {
            folder: folder,
            props: props
        };
        return this.post(url, body);
    };
    /**
     * フォルダーのサイズを取得する。
     * @param folder サイズを取得するフォルダー
     */
    HttpService.prototype.getFolderSize = function (folder) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getFolderSize;
        var body = folder;
        return this.post(url, body);
    };
    /**
     * フォルダーを作成する。
     * @param newFolder 作成するフォルダー
     * @param parentFolder 親フォルダー
     */
    HttpService.prototype.createFolder = function (newFolder, parentFolder) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].createFolder;
        var body = {
            newFolder: newFolder,
            destFolder: parentFolder != null ? _server_vo_server_folder_type_vo__WEBPACK_IMPORTED_MODULE_16__["ServerFolderTypeVo"].convert(parentFolder) : parentFolder
        };
        return this.post(url, body);
    };
    /**
     * 指定されたフォルダのフォルダ、文書、ショートカットの取得を行う。
     * @param resultSetId リザルトセットのID
     * @param nextIndex 開始インデックスを指定、0からスタート。
     *　　　　　　　　エントリがない場合は0とする。
     * @param count 取得件数を指定。必須。
     * @param docProps 取得するプロパティ名リスト
     */
    HttpService.prototype.retrieveAllChildren = function (resultSetId, nextIndex, count, docProps) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].retrieveAllChildren;
        var body = {
            resultSetId: resultSetId,
            nextIndex: nextIndex,
            counts: count,
            props: docProps
        };
        return this.post(url, body).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var result = _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].create(Object, response.allMap);
            _http_date_converter__WEBPACK_IMPORTED_MODULE_30__["DateConverter"].numberToDateForArrayProps(result); // resultのメンバーはすべてObjectBaseVOの配列である
            return result;
        }));
    };
    /**
     * 指定されたフォルダのフォルダ、文書、ショートカットの取得を行う。
     * @param resultSetId リザルトセットのID
     * @param nextIndex 開始インデックスを指定、0からスタート。
     *　　　　　　　　エントリがない場合は0とする。
     * @param count 取得件数を指定。必須。
     * @param docProps 取得するプロパティ名リスト
     */
    HttpService.prototype.retrieveAllChildrenExceptFolderList = function (resultSetId, nextIndex, count, docProps) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].retrieveAllChildrenExceptFolderList;
        var body = {
            resultSetId: resultSetId,
            nextIndex: nextIndex,
            count: count,
            docProps: docProps
        };
        return this.post(url, body).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var result = _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].create(Object, response.allMap);
            _http_date_converter__WEBPACK_IMPORTED_MODULE_30__["DateConverter"].numberToDateForArrayProps(result); // resultのメンバーはすべてObjectBaseVOの配列である
            return result;
        }));
    };
    /**
     * 再取得終了通知
     * Search実行時、サーバー内部にキャッシュしているデータを解放する。
     * 検索結果データを再取得する必要が無くなった場合に呼び出しを行う。
     */
    HttpService.prototype.endRetrieve = function (resultSetId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].endRetrieve;
        var body = {
            resultSetId: resultSetId
        };
        return this.post(url, body);
    };
    /**
     * 指定名の単語帳を取得する。
     * @param cabinet キャビネットを指定。
     * @param wordBookName 取得する単語帳名を指定。
     */
    HttpService.prototype.getWordBook = function (cabinet, wordBookName) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getWordBook;
        var body = {
            cabinet: _server_vo_server_cabinet_vo__WEBPACK_IMPORTED_MODULE_7__["ServerCabinetVo"].convert(cabinet),
            wordBookName: wordBookName
        };
        return this.post(url, body);
    };
    /**
     * 単語帳に単語を追加する。
     * @param cabinet キャビネットを指定。
     * @param wordBookName 追加する語帳名を指定。
     * @param newWord 追加する単語を指定。
     */
    HttpService.prototype.addWord = function (cabinet, wordBookName, newWord) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].addWord;
        var body = {
            cabinet: _server_vo_server_cabinet_vo__WEBPACK_IMPORTED_MODULE_7__["ServerCabinetVo"].convert(cabinet),
            wordBookName: wordBookName,
            newWord: newWord
        };
        return this.post(url, body);
    };
    /**
     * 文書のセクション詳細を取得する。
     * このメソッド内でセクションのデータを出力するパスを生成する。
     * プロパティファイルに記載されている出力先をベースとして、+セッションID\セクションデータIDというパスを生成する。
     * @param sectionVo 詳細を取得したいセクションVO
     * @param viewerId ビューアを一意に特定する値
     * @param rendition 取得するデータの種類を指定
                 0x1(RENDITION_TYPE_PRIMARY)　 セクションデータの取得
                 0x2(RENDITION_TYPE_THUMBNAIL)　 サムネッルデータの再取得
                 0x4(RENDITION_TYPE_PDF) PDFデータの取得
                 0x8(RENDITION_TYPE_FTS)　 全文検索データの取得
                 0xf(RENDITION_TYPE_ALL) 上記のすべてデータの再取得
     * @param versionId 版ID（nullの場合は最新版）
     */
    HttpService.prototype.getSectionDetail = function (sectionVo, viewerId, rendition, versionId) {
        if (versionId === void 0) { versionId = null; }
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getSectionDetail;
        var body = {
            section: _server_vo_server_section_model_vo__WEBPACK_IMPORTED_MODULE_19__["ServerSectionModelVo"].convert(sectionVo),
            viewerId: viewerId,
            rendition: rendition,
            versionId: versionId
        };
        return this.postResponseTypeText(url, body);
    };
    /**
     * 文書のプロパティを取得する。
     * 更新で使用する場合は、全てのプロパティを取得したオブジェクトを使用する必要がある。
     * @param documentVo 取得したい文書
     * @param props 取得したいプロパティ名のリスト（nullなら全て取得）
     * フルパスを取得したい場合は、"pathIds"を指定すると、IDのフルパスと名前のフルパスがセットされる。
     */
    HttpService.prototype.getDocumentDetail = function (documentVo, props) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getDocumentDetail;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            props: props
        };
        return this.post(url, body);
    };
    /**
     * ユーザーのメールアドレスを取得する
     * @param entryVo 取得したいユーザーの情報
     */
    HttpService.prototype.getUserMailAddress = function (entryVo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getUserMailAddress;
        var body = _server_vo_server_entry_vo__WEBPACK_IMPORTED_MODULE_13__["ServerEntryVo"].convert(entryVo);
        return this.postResponseTypeText(url, body);
    };
    /**
     * ユーザー・グループの一覧を取得する。
     * @param domainVo 取得対象となるドメインのオブジェクト（ベーシック認証の場合はNull）
     * @param keyWord 検索語　取得するユーザーを指定
     *     　　　　　　　　　　空の場合は全て取得。
     *     　　　　　　　　　　Windows認証のときは、ユーザー部分一致、グループ全体一致
     *     　　　　　　　　　　ベーシック認証のときは、ユーザー・グループ共に部分一致
     * @param entryType エントリータイプ
     *      　　　　　　 "isGroup"=グループのみ
     *      　　　　　　 "isUser"=ユーザーのみ
     *      　　　　　　 ""=ユーザー・グループ
     * @param nextIndex 取得開始位置(0～)
     * @param count 取得件数
     * @param searchBuiltinUser ビルトインユーザー（Admin）を検索結果に含めるかどうか
     *                         （true…含める false…含めない）
     */
    HttpService.prototype.retrieveEntryList = function (domainVo, keyWord, entryType, nextIndex, count, searchBuiltinUser) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].retrieveEntryList;
        var body = {
            domain: _server_vo_server_domain_model_vo__WEBPACK_IMPORTED_MODULE_12__["ServerDomainModelVo"].convert(domainVo),
            keyword: keyWord,
            entryType: entryType,
            nextIndex: nextIndex,
            count: count,
            searchBuiltinUser: searchBuiltinUser
        };
        return this.post(url, body);
    };
    /**
     * メールを送信する
     * @param destinationEntryList 通知先一覧のリスト
     * @param senderAddress 送信者アドレス
     * @param mailSubject メールタイトル
     * @param mailBody　メール本文
     * @param document 文書
     * @param versionId 版ID（版番号(1.0など)ではない）※最新版の場合はnullを指定すること
     */
    HttpService.prototype.sendInformMail = function (destinationEntryList, senderAddress, mailSubject, mailBody, document, versionId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].sendInformMail;
        var body = {
            destinationEntryList: destinationEntryList,
            senderAddress: senderAddress,
            mailSubject: mailSubject,
            comment: mailBody,
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(document),
            versionId: versionId
        };
        return this.post(url, body);
    };
    /**
     * 指定したオブジェクトのアクセス権を取得する。
     * @param target ターゲットオブジェクト
     */
    HttpService.prototype.getTargetStatus = function (target) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getTargetStatus;
        var body = _server_vo_server_sys0_base_model_vo__WEBPACK_IMPORTED_MODULE_21__["ServerSys0BaseModelVo"].convert(target);
        return this.post(url, body);
    };
    /**
     * 指定したドキュメントの指定したセクションNOのサムネイルを取得する。
     * サムネイルデータは戻り値のSectionVOのメンバにバイト配列でセットされる。
     * ※一覧で使用するときは、セクションNoは1固定にする。
     * @param documentVo 文書
     * @param sectionNo セクションNo
     * @param versionId 版ID(nullの場合は最新版)
     */
    HttpService.prototype.getSectionThumbnail = function (documentVo, sectionNo, versionId) {
        if (versionId === void 0) { versionId = null; }
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getSectionThumbnail;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo,
            viewerId: versionId
        };
        return this.post(url, body);
    };
    /**
     * サーバーの日付を取得する。
     */
    HttpService.prototype.getServerTime = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getServerTime;
        return this.post(url);
    };
    /**
     * ※文書明示的ロック編集用
     * 文書を更新モードにする。
     * このメソッドでロックした文書は、disconnect時に強制的にロックを解除する。
     * ユーザーが明示的にその文書をロックして操作を行う場合、このメソッドを使用しなくてはならない。
     * 文書を対象にロックを行い、文書に関連する情報（プロパティ、セクション）の変更を行うことができる。
     * documentUpdateStartからdocumentUpdateEndを実行する間でのセクションの操作やeditDocumentDetailは
     * documentUpdateEnd実行時に初めて永続化される。
     * @param documentVo 更新対象の文書（cabIdとidが必要。）
     */
    HttpService.prototype.documentUpdateStart = function (documentVo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].documentUpdateStart;
        var body = _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo);
        return this.post(url, body);
    };
    /**
     * ※文書明示的ロック編集用
     * 文書の更新モードを終了し、コミット又はロールバックする。
     * @param documentVo 更新対象の文書（cabIdとidが必要。）
     * @param version 版上げ更新の際に、版管理を指定する。commit=falseの場合は無視される。（nullを指定できる。）
     * 　　　　　      本メソッドの定数を使用する。
     * 　　　　　　　　COMMIT_VERSION_UP    :版を上げる（版番号を指定）
     * 　　　　　　　　COMMIT_VERSION_UP_MAJOR  :版を上げる（1 の位を上げる）
     * 　　　　　　　　COMMIT_VERSION_UP_MINOR  :版を上げる（0.1 の位を上げる）
     * 　　　　　　　　COMMIT_VERSION_KEEP    :版を上げない
     * @param versionNo COMMIT_VERSION_UP指定時（版上げ、版番号指定）に、版番号を指定する。その際にnullを指定された場合は、エラーにする。
     * @param versionMemo 版上げ更新の際に、版コメントを指定する。nullの場合は無視される。
     * @param commit 更新モード中に、文書編集操作をコミットするかを指定する。コミット(true)/キャンセル(false)
     * キャンセル時は、documentUpdateStart以降の操作を取り消す。
     * ※documentUpdateStartが実行されていなくてもエラーにならない。
     * その場合、変更は反映されない。
     * ユーザーが明示的にその文書をロックして操作を行う場合、このメソッドを使用しなくてはならない。
     * documentUpdateStartからdocumentUpdateEndを実行する間でのセクションの操作やeditDocumentDetailは
     * documentUpdateEnd実行時に初めて永続化される。
     */
    HttpService.prototype.documentUpdateEnd = function (documentVo, version, versionNo, versionMemo, commit) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].documentUpdateEnd;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            version: version,
            versionNo: versionNo,
            versionMemo: versionMemo,
            commit: commit
        };
        return this.post(url, body);
    };
    /**
     * ※文書明示的ロック編集用
     * 文書情報を更新する。
     * ロックを行い、その中でプロパティを更新する場合。
     * updateDocumentDetailでは、実行時にロック取得と解除を行うため、セクション編集等と同じトランザクション内で行うことができない。
     * documentUpdateEndでコミットすると永続化される。
     * ロック中は、アクセス権変更、文書の削除等はできないため、エラーはキャビネット系とシーケンスエラーのみ
     * 更新できるのは文書内のプロパティのみで、ワークフローの変更や移動はこのメソッドでは行えない。
     * ユーザーが明示的にその文書をロックして操作を行う場合、このメソッドを使用しなくてはならない。
     * documentUpdateStartからdocumentUpdateEndを実行する間でのセクションの操作やeditDocumentDetailは
     * documentUpdateEnd実行時に初めて永続化される。
     * @param documentVo 編集したい文書
     * @param props 編集したいプロパティ名リスト(nullなら全て)
     */
    HttpService.prototype.editDocumentDetail = function (documentVo, props) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].editDocumentDetail;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            props: props
        };
        return this.post(url, body);
    };
    /**
     * セクションを追加・挿入する。
     * セクションの名前と拡張子は、内部で引数のファイル名から取得する。
     * @param documentVo 変更したい文書（cabIdとidが必要。）
     * @param sectionNo セクションNo
     * 1　                                   …　先頭に追加
     * 追加するセクションNo                   … 途中に追加
     * 0 又は セクション数以上のセクション番号  … 末尾に追加
     * @param fileName セクションデータのファイル名
     * @param viewerId ビューアを一意に特定する値
     */
    HttpService.prototype.insertSection = function (documentVo, sectionNo, fileName, viewerId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].insertSection;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo,
            fileName: fileName,
            viewerId: viewerId
        };
        return this.post(url, body);
    };
    /**
     * セクションデータを差し替える。
     * セクションの名前と拡張子は、内部で引数のファイル名から取得する。
     * @param documentVo 変更したい文書（cabIdとidが必要。）
     * @param sectionNo 差し替え対象のセクションNo
     * @param fileName セクションデータのファイル名
     * @param viewerId ビューアを一意に特定する値
     */
    HttpService.prototype.replaceSection = function (documentVo, sectionNo, fileName, viewerId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].replaceSection;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo,
            fileName: fileName,
            viewerId: viewerId
        };
        return this.post(url, body);
    };
    /**
     * セクションを移動する。
     * @param documentVo  変更したい文書（cabIdとidが必要。）
     * @param sectionNo   移動対象のセクションNo
     * @param assignIndex 移動後のセクションNo
     * 1　                                  … 先頭に移動
     * 追加するセクションNo                  … 途中に移動
     * 0 又は セクション数以上のセクション番号  … 末尾に移動
     */
    HttpService.prototype.moveSection = function (documentVo, sectionNo, assignIndex) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].moveSection;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo,
            assignIndex: assignIndex
        };
        return this.post(url, body);
    };
    /**
     * セクションを削除する
     * @param documentVo 変更したい文書（cabIdとidが必要。）
     * @param sectionNo 移動対象のセクションNo
     */
    HttpService.prototype.deleteSection = function (documentVo, sectionNo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].deleteSection;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo
        };
        return this.post(url, body);
    };
    /**
     * セクション名を変更する
     * @param documentVo 変更したい文書（cabIdとidが必要。）
     * @param sectionNo 変更対象のセクションNo
     * @param newName 変更後の名前
     */
    HttpService.prototype.renameSection = function (documentVo, sectionNo, newName) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].renameSection;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo,
            newName: newName
        };
        return this.post(url, body);
    };
    /**
     * 先勝ち編集用
     * プロパティ・アクセス権を更新を開始する。更新対象のオブジェクトを取得する。
     * プロパティ編集で先勝ちの仕様になっているものは、必ずこのメソッドを実行しなくてはならない。
     * 複数人がこれを実行していることがあるが、この時点ではエラーにはならない。（ロックではない）
     * 編集用メソッドを別途実行する必要は無く、connectObjectとdisconnectObjectを実行することで、
     * 最新の情報取得～更新/キャンセルを行うことができる。
     * @param target 更新対象のオブジェクト
     *              （DocumentVO、FolderVO、ShortcutVO、AclVo）…cabId、Idが必要
     * @param props 取得するプロパティのリスト(nullなら全て取得、AclVOでは無視される)
     */
    HttpService.prototype.connectObject = function (target, props) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].connectObject;
        var objectBaseVO = _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target);
        var body = {
            target: objectBaseVO,
            props: props
        };
        return this.post(url, body);
    };
    /**
     * 先勝ち編集用
     * プロパティ・アクセス権の更新を反映・キャンセルする。
     * プロパティ編集で先勝ちの仕様になっているものは、必ずconnectObjectを実行後にこのメソッドを実行しなくてはならない。
     * 複数人がconnectObjectをしている状態で、他のユーザーがdisconnectObjectを実行した後に
     * このメソッドをコミットで実行すると例外が発生する。
     * 更新なしで終了する場合もこのメソッドをキャンセルで実行しなくてはならない。
     * @param target 更新対象のオブジェクト
     *              （DocumentVO、FolderVO、ShortcutVO）…反映の場合は反映したい内容をセットしたオブジェクト…cabId、Id、typeが必要
     * @param props 更新するプロパティのリスト(nullなら全て更新、キャンセル時は無視される)
     * @param commit 値を反映するかどうか。true:反映(コミット)/false:キャンセル
     *               アクセス権変更時は、commit=falseを渡す。
     */
    HttpService.prototype.disconnectObject = function (target, props, commit) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].disconnectObject;
        var body = {
            target: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target),
            props: props,
            commit: commit
        };
        return this.post(url, body);
    };
    /**
     * アクセス権リストを取得する。
     * @param target アクセス権リストを取得したいオブジェクト（FolderVO、DocumentVO、CabinetVO。cabIdとid（FolderVOの場合）が必要。）
     */
    HttpService.prototype.getAcl = function (target) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getAcl;
        var body = _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target);
        return this.post(url, body);
    };
    /**
     * オブジェクトを移動する
     * @param targetVo 移動対象のオブジェクト（cabIdとidが必要）
     * @param dest 移動先（フォルダまたはキャビネット）（cabIdとid（FolderVOの場合）が必要）
     */
    HttpService.prototype.move = function (targetVo, dest) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].move;
        var body = {
            target: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(targetVo),
            dest: dest
        };
        return this.post(url, body);
    };
    /**
     * お気に入りカテゴリを作成する。
     * @param newCategory 作成するカテゴリVO
     * @param parentCategory 作成先のカテゴリVO（nullならお気に入り直下）
     */
    HttpService.prototype.createFavoriteCategory = function (newCategory, parentCategory) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].createFavoriteCategory;
        var body = {
            newCategory: _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(newCategory),
            parentCategory: parentCategory != null ? _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(parentCategory) : parentCategory
        };
        return this.post(url, body);
    };
    /**
     * お気に入りを移動する。
     * @param favoriteVo 移動するお気に入りVO(idが必要)
     * @param newName 移動する際に付ける名前（nullなら名前変更なし）
     * @param destCategory 移動先のお気に入りカテゴリVO（nullならお気に入り直下）
     * @param checkMode 名前チェックする/しない
     */
    HttpService.prototype.moveFavorite = function (favoriteVo, newName, destCategory, checkMode) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].moveFavorite;
        var body = {
            favorite: _server_vo_server_favorite_vo__WEBPACK_IMPORTED_MODULE_15__["ServerFavoriteVo"].convert(favoriteVo),
            newName: newName,
            destCategory: destCategory != null ? _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(destCategory) : destCategory,
            checkMode: checkMode
        };
        return this.post(url, body);
    };
    /**
     * お気に入りカテゴリを移動する。
     * @param categoryVO 移動するお気に入りカテゴリVO（idが必要）
     * @param destCategory 移動先のお気に入りカテゴリVO（nullならお気に入り直下）
     */
    HttpService.prototype.moveFavoriteCategory = function (categoryVO, destCategory) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].moveFavoriteCategory;
        var body = {
            favoriteCategory: _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(categoryVO),
            destCategory: destCategory != null ? _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(destCategory) : destCategory
        };
        return this.post(url, body);
    };
    /**
     * 所有権を変更する。
     * 自分にしか変更できない。
     * ログイン時に内部で取得した情報を元に、対象オブジェクトの所有権をログインユーザーに変更する。
     * 後勝ち。connectObjectを実行する必要は無い。単独で実行可能。
     * @param target 所有権を変更したいオブジェクト（FolderVOまたはDocumentVO）（cabIdとidが必要）
     */
    HttpService.prototype.acquireOwnership = function (target) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].acquireOwnership;
        var body = _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target);
        return this.post(url, body);
    };
    /**
     * ごみ箱のオブジェクトを削除前の場所に戻す。
     * @param trash ごみ箱オブジェクト(cabIdとidが必要)
     * @param target ごみ箱内の戻したいオブジェクト(cabIdとidが必要)
     * @param dest 戻し先（FolderVOまたはCabinetVO。cabIdとid（FolderVOの場合）が必要）（Nullの場合は、元の場所に戻す）
     */
    HttpService.prototype.undelete = function (trash, target, dest) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].undelete;
        var body = {
            trash: _server_vo_server_trash_model_vo__WEBPACK_IMPORTED_MODULE_23__["ServerTrashModelVo"].convert(trash),
            target: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target),
            dest: dest
        };
        return this.post(url, body);
    };
    /**
     * セクションファイルの書き出しをキャンセルする。
     * @param downloadId startExportAllSectionで取得したダウンロードID。
     */
    HttpService.prototype.cancelExportSection = function (downloadId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].cancelExportSection;
        var body = {
            downloadId: downloadId
        };
        return this.post(url, body);
    };
    /**
     * オブジェクトを複製する。
     * @param targetVo コピー対象のオブジェクト（cabIdとidが必要）
     * @param dest コピー先 CabinetVO、またはFolderVO（cabIdとid（FolderVOの場合）が必要）
     * @param includeOldVersion 文書の旧版を複製する（文書以外のときは無視される。）
     * @param includeWorkflowInfo 文書の回覧情報、回覧履歴を複製する（文書以外のときは無視される。）
     * @returns 複製後のオブジェクト（DocumentVOまたはFolderVO）
     */
    HttpService.prototype.copy = function (targetVo, dest, includeOldVersion, includeWorkflowInfo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].copy;
        var body = {
            target: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(targetVo),
            dest: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(dest),
            includeOldVersion: includeOldVersion,
            includeWorkflowInfo: includeWorkflowInfo
        };
        return this.post(url, body);
    };
    /**
     * お気に入りカテゴリの詳細を取得する。
     * @param category 取得対象のお気に入りカテゴリ（idが必要）
     */
    HttpService.prototype.getFavoriteCategoryDetail = function (category) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getFavoriteCategoryDetail;
        var body = _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(category);
        return this.post(url, body);
    };
    /**
     * お気に入りカテゴリ詳細を更新する。
     * @param category 更新対象のお気に入りカテゴリ（idが必要）
     */
    HttpService.prototype.updateFavoriteCategoryDetail = function (category) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].updateFavoriteCategoryDetail;
        var body = _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(category);
        return this.post(url, body);
    };
    /**
     * お気に入りカテゴリのリストを取得する。
     * @param category 子のリストを取得対象のカテゴリ（nullならお気に入り直下）カテゴリ指定時はidが必要
     */
    HttpService.prototype.getFavoriteCategoryList = function (category) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getFavoriteCategoryList;
        var body = {
            favoriteCategory: category != null ? _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(category) : category
        };
        return this.post(url, body);
    };
    /**
     * お気に入りのリストを取得する。
     * @param favoriteCategoryVo 子のリストを取得したいお気に入りカテゴリ（nullならお気に入り直下）カテゴリ指定時はidが必要
     */
    HttpService.prototype.getFavoriteList = function (favoriteCategoryVo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getFavoriteList;
        var body = {
            favoriteCategory: favoriteCategoryVo != null ? _server_vo_server_favorite_category_model_vo__WEBPACK_IMPORTED_MODULE_14__["ServerFavoriteCategoryModelVo"].convert(favoriteCategoryVo) : favoriteCategoryVo
        };
        return this.post(url, body);
    };
    /**
     * ツールバーのプロファイルを保存する。
     * @param toolbarXml ツールバー設定
     */
    HttpService.prototype.saveProfileToolBar = function (toolbarXml) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].saveProfileToolBar;
        var body = {
            toolButtonList: toolbarXml.map(function (item) { return _server_xml_server_tool_button_model__WEBPACK_IMPORTED_MODULE_25__["ServerToolButtonModel"].convert(item); })
        };
        return this.post(url, body);
    };
    /**
     * 一覧表示のためのプロファイルを取得する。
     * 文書タイプを指定する。
     * 該当するプロファイルが存在しなければnullを返す。
     * @param docTypeId 文書タイプID（nullなら「すべての文書タイプ」のプロファイル、TODOリストの場合はConfigFileVO.LIST_TYPE_TODO_LIST）
     */
    HttpService.prototype.getProfileDisplayList = function (docTypeId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getProfileDisplayList;
        var body = {
            docTypeName: docTypeId
        };
        return this.post(url, body);
    };
    /**
     * 一覧表示のためのプロファイルを保存する。
     * 文書タイプを指定する。
     * @param docTypeId 文書タイプ名 (全ての文書タイプの場合はnull、TODOリストの場合は、ConfigFileVO.LIST_TYPE_TODO_LIST) <br>
     *            ※文書タイプIDは文書タイプ変更時に変わってしまうため
     * @param listXml 文書一覧表示設定
     */
    HttpService.prototype.saveProfileDisplayList = function (docTypeId, listXml) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].saveProfileDisplayList;
        var body = {
            docTypeName: docTypeId,
            displayList: listXml
        };
        return this.post(url, body);
    };
    /**
     * デフォルト表示するお気に入りオブジェクトを取得する。
     * セットは、createFavoriteやupdateFavoriteDetailで行う
     * 該当するプロファイルが存在しなければnullを返す。
     */
    HttpService.prototype.getDefaultFavorite = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getDefaultFavorite;
        return this.post(url);
    };
    /**
     * ワークフローテンプレートの名前リストを取得する。
     */
    HttpService.prototype.getWorkflowTemplateList = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getWorkflowTemplateList;
        return this.post(url);
    };
    /**
     * ワークフローオブジェクトを取得する
     * @param workflowConfig プロファイル
     */
    HttpService.prototype.getWorkflowTemplate = function (workflowConfig) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getWorkflowTemplate;
        var body = _server_vo_server_config_file_vo__WEBPACK_IMPORTED_MODULE_8__["ServerConfigFileVo"].convert(workflowConfig);
        return this.post(url, body);
    };
    /**
     * ワークフローテンプレートを作成する
     * @param name テンプレート名
     * @param workflowTemplateVo ワークフローテンプレート
     */
    HttpService.prototype.createWorkflowTemplate = function (name, workflowTemplateVo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].createWorkflowTemplate;
        var body = {
            name: name,
            workflowTemplateVo: workflowTemplateVo
        };
        return this.post(url, body);
    };
    /**
     * ワークフローテンプレートを更新する
     * @param workflowConfig プロファイル
     * @param workflowTemplateVo ワークフローテンプレート
     */
    HttpService.prototype.updateWorkflowTemplate = function (workflowConfig, workflowTemplateVo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].updateWorkflowTemplate;
        var body = {
            workflowConfig: _server_vo_server_config_file_vo__WEBPACK_IMPORTED_MODULE_8__["ServerConfigFileVo"].convert(workflowConfig),
            workflowTemplateVo: workflowTemplateVo
        };
        return this.post(url, body);
    };
    /**
     * ワークフローテンプレートを削除する
     * @param workflowConfig プロファイル
     */
    HttpService.prototype.deleteWorkflowTemplate = function (workflowConfig) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].deleteWorkflowTemplate;
        var body = _server_vo_server_config_file_vo__WEBPACK_IMPORTED_MODULE_8__["ServerConfigFileVo"].convert(workflowConfig);
        return this.post(url, body);
    };
    // ★Stitch V1.3対応
    // ワークフロー機能は提供しない
    // /**
    //  * ワークフロー情報を取得する。
    //  * プロパティを指定して取得することが可能。null指定で全て取得。
    //  * 自分が審査者/承認者かや、回覧状態のチェックは行わないので、
    //  * 審査・承認で取得する場合は、取得後に呼び出し側でチェックしなくてはならない。
    //  * @param documentVo ワークフロー情報を取得したい文書オブジェクト（cabIdとidが必要）
    //  * @param props 取得したいプロパティ（Nullなら全て取得）
    //  */
    // getWorkflow(documentVo: DocumentVO, props: string[] | null): Observable<WorkflowVO> {
    //   const url = urlConfig.getWorkflow;
    //   const body = {
    //     documentVo: ServerDocumentVo.convert(documentVo),
    //     props: props
    //   };
    //   return this.post(url, body);
    // }
    /**
     * ワークフロー情報を取得する。
     * プロパティを指定して取得することが可能。null指定で全て取得。
     * 自分が審査者/承認者かや、回覧状態のチェックは行わないので、
     * 審査・承認で取得する場合は、取得後に呼び出し側でチェックしなくてはならない。
     * ※getWorkFlowでは、ごみ箱に存在している場合や削除されている場合、
     * アクセス権がない場合もチェックを行うが、本メソッドは行わない。
     * @param documentVo ワークフロー情報を取得したい文書オブジェクト（cabIdとidが必要）
     * @param props 取得したいプロパティ（Nullなら全て取得）
     */
    HttpService.prototype.getDocumentWorkFlowInfo = function (documentVo, props) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getWorkflowInfo;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            props: props
        };
        return this.post(url, body);
    };
    /**
     * 文書を申請する。
     * 本メソッドではワークフロー情報に対して以下の処理を行う。
     * ・回覧状態を回覧中にする。
     * ・次の審査者、承認者を進める。
     * ・ログを作成し、WorkflowVOにセットする。
     * ・回覧ルートをチェックし、保存する。
     * 先勝ち対応はされていない。常に後勝ちとなる。
     * そのため、内部では最新を取得して、回覧状態やルートをチェックする。
     * 本メソッド内でメール送信を実行する（非同期。ワークフロー情報保存後。）
     * @param workflowVo ワークフローVO
     * @param comment コメント
     */
    HttpService.prototype.applyDocument = function (workflowVo, comment) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].applyDocument;
        var body = {
            workflowVo: workflowVo,
            comment: comment
        };
        return this.post(url, body);
    };
    /**
     * 文書を承認する。
     * 本メソッドではワークフロー情報に対して以下の処理を行う。
     * ・回覧状態を承認済みにする。
     * ・次の審査者、承認者を空にする。
     * ・承認者をセットする。
     * ・ログを作成し、WorkflowVOにセットする。
     * ・引数で渡された回覧ルートをチェックし、ユーザーが承認者ではなかった場合、
     * 　回覧ルートのユーザー以降をクリアし、保存する。
     * 先勝ち対応はされていない。常に後勝ちとなる。
     * そのため、内部では最新を取得して、回覧状態やルートをチェックする。
     * 本メソッド内でメール送信を実行する（非同期。ワークフロー情報保存後。）
     * @param workflowVo ワークフローVO
     * @param comment コメント
     */
    HttpService.prototype.approveDocument = function (workflowVo, comment) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].approveDocument;
        var body = {
            workflowVo: workflowVo,
            comment: comment
        };
        return this.post(url, body);
    };
    /**
     * ワークフローに関するメール送信を実行する。
     * operationで指定された操作時に送信すべき内容を、workflowVoから情報を取得する。
     * そのため、申請・審査・承認などの操作をRemoteServiceのメソッドを実行し後の戻り値を使用しなくてはならない。
     * @param workflowVo ワークフロー操作後のWorkflowVO
     * @param operation ワークフロー操作  WorkflowLogクラスの定数使用 <br>
     *            PROCESSING_NAME_APPLY : 申請 <br>
     *            PROCESSING_NAME_APPROVE : 承認 <br>
     *            PROCESSING_NAME_EXAMINE : 審査 <br>
     *            PROCESSING_NAME_DISALLOW : 差し戻し <br>
     *            PROCESSING_NAME_WITHDROW : 取り下げ
     * @param mailAddress メールアドレス
     */
    HttpService.prototype.sendWorkflowMail = function (workflowVo, operation, mailAddress) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].sendWorkflowMail;
        var body = {
            workflowVo: workflowVo,
            operation: operation,
            mailAddress: mailAddress
        };
        return this.post(url, body);
    };
    /**
     * オブジェクトを削除する。
     * @param targetVo 削除するオブジェクト
     */
    HttpService.prototype.deleteObject = function (targetVo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].deleteObject;
        var body = _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(targetVo);
        return this.post(url, body);
    };
    /**
     * アクセス権を更新する。
     * @param target 更新対象のオブジェクト
     *              （DocumentVO、FolderVO、ShortcutVO）…反映の場合は反映したい内容をセットしたオブジェクト
     * @param acl アクセス権オブジェクト
     *            AclVOでの所有者の変更は無視される。所有者の変更はacquireOwnerShipを実行すること。
     * @param updateSubFolder サブフォルダのアクセス権をも上書く(true)ことを指定。フォルダのアクセス権設定時のみ有効。
     * @param updateSubDoc サブの文書とショートカットのアクセス権を上書く(true)ことを指定。フォルダのアクセス権設定時のみ有効。
     * @param skipError フォルダーアクセス権をサブフォルダー以下にも設定する場合にアクセス権のない項目や他の人が使用中の項目が含まれていたら、スキップするかどうか（true…スキップする。）
     */
    HttpService.prototype.setAcl = function (target, acl, updateSubFolder, updateSubDoc, skipError) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].setAcl;
        var body = {
            target: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target),
            acl: _server_vo_server_acl_vo__WEBPACK_IMPORTED_MODULE_6__["ServerAclVo"].convert(acl),
            updateSubFolder: updateSubFolder,
            updateSubDoc: updateSubDoc,
            skipError: skipError
        };
        return this.post(url, body);
    };
    /**
     * 文書を差し戻す。（却下する）
     * 本メソッドではワークフロー情報を以下のように変更する。
     * 回覧状態⇒(空)
     * 回覧ルート⇒変化なし
     * 配布先⇒変化なし
     * 申請者⇒(空)
     * 承認者⇒(空)
     * 次の審査/承認者⇒(空)
     * ログを作成し、WorkflowVOにセットする。
     * 先勝ち対応はされていない。常に後勝ちとなる。
     * そのため、内部では最新を取得して、回覧状態やルートをチェックする。
     * メール送信は本メソッドの戻り値のWorkflowVOを渡してsendWorkflowMailを実行する。
     * @param workflowVo ワークフローVO
     * @param comment コメント
     */
    HttpService.prototype.disallowDocument = function (workflowVo, comment) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].disallowDocument;
        var body = {
            workflowVo: workflowVo,
            comment: comment
        };
        return this.post(url, body);
    };
    /**
     * 文書を引き戻す。（申請取り下げ）
     * 本メソッドではワークフロー情報を以下のように変更する。
     * 回覧状態⇒(空)
     * 回覧ルート⇒変化なし
     * 配布先⇒変化なし
     * 申請者⇒(空)
     * 承認者⇒(空)
     * 次の審査/承認者⇒(空)
     * ログを作成し、WorkflowVOにセットする。
     * 先勝ち対応はされていない。常に後勝ちとなる。
     * そのため、内部では最新を取得して、回覧状態やルートをチェックする。
     * メール送信は本メソッドの戻り値のWorkflowVOを渡してsendWorkflowMailを実行する。
     * @param workflowVo ワークフローVO
     * @param comment コメント
     */
    HttpService.prototype.withdrawDocument = function (workflowVo, comment) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].withdrawDocument;
        var body = {
            workflowVo: workflowVo,
            comment: comment
        };
        return this.post(url, body);
    };
    /**
     * 文書を審査する。
     * 本メソッドではワークフロー情報を以下のように変更する。
     * 回覧状態⇒回覧中
     * 回覧ルート⇒審査時の内容
     * 配布先⇒審査時の内容
     * 申請者⇒申請者
     * 承認者⇒(空)
     * 次の審査/承認者⇒次の審査/承認者
     * ログを作成し、WorkflowVOにセットする。
     * 先勝ち対応はされていない。常に後勝ちとなる。
     * そのため、内部では最新を取得して、回覧状態やルートをチェックする。
     * メール送信は本メソッドの戻り値のWorkflowVOを渡してsendWorkflowMailを実行する。
     * @param workflowVo ワークフローVO
     * @param comment コメント
     */
    HttpService.prototype.examineDocument = function (workflowVo, comment) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].examineDocument;
        var body = {
            workflowVo: workflowVo,
            comment: comment
        };
        return this.post(url, body);
    };
    /**
     * 更新モード中の指定したドキュメントの指定したセクションNOのサムネイルを取得する。
     * サムネイルデータは戻り値のSectionVOのメンバにバイト配列でセットされる。
     * ※一覧で使用するときは、セクションNoは1固定にする。
     * @param documentVo 文書
     * @param sectionNo セクションNo
     */
    HttpService.prototype.getWorkingSectionThumbnail = function (documentVo, sectionNo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getWorkingSectionThumbnail;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo
        };
        return this.post(url, body);
    };
    /**
     * 文書の最終アクセス日等を更新する
     * @param doc 文書
     * @param mode モード（更新か読み取りか）
     * 0…読み取りモード時
     * 1…更新モード時
     */
    HttpService.prototype.declareAccessDocument = function (doc, mode) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].declareAccessDocument;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(doc),
            mode: mode
        };
        return this.post(url, body);
    };
    /**
     * 文書の採番番号を取得する。
     * 実際に作成済みの文書を指定しなくてはならない。
     * 採番は即時インクリメントされ、キャンセルはできない。
     * @param doc 採番したい文書（cabId、id、typeIDが必要）
     */
    HttpService.prototype.getDocumentUserNumber = function (doc) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getDocumentUserNumber;
        var body = _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(doc);
        return this.postResponseTypeText(url, body);
    };
    /**
     * 文書の版リストを取得する。
     * @param document 文書を指定する。（cabId、idが必要）
     */
    HttpService.prototype.getVersionList = function (document) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getVersionList;
        var body = _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(document);
        return this.post(url, body);
    };
    /**
     * 文書の版を削除する。
     * @param version 版を指定する。(cabId,id,docIdが必要)
     */
    HttpService.prototype.deleteVersion = function (version) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].deleteVersion;
        var body = _server_vo_server_version_model_vo__WEBPACK_IMPORTED_MODULE_24__["ServerVersionModelVo"].convert(version);
        return this.post(url, body);
    };
    /**
     * 版のプロパティを更新する。
     * 版コメントしか更新できない。それ以外は無視する。
     * @param version  更新の版を指定する。(cabId,id,docIdが必要)
     */
    HttpService.prototype.updateVersionDetail = function (version) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].updateVersionDetail;
        var body = _server_vo_server_version_model_vo__WEBPACK_IMPORTED_MODULE_24__["ServerVersionModelVo"].convert(version);
        return this.post(url, body);
    };
    /**
     * 指定版IDの版データを取得する。
     * ビューア起動時など、版IDしか分からない場合に使用する。
     * @param version    版オブジェクトを指定する。（cabID,docIdが必要。※idにnullを入れると最新版が取得できる。）
     */
    HttpService.prototype.getVersionDetail = function (version) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getVersionDetail;
        var body = _server_vo_server_version_model_vo__WEBPACK_IMPORTED_MODULE_24__["ServerVersionModelVo"].convert(version);
        return this.post(url, body);
    };
    /**
     * 文書のショートカットを作成する。
     * @param shortcutName 生成するショートカット名を指定する。
     * @param target 生成対象の文書を指定する。(cabId,idが必要)
     */
    HttpService.prototype.createShortcut = function (target) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].createShortcut;
        var body = _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(target);
        return this.post(url, body);
    };
    /**
     * 文書のサブデータを作成する。
     * 文書のサブデータの作成は非同期で行う。
     * 文書のアクセス権や存在に関する例外は返すが、サブデータ作成や削除に関するエラーはログに出力する。
     * @param document 文書を指定する。(cabId,idが必要)
     * @param assignment サブデータ作成の指定を指定する。
     */
    HttpService.prototype.createDocumentSubData = function (document, assignment) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].createDocumentSubData;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(document),
            assignment: _server_vo_server_create_sub_data_vo__WEBPACK_IMPORTED_MODULE_9__["ServerCreateSubDataVo"].convert(assignment)
        };
        return this.post(url, body);
    };
    /**
     * 文書を結合する。新規文書は同フォルダで、生成される。
     * @param docs 結合する文書リストを指定する。(cabId,idが必要)
     *             先頭文書は文書情報(ACL含む)を引き継ぐ文書を指定する。
     * @param newName 結合後の文書名を指定する。nullの場合は、エラーとする。
     * @param deleteSource 元の文書を削除するどうかを指定する。true…削除する。
     * @param targetFolder 登録先フォルダ名
     */
    HttpService.prototype.bindDocuments = function (docs, newName, deleteSource, targetFolder) {
        if (targetFolder === void 0) { targetFolder = null; }
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].bindDocuments;
        var body = {
            docs: docs,
            newName: newName,
            deleteSource: deleteSource,
            target: targetFolder
        };
        return this.post(url, body);
    };
    /**
     * 文書を分解する。新規文書は同フォルダで、生成される。
     *
     * @param document 分解の文書を指定する。(cabId,idが必要)
     * @param deleteSource 元の文書が削除するどうかを指定する。trueは削除する。
     * @param props 返す文書プロパティリストを指定。nullの場合は、すべて取得とする。
     */
    HttpService.prototype.unbindDocument = function (document, deleteSource, props) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].unbindDocument;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(document),
            deleteSource: deleteSource,
            props: props
        };
        return this.post(url, body);
    };
    /**
     * ゴミ箱のオブジェクトを削除する。
     * 指定のオブジェクトがゴミ箱にない場合は、エラーとする。
     * @param target 永久に削除するオブジェクトを指定する。(FolderVOまたはDocumentVOまたはShortcutVO)(cabId,idが必要)
     */
    HttpService.prototype.eraseObject = function (target) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].eraseObject;
        var body = _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target);
        return this.post(url, body);
    };
    /**
     * 指定のセクションより、文書を二分割する。
     * documentUpdateStartを呼び出していないとエラーにする。
     * 編集後、documentUpdateEndを呼び出して、コミットを指定する場合は、編集結果が永続化される。
     * @param document 文書を指定する。（id,cabIdが必要）
     * @param sectionNo 選択されているセクションNoを指定する。
     * @param mode 分割モードを指定する。0か1以外の場合は、ArgumentExceptionを返す。
     *             0:sectionNoを含む、以前のセクションを新文書とする。
     *             1:sectionNoを含む、以後のセクションを新文書とする。
     * @param name 新文書名を指定する。指定しない場合は、エラーとする。
     */
    HttpService.prototype.divideDocument = function (document, sectionNo, mode, name) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].divideDocument;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(document),
            sectionNo: sectionNo,
            mode: mode,
            name: name
        };
        return this.post(url, body);
    };
    /**
     * 文書を差し替える。
     * documentUpdateStartを呼び出されないとエラーにする。
     * 編集後、documentUpdateEndを呼び出して、コミットを指定する場合は、編集結果を永続化される。
     * @param document 文書を指定する。(cabId,idが必要)
     * @param fileNameList セクションファイルのファイル名リスト。リストの順番で登録される。
     */
    HttpService.prototype.replaceAllSection = function (document, fileNameList) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].replaceAllSection;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(document),
            fileNameList: fileNameList
        };
        return this.post(url, body);
    };
    /**
     * 文書のセクションの実データのダウンロードを開始する。
     * 全てのセクションも、ある特定のセクションもこのメソッドを使用する。
     * ダウンロードをIDを返却する。
     * この時点でJNAは非同期でダウンロードの処理を開始している。
     * @param documentVo ダウンロードをしたい文書（cabIdとidが必要）
     * @param sectionNo セクションNo（nullなら全セクション取得）
     * @param versionId 版を指定する。nullの場合、最新版を取得する。
     */
    HttpService.prototype.startExportSection = function (documentVo, sectionNo, versionId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].startExportSection;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo,
            versionId: versionId
        };
        return this.postResponseTypeText(url, body);
    };
    /**
     * 指定した文書のセクションの実データ書き出しの終了を待ち、ファイルを取得する。
     * 全てのセクションも、ある特定のセクションもこのメソッドを使用する。
     * 複数データあるときはzipファイルにする。1つのセクションの場合は、圧縮しない。
     * プロパティファイルに記載されている出力先をベースとして、+セッションID\Download\ダウンロードID（圧縮ファイルはさらにフォルダ下に\ZipFile）というパスを生成する。
     * 取得したファイル名を元にサーブレットを実行し、zipファイルをダウンロードする。
     * このメソッドの実行中にキャンセルを行うことができる。
     * @param downloadId ダウンロードID startExportAllSectionで取得したダウンロードID。
     */
    HttpService.prototype.exportSection = function (downloadId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].exportSection;
        var body = {
            downloadId: downloadId
        };
        return this.postResponseTypeText(url, body);
    };
    /**
     * 文書のセクションの実データのダウンロードを開始する。
     * 全てのセクションも、ある特定のセクションもこのメソッドを使用する。
     * ダウンロードをIDを返却する。
     * この時点でJNAは非同期でダウンロードの処理を開始している。
     * @param documents 対象文書のリスト。 cabIdとidとnameとsectionsが必要。
     */
    HttpService.prototype.startExportDocuments = function (documents) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].startExportDocuments;
        var body = {
            documents: documents
        };
        return this.postResponseTypeText(url, body);
    };
    /**
     * 指定した文書のセクションの実データ書き出しの終了を待ち、ファイルを取得する。
     * 全てのセクションも、ある特定のセクションもこのメソッドを使用する。
     * 複数データあるときはzipファイルにする。1つのセクションの場合は、圧縮しない。
     * プロパティファイルに記載されている出力先をベースとして、+セッションID\Download\ダウンロードID（圧縮ファイルはさらにフォルダ下に\ZipFile）というパスを生成する。
     * 取得したファイル名を元にサーブレットを実行し、zipファイルをダウンロードする。
     * このメソッドの実行中にキャンセルを行うことができる。
     * @param downloadId startExportDocumentsの戻り値。
     */
    HttpService.prototype.exportDocuments = function (downloadId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].exportDocuments;
        var body = {
            downloadId: downloadId
        };
        return this.postResponseTypeText(url, body);
    };
    /**
     * 文書ダウンロードのキャンセルを要求する。 exportDocumentsが実行されていない場合は、エラーとなる。
     * キャンセル時は、ダウンロードID以下のフォルダ、ファイルを削除する。
     * @param downloadId startExportDocumentsで取得したダウンロードID。
     */
    HttpService.prototype.cancelExportDocuments = function (downloadId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].cancelExportDocuments;
        var body = {
            resultSetId: downloadId
        };
        return this.post(url, body);
    };
    /**
     * 文書のセクション一覧を取得する。
     * 取得情報は、実データ以外の基本情報のみ。
     * @param document 文書を指定（cabIdとidが必要）
     * @param versionId 版IDを指定（nullのときは最新版）
     *
     */
    HttpService.prototype.getSectionList = function (document, versionId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getSectionList;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(document),
            versionId: versionId
        };
        return this.post(url, body);
    };
    /**
     * 個人設定のプロファイルを保存する。
     * @param settingXml 個人設定用オブジェクト
     */
    HttpService.prototype.saveProfileSetting = function (settingXml) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].saveProfileSetting;
        var body = settingXml;
        return this.post(url, body);
    };
    /**
     * ログインユーザーのメールアドレスを変更する。
     * @param mailAddress 変更後のメールアドレス
     */
    HttpService.prototype.updateLoginUserAddress = function (mailAddress) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].updateLoginUserAddress;
        var body = {
            mailAddress: mailAddress
        };
        return this.post(url, body);
    };
    /**
     * ログインユーザーのパスワードを変更する。nullを渡してもエラーにしない。
     * @param password 変更後のパスワード
     */
    HttpService.prototype.updateLoginUserPassword = function (password) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].updateLoginUserPassword;
        var body = {
            password: password
        };
        return this.post(url, body);
    };
    /**
     * ユーザーが存在するかをチェックする。
     */
    HttpService.prototype.checkExistLoginUser = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].checkExistLoginUser;
        return this.post(url);
    };
    /**
     * 指定されたフォルダの文書の一覧をCSV出力する。
     * @param resultSetId 一覧表示getChildrenで取得したresultSetId
     * @param docProps  取得するPropertyDetailVOリスト。必須。
     *                  リストにセットされている順にCSVに左から出力する
     *                  各PropertyDetailVOには、nameとDisplayNameが必須。
     * @param sort ソート条件指定　※検索結果出力時は無視される。
     *              プロパティ名 ASC:false/DESC:true
     * @param docTypeId 絞込みを行う文書タイプ。全ての場合はnull　※検索結果出力時は無視される。
     * @param replaceMapList 値置き換えマップのリスト
     *                       数値などで値が入っている場合に、置き換える文字列を指定する。
     *                       リストの要素数は必ずdocPropsと同じ数になること。検索時は検索実施時のpropsと同数。
     *                       置き換えしない場合は、nullをセットする。
     *                       日付型の項目と対応する順番の要素には<"date", "yyyyMMddHH">などのように日付フォーマットを入れる。
     *                       文書タイプIDと対応する順番の要素には、<"文書タイプID", "文書タイプ名">を入れる。
     * @param type CSV出力する一覧の種類
     *              EXPORT_TYPE_DOC_VIEW(1) …文書一覧
     *              EXPORT_TYPE_SEARCH_RESULT(2) …検索結果
     */
    HttpService.prototype.exportCSV = function (resultSetId, sort, docProps, docTypeId, replaceMapList, type) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].exportCSV;
        var body = {
            resultSetId: resultSetId,
            sort: _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].convertToMapEntryArray(sort),
            docProps: docProps,
            docTypeId: docTypeId,
            replaceMapList: _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].convertToArryaOfMapEntryArray(replaceMapList),
            type: type
        };
        return this.postResponseTypeText(url, body);
    };
    /**
     * CSVファイル書き出しをキャンセルする。
     * 書き出し自体が終了していれば、ファイルを削除する。
     * 書き出し中に実行された場合は、何も行わない。
     * @param resultSetId requestSearchで取得したID
     */
    HttpService.prototype.cancelExportCSVFile = function (resultSetId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].cancelExportCSVFile;
        var body = {
            resultSetId: resultSetId
        };
        return this.post(url, body);
    };
    /**
     * 設定ファイルの内容を取得する。
     * 設定ファイルが存在しない場合はエラーとなる。
     * @param fileName ファイル名（拡張子より前）
     */
    HttpService.prototype.getConfig = function (fileName) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getConfig;
        var body = {
            fileName: fileName
        };
        return this.post(url, body);
    };
    /**
     * 一覧表示のためのプロファイルを削除する。
     * 文書タイプを指定する。
     * 該当するプロファイルが存在しなければ何もしない。エラーにもしない
     * @param docTypeId 文書タイプID（nullなら「すべての文書タイプ」のプロファイル）
     */
    HttpService.prototype.deleteProfileDisplayList = function (docTypeId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].deleteProfileDisplayList;
        var body = {
            docTypeId: docTypeId
        };
        return this.post(url, body);
    };
    /**
     * 更新作業中の文書のセクション詳細を取得する。
     * このメソッド内でセクションのデータを出力するパスを生成する。
     * プロパティファイルに記載されている出力先をベースとして、+セッションID\セクションデータIDというパスを生成する。
     * @param sectionVo 詳細を取得したいセクションVO
     * @param viewerId ビューアを一意に特定する値
     * @param rendition 取得するデータの種類を指定
     *                  0x1(RENDITION_TYPE_PRIMARY)　 セクションデータの取得
     *                  0x4(RENDITION_TYPE_PDF) PDFデータの取得
     *                  0x8(RENDITION_TYPE_FTS)　 全文検索データの取得
     *                  0xf(RENDITION_TYPE_ALL) 上記のすべてデータの再取得
     */
    HttpService.prototype.getWorkingSectionDetail = function (sectionVo, viewerId, rendition) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getWorkingSectionDetail;
        var body = {
            section: _server_vo_server_section_model_vo__WEBPACK_IMPORTED_MODULE_19__["ServerSectionModelVo"].convert(sectionVo),
            viewerId: viewerId,
            rendition: rendition
        };
        return this.postResponseTypeText(url, body);
    };
    /**
     * ごみ箱を空にする。（非同期）
     * ※呼出し後に結果を確認するにはgetResultClearTrashAsyncを実行する。
     * @param cabinet キャビネット
     */
    HttpService.prototype.clearTrashAsync = function (cabinet) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].clearTrashAsync;
        var body = _server_vo_server_cabinet_vo__WEBPACK_IMPORTED_MODULE_7__["ServerCabinetVo"].convert(cabinet);
        return this.post(url, body);
    };
    /**
     * ごみ箱を空にする処理の結果を取得する。
     */
    HttpService.prototype.getResultClearTrashAsync = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getResultClearTrashAsync;
        return this.post(url);
    };
    /**
     * フォルダーをコピーする。（非同期）
     * ※呼出し後に結果を確認するにはgetResultCopyFolderAsyncを実行する。
     * @param targetVo コピー対象のオブジェクト（cabIdとidが必要）
     * @param destVo コピー先 CabinetVO、またはFolderVO（cabIdとid（FolderVOの場合）が必要）
     * @param includeOldVersion 文書の旧版を複製する（文書以外のときは無視される。）
     * @param includeWorkflowInfo 文書の回覧情報、回覧履歴を複製する（文書以外のときは無視される。）
     */
    HttpService.prototype.copyFolderAsync = function (targetVo, destVo, includeOldVersion, includeWorkflowInfo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].copyFolderAsync;
        var body = {
            target: targetVo,
            dest: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(destVo),
            includeOldVersion: includeOldVersion,
            includeWorkflowInfo: includeWorkflowInfo
        };
        return this.post(url, body);
    };
    /**
     * フォルダーコピーの結果を取得する。
     */
    HttpService.prototype.getResultCopyFolderAsync = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getResultCopyFolderAsync;
        return this.post(url);
    };
    /**
     * ごみ箱からフォルダを削除する。（非同期）
     * ※呼出し後に結果を確認するにはgetResultEraseFolderAsyncを実行する。
     * @param folder フォルダ
     */
    HttpService.prototype.eraseFolderAsync = function (folder) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].eraseFolderAsync;
        var body = folder;
        return this.post(url, body);
    };
    /**
     * ごみ箱からフォルダを削除する処理の結果を確認する。
     */
    HttpService.prototype.getResultEraseFolderAsync = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getResultEraseFolderAsync;
        return this.post(url);
    };
    /**
     * (V1.2でメソッド名を変更)
     * アクセス権を更新する。（非同期）
     * ※呼出し後に結果を確認するにはgetResultCopyFolderAsyncを実行する。
     * @param target 更新対象のオブジェクト
     *            　（DocumentVO、FolderVO、ShortcutVO）…反映の場合は反映したい内容をセットしたオブジェクト
     * @param acl アクセス権オブジェクト
     *            AclVOでの所有者の変更は無視される。所有者の変更はacquireOwnerShipを実行すること。
     * @param updateSubFolder サブフォルダのアクセス権をも上書く(true)ことを指定。フォルダのアクセス権設定時のみ有効。
     * @param updateSubDoc サブの文書とショートカットのアクセス権を上書く(true)ことを指定。フォルダのアクセス権設定時のみ有効。
     * @param skipError フォルダーアクセス権をサブフォルダー以下にも設定する場合にアクセス権のない項目や他の人が使用中の項目が含まれていたら、スキップするかどうか
     *                 （true…スキップする。）
     * @param checkCount 閾値を超えていないかの確認をするかどうか
     */
    HttpService.prototype.setContainerAclAsync = function (target, acl, updateSubFolder, updateSubDoc, skipError, checkCount) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].setContainerAclAsync;
        var body = {
            target: Object(_vo_folder_vo__WEBPACK_IMPORTED_MODULE_27__["isFolderVO"])(target)
                ? _server_vo_server_folder_type_vo__WEBPACK_IMPORTED_MODULE_16__["ServerFolderTypeVo"].convert(target)
                : Object(_vo_shortcut_vo__WEBPACK_IMPORTED_MODULE_29__["isShortcutVO"])(target)
                    ? _server_vo_server_shortcut_model_vo__WEBPACK_IMPORTED_MODULE_20__["ServerShortcutModelVo"].convert(target)
                    : target,
            acl: _server_vo_server_acl_vo__WEBPACK_IMPORTED_MODULE_6__["ServerAclVo"].convert(acl),
            updateSubFolder: updateSubFolder,
            updateSubDoc: updateSubDoc,
            skipError: skipError,
            checkCount: checkCount
        };
        return this.post(url, body);
    };
    /**
     * フォルダアクセス権更新の結果を確認する。
     */
    HttpService.prototype.getResultSetContainerAclAsync = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getResultSetContainerAclAsync;
        return this.post(url);
    };
    /**
     * 指定されたフォルダのフォルダ、ドキュメント、ショートカットの件数の取得
     * @param currentFolder フォルダ(FolderVO)またはキャビネット(CabinetVO)またはごみ箱(TrashVO)
     * @param sort ソート条件指定
     * @param docProps docProps 取得するプロパティ名リスト
     * @param docTypeId 絞込みを行う文書タイプ。全ての場合はnull
     */
    HttpService.prototype.getChildren = function (currentFolder, sort, docProps, docTypeId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getChildren;
        var body = {
            currentFolder: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(currentFolder),
            sort: _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].convertToMapEntryArray(sort),
            docProps: docProps,
            docTypeId: docTypeId
        };
        return this.post(url, body).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) { return _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].create(Object, response.list); }));
    };
    /**
     * オブジェクトのURLを取得する
     * 存在しないオブジェクトでもURLを返却する
     * @param target URLを取得したいオブジェクト（CabinetVO,FolderVO,DocumentVOのどれか）
     * @param versionId 文書の旧版のURL取得時のみ指定する（nullの場合は最新版。FolderVO,CabinetVO指定時は無視する）
     */
    HttpService.prototype.getObjectUrl = function (target, versionId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getObjectUrl;
        var body = {
            target: _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target),
            versionId: versionId
        };
        return this.postResponseTypeText(url, body);
    };
    /**
     * オブジェクトのMobileURLを取得する
     * 存在しないオブジェクトでもURLを返却する
     * @param target URLを取得したいオブジェクト（CabinetVO,FolderVO,DocumentVOのどれか）
     */
    HttpService.prototype.getObjectMobileUrl = function (target) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getObjectMobileUrl;
        var body = _server_vo_server_object_base_vo__WEBPACK_IMPORTED_MODULE_17__["ServerObjectBaseVo"].convert(target);
        return this.postResponseTypeText(url, body);
    };
    /**
     * （※V1.2 追加）
     * 承認後の文書を更新する。（承認後修正）
     * 本メソッドではワークフロー情報を以下のように変更する。
     * 回覧状態⇒承認後修正
     * 回覧ルート⇒変化なし
     * 配布先⇒変化なし
     * 申請者⇒(空)
     * 承認者⇒(空)
     * 次の審査/承認者⇒(空)
     * ・回覧履歴を作成し、WorkflowVOにセットする。
     * 先勝ち対応はされていない。常に後勝ちとなる。
     * そのため、内部では最新を取得して、回覧状態やルートをチェックする。
     * メール送信対応はしていない。
     * @param documentVo セットが必要な項目（それ以外は無視する） cabIdとid
     * @param version 版
     * @param versionNo 版
     * @param versionMemo 版コメント
     * @param comment コメント
     */
    HttpService.prototype.updateDocumentAfterApprove = function (documentVo, version, versionNo, versionMemo, comment) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].updateDocumentAfterApprove;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            version: _server_vo_server_version_model_vo__WEBPACK_IMPORTED_MODULE_24__["ServerVersionModelVo"].convert(version),
            versionNo: versionNo,
            versionMemo: versionMemo,
            comment: comment
        };
        return this.post(url, body);
    };
    /**
     * 配下のオブジェクトを含めてのアクセス権設定時のオブジェクトの最大数（閾値）を取得する
     */
    HttpService.prototype.getThresholdForSetACL = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getThresholdForSetACL;
        return this.post(url);
    };
    /**
     * 印刷用に文書のセクションPDFをサーバー一時フォルダに書き出す。。
     * セクションデータIDを戻り値として返却する。
     * プロパティファイルに記載されている出力先をベースとして、+セッションID\セクションデータIDというパスを生成する。
     * @param sectionVo 詳細を取得したいセクションVO
     * @param viewerId ビューアを一意に特定する値
     * @param versionId 版ID（nullの場合は最新版）
     */
    HttpService.prototype.getSectionDetailForPrint = function (sectionVo, viewerId, versionId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getSectionDetailForPrint;
        var body = {
            section: _server_vo_server_section_model_vo__WEBPACK_IMPORTED_MODULE_19__["ServerSectionModelVo"].convert(sectionVo),
            viewerId: viewerId,
            versionId: versionId
        };
        return this.postResponseTypeText(url, body);
    };
    /**
     *
     * 操作ログを出力します。
     * 実際の操作ログにはログインユーザー名、IPアドレス、日時、操作IDを付加して出力します。
     * 例：[INFO]: ,"Admin","133.139.149.54","2011/04/20 10:48:49","10039","セクションをダウンロードしました{=messageKeyを元にリソースから取得した文章+
     * messageContents}", "2003_B5縦{=objectName}","_96700002_3_96700002_6{=objectId}"
     * @param messageKey 操作ログメッセージのキー ※OperationLog_*.properties参照
     * @param messageContents 操作ログメッセージに埋め込む文字列（先頭から埋め込む。数が合わない場合はエラーにせず埋められるところまで埋める。）
     * @param objectName 対象のオブジェクト名
     * @param objectId 対象のオブジェクトID
     */
    HttpService.prototype.outOperationLog = function (messageKey, messageContents, objectName, objectId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].outOperationLog;
        var body = {
            messageKey: messageKey,
            messageContents: messageContents,
            objectName: objectName,
            objectId: objectId
        };
        return this.post(url, body);
    };
    /**
     * サブデータを差し替える。
     * @param documentVo 変更したい文書（cabIdとidが必要。）
     * @param sectionNo 差し替え対象のセクションNo
     * @param rendition サブデータの種類（SectionVOの定数を使用）
     * @param viewerId ビューアID
     * @param fileName サブデータのファイル名
     */
    HttpService.prototype.setSubData = function (documentVo, sectionNo, rendition, viewerId, fileName) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].setSubData;
        var body = {
            documentVo: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo,
            rendition: rendition,
            viewerId: viewerId,
            fileName: fileName
        };
        return this.post(url, body);
    };
    /**
     * 指定セクションに付箋をつける
     * @param documentVo 文書を指定する
     * @param tag [in]対象セクションを指定。以下のプロパティを利用する。
     *            sectionNo:セクションNoを指定。
     *            1～最大No（既存の最後のセクション番号）以外が指定された場合はエラーとする。
     *            tagColor:該当セクションの付箋色を指定
     *            tagText: 無視される
     */
    HttpService.prototype.makeTag = function (documentVo, tag) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].makeTag;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            tag: _server_vo_server_tag_model_vo__WEBPACK_IMPORTED_MODULE_22__["ServerTagModelVo"].convert(tag)
        };
        return this.post(url, body);
    };
    /**
     * 指定セクションのセクションの付箋情報(色/コメント)を登録・更新する。
     * connectObject後、disconnectObjectの前に呼び出す。
     * @param documentVo 文書を指定する
     * @param tag セクションの付箋オブジェクトを指定する。
     *            指定可能のデータ
     *            sectionNo セクション番号を指定。
     *            tagColor 付箋色の指定
     *            tagText「,」を含まれない付箋コメントの指定。ただし、tagColorがnullの場合、値指定がnullでないとエラーとする。
     */
    HttpService.prototype.updateTag = function (documentVo, tag) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].updateTag;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            tag: _server_vo_server_tag_model_vo__WEBPACK_IMPORTED_MODULE_22__["ServerTagModelVo"].convert(tag)
        };
        return this.post(url, body);
    };
    /**
     * 指定セクションのセクションの付箋情報(色/コメント)を削除する。
     * 更新モードでなくても実行可能。更新は後勝ち。
     * @param documentVo 文書を指定する
     * @param sectionNo 対象のセクションNoを指定する
     */
    HttpService.prototype.deleteTag = function (documentVo, sectionNo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].deleteTag;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo
        };
        return this.post(url, body);
    };
    /**
     * 指定セクションの付箋情報(色/コメント)を編集する。
     * 更新モード中に使用する。checkoutDocument後、checkinDocumentの前に呼び出す。
     * @param documentVo 文書を指定する
     * @param tag セクションの付箋オブジェクトを指定する。
     *            指定可能のデータ
     *            sectionNo　セクション番号を指定。
     *            tagColor 付箋色の指定 tagText
     *            「,」を含まない付箋コメントの指定。ただし、tagColorがnullの場合、値指定がnullでないとエラーとする。
     */
    HttpService.prototype.editTag = function (documentVo, tag) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].editTag;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            tag: _server_vo_server_tag_model_vo__WEBPACK_IMPORTED_MODULE_22__["ServerTagModelVo"].convert(tag)
        };
        return this.post(url, body);
    };
    /**
     * 更新モード中の指定セクションの付箋情報(色/コメント)を削除する。
     * 更新モード中に使用する。checkoutDocument後、checkinDocumentの前に呼び出す。
     * @param documentVo 文書を指定する
     * @param sectionNo 対象のセクションNoを指定する
     */
    HttpService.prototype.clearTag = function (documentVo, sectionNo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].clearTag;
        var body = {
            document: _server_vo_server_document_vo__WEBPACK_IMPORTED_MODULE_11__["ServerDocumentVo"].convert(documentVo),
            sectionNo: sectionNo
        };
        return this.post(url, body);
    };
    /**
     *  プロファイルに検索条件を保存する
     * @param searchConditionVo 検索条件
     */
    HttpService.prototype.saveProfileSearchCondition = function (searchConditionVo) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].saveProfileSearchCondition;
        var body = _server_vo_server_search_condition_model_vo__WEBPACK_IMPORTED_MODULE_18__["ServerSearchConditionModelVo"].convert(searchConditionVo);
        return this.post(url, body);
    };
    /**
     * プロファイルから検索条件取得（存在しなければnullを返す）
     */
    HttpService.prototype.getProfileSearchCondition = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getProfileSearchCondition;
        return this.post(url);
    };
    /**
     * ツールバーのプロファイルを削除する。
     */
    HttpService.prototype.deleteProfileSearchCondition = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].deleteProfileSearchCondition;
        return this.post(url);
    };
    /**
     * 簡易ビューアのプロファイルを取得する。
     * 該当するプロファイルが存在しなければnullを返す。
     */
    HttpService.prototype.getProfileQuickViewer = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getProfileQuickViewer;
        return this.post(url);
    };
    /**
     * 簡易ビューアのプロファイルを保存する。
     * @param profileQuickViewerDatas データエントリと値のペアー。値は数値でも、文字列型でやり取りとする。
     */
    HttpService.prototype.saveProfileQuickViewer = function (profileQuickViewerDatas) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].saveProfileQuickViewer;
        var body = {
            quickViewerData: _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].convertToMapEntryArray(profileQuickViewerDatas)
        };
        return this.post(url, body);
    };
    /**
     * 開発環境にて、セッション情報に必要な属性を追加する。
     */
    HttpService.prototype.updateSessionAttribute = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].updateSessionAttribute;
        return this.post(url);
    };
    //
    //  ユーティリティ
    //
    /**
     * ソートを表す文字列を生成する
     * @param sortProp ソート対象列名
     * @param descend 降順ならtrueを、昇順ならfalseを指定する
     */
    HttpService.prototype.makeSortString = function (sortProp, descend) {
        var descendString = descend ? '1' : '0';
        return sortProp ? sortProp + ',' + descendString : null;
    };
    /**
     * クエリストリングを作成する
     *
     * パラメータ：{name1: value1, name2: value2}に対して
     * ?name1=value1&name2=value2
     * を返す。
     *
     * パラメータが存在しない場合は空文字列を返す。
     *
     * @param params パラメータのオブジェクト
     */
    HttpService.prototype.makeQueryString = function (params) {
        var workParams = [];
        for (var name_1 in params) {
            if (params[name_1]) {
                var param = encode(name_1) + '=' + encode(params[name_1]);
                workParams.push(param);
            }
        }
        var ret = workParams.join('&');
        return ret ? '?' + ret : '';
    };
    //
    // private
    //
    /**
     * コネクト
     * UA/UDにて認証を行い、サーバへ接続する。
     * @param viewerId ビューID
     */
    HttpService.prototype.connectServerInner = function (viewerId) {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].connectServer;
        var body = {
            viewerId: viewerId
        };
        return this.post(url, body);
    };
    /**
     * サーバー情報を取得する。
     */
    HttpService.prototype.getServerInfoInner = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getServerInfo;
        return this.post(url).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) { return _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].create(_models_server_info__WEBPACK_IMPORTED_MODULE_5__["ServerInfo"], response.serverInfo); }));
    };
    /**
     * クライアント情報を取得する。
     */
    HttpService.prototype.getClientInfoInner = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getClientInfo;
        return this.post(url).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) { return _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].createClientInfo(response.clientInfo); }));
    };
    /**
     * ログイン情報を取得する。
     */
    HttpService.prototype.getLoginInfoInner = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getLoginInfo;
        return this.post(url).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) { return _http_map_util__WEBPACK_IMPORTED_MODULE_31__["MapUtil"].create(_models_login_info__WEBPACK_IMPORTED_MODULE_4__["LoginInfo"], response.info); }));
    };
    /**
     * 用語リストを取得する。
     */
    HttpService.prototype.getWordingInner = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getWording;
        return this.post(url);
    };
    /**
     * クライアントのログレベルを取得する。
     */
    HttpService.prototype.getClientLogLevelInner = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getClientLogLevel;
        return this.postResponseTypeText(url);
    };
    /**
     * キャビネットへ接続しているかどうかをチェックする。
     */
    HttpService.prototype.getDomainListInner = function () {
        var url = _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].getDomainList;
        return this.post(url);
    };
    /**
     * HTTPのpostメソッドを発行する
     * @param url
     * @param body
     */
    HttpService.prototype.post = function (url, body) {
        var options = this.getHttpOptions();
        var fullUrl = this.makeUrl(url);
        return this.http.post(fullUrl, body, options);
    };
    /**
     * HTTPのpostメソッドを発行する（レスポンスがテキスト形式のAPIにて使用）
     * @param url
     * @param body
     */
    HttpService.prototype.postResponseTypeText = function (url, body) {
        var options = this.getHttpOptionsResponseTypeText();
        var fullUrl = this.makeUrl(url);
        return this.http.post(fullUrl, body, options);
    };
    /**
     * HttpClientに渡すオプションを生成する
     */
    HttpService.prototype.getHttpOptions = function () {
        var accessToken = localStorage.getItem(_storage_key__WEBPACK_IMPORTED_MODULE_26__["StorageKey"].token);
        var authToken = 'Basic ' + btoa('accesstoken:' + accessToken);
        return {
            headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Accept: 'application/json',
                Authorization: authToken
            })
        };
    };
    /**
     * HttpClientに渡すオプションを生成する（レスポンスがテキスト形式のAPIにて使用）
     */
    HttpService.prototype.getHttpOptionsResponseTypeText = function () {
        var accessToken = localStorage.getItem(_storage_key__WEBPACK_IMPORTED_MODULE_26__["StorageKey"].token);
        var authToken = 'Basic ' + btoa('accesstoken:' + accessToken);
        var options = {
            headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Accept: 'text/plain',
                Authorization: authToken
            })
        };
        // オブジェクト生成時に追加しようとすると互換性エラーが発生するため、後から追加
        options['responseType'] = 'text';
        return options;
    };
    /**
     * 認証API用のHttpClientに渡すオプションを生成する
     */
    HttpService.prototype.getAuthenticationHttpOptions = function () {
        return {
            headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]({
                'Content-Type': 'application/x-www-form-urlencoded',
                Accept: 'application/json'
            })
        };
    };
    /**
     * URLを生成する
     * @param tail URLの末尾部分
     */
    HttpService.prototype.makeUrl = function (tail) {
        return _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].host + _url_config__WEBPACK_IMPORTED_MODULE_32__["urlConfig"].path + tail;
    };
    HttpService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], HttpService);
    return HttpService;
}());



/***/ }),

/***/ "./src/app/core/services/http/cookie-interceptor.ts":
/*!**********************************************************!*\
  !*** ./src/app/core/services/http/cookie-interceptor.ts ***!
  \**********************************************************/
/*! exports provided: CookieInterceptor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CookieInterceptor", function() { return CookieInterceptor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _url_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../url.config */ "./src/app/core/services/url.config.ts");



/**
 * HttpリクエストにCookieを付与する
 */
var CookieInterceptor = /** @class */ (function () {
    function CookieInterceptor() {
    }
    CookieInterceptor.prototype.intercept = function (request, next) {
        // updateSessionAttributeにのみCookieを乗せる
        if (request.url.indexOf(_url_config__WEBPACK_IMPORTED_MODULE_2__["urlConfig"].updateSessionAttribute) >= 0) {
            request = request.clone({
                withCredentials: true
            });
        }
        return next.handle(request);
    };
    CookieInterceptor = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
    ], CookieInterceptor);
    return CookieInterceptor;
}());



/***/ }),

/***/ "./src/app/core/services/http/date-converter.ts":
/*!******************************************************!*\
  !*** ./src/app/core/services/http/date-converter.ts ***!
  \******************************************************/
/*! exports provided: DateConverter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateConverter", function() { return DateConverter; });
/**
 * numberとDateの変換を行います
 */
var DateConverter = /** @class */ (function () {
    function DateConverter(target) {
        this.target = target;
    }
    /**
     * オブジェクトのプロパティのうち、配列形式のものについて、要素すべてを変換する便利関数
     * @param target VOの配列型のプロパティを持つオブジェクト
     * @example 以下の場合propA, propBの要素が変換対象
     *
     * target  { propA: object[], propB: object[], propC: string }
     */
    DateConverter.numberToDateForArrayProps = function (target) {
        DateConverter.convertArrayProps(target, DateConverter.Arrays.numberToDate);
        return target;
    };
    /**
     * オブジェクトのプロパティのうち、配列形式のものについて、要素すべてを変換する便利関数
     * @param target VOの配列型のプロパティを持つオブジェクト
     * @example 以下の場合propA, propBの要素が変換対象
     *
     * target  { propA: object[], propB: object[], propC: string }
     */
    DateConverter.dateToNumberForArrayProps = function (target) {
        DateConverter.convertArrayProps(target, DateConverter.Arrays.dateToNumber);
        return target;
    };
    DateConverter.convertArrayProps = function (target, converter) {
        for (var _i = 0, _a = Object.keys(target); _i < _a.length; _i++) {
            var propName = _a[_i];
            var prop = target[propName];
            if (Array.isArray(prop)) {
                converter(prop);
            }
        }
        return target;
    };
    /**
     * VOのプロパティをnumberからDateに変換します
     *
     * numberは
     * 1970年1月1日0時0分0秒(UTC)を起点とした経過ミリ秒
     */
    DateConverter.prototype.numberToDate = function () {
        this.parseVO(this.target, this.toDate.bind(this));
        return this.target;
    };
    /**
     * VOのプロパティをDateからnumberに変換します
     *
     * numberは
     * 1970年1月1日0時0分0秒(UTC)を起点とした経過ミリ秒
     */
    DateConverter.prototype.dateToNumber = function () {
        this.parseVO(this.target, this.toNumber.bind(this));
        return this.target;
    };
    DateConverter.prototype.toDate = function (vo, propName) {
        if (this.datePropsContains(propName)) {
            var asNumber = vo[propName];
            // 念のため numberかどうかはチェック
            if (typeof asNumber === 'number') {
                vo[propName] = new Date(asNumber);
            }
        }
    };
    DateConverter.prototype.toNumber = function (vo, propName) {
        var asDate = vo[propName];
        // JSONからparseされたオブジェクトのメンバーでも、Dateへの変換で new Date() してるはずなのでinstanceof Dateで判定可能
        if (asDate instanceof Date) {
            vo[propName] = asDate.getTime();
        }
    };
    DateConverter.prototype.datePropsContains = function (propName) {
        return DateConverter.DATE_PROPS.some(function (dateProp) { return propName === dateProp; });
    };
    /**
     * VOのプロパティにcallbackを適用する。プロパティが、特定のVOの配列であれば その要素(VO)にも
     * @param vo json から parseされてできたVOオブジェクトも考慮に入れる
     * @param callback
     */
    DateConverter.prototype.parseVO = function (vo, callback) {
        var _loop_1 = function (propName) {
            var value = vo[propName];
            if (value == null) {
                return "continue";
            }
            // 特定の配列プロパティなら要素全てparseVOします
            if (Array.isArray(value) && DateConverter.ARRAY_PROPS.some(function (arrayProp) { return propName === arrayProp; })) {
                for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                    var element = value_1[_i];
                    this_1.parseVO(element, callback);
                }
            }
            else {
                callback(vo, propName);
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = Object.keys(vo); _i < _a.length; _i++) {
            var propName = _a[_i];
            _loop_1(propName);
        }
    };
    /**
     * 配列を扱う便利関数群
     */
    DateConverter.Arrays = /** @class */ (function () {
        function class_1() {
        }
        /**
         * VOのプロパティをnumberからDateに変換します
         * @param array VO配列
         */
        class_1.numberToDate = function (array) {
            for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                var vo = array_1[_i];
                new DateConverter(vo).numberToDate();
            }
            return array;
        };
        /**
         * VOのプロパティをDateからnumberに変換します
         * @param array VO配列
         */
        class_1.dateToNumber = function (array) {
            for (var _i = 0, array_2 = array; _i < array_2.length; _i++) {
                var vo = array_2[_i];
                new DateConverter(vo).dateToNumber();
            }
            return array;
        };
        return class_1;
    }());
    /**
     * voフォルダに属するモデルクラスの全てのDateプロパティ名
     *
     * 変換すべきプロパティ(number型)を見つけるために Date型のプロパティ名を配列として持っています
     *
     * JSONをparseしてできたオブジェクトはinstanceofでのVOクラスの判定ができないので、プロパティ名のみでの判定になります
     *
     * (VOにDate型プロパティを新たに追加する場合には名前が重複しないように注意してください)
     *
     * 既知のVO以外のオブジェクトを渡すと、想定外のプロパティが変換されてしまう可能性があります
     */
    DateConverter.DATE_PROPS = [
        // VersionVO
        'checkinDate',
        // Sys0BaseVO
        'createDate',
        // SearchConditionItemVO
        'dateValueFrom',
        'dateValueTo',
        // DocumentVO
        'entryDate',
        'lastAccessDate',
        'lastUpdateDate',
        'retensionDate',
        'userDate1',
        'userDate2',
        'userDate3',
        'userDate4',
        'userDate5',
        // WorkflowLog
        'updateDate'
    ];
    /**
     * Date型のプロパティ名を持つVOの配列型のプロパティ名
     *
     * VOのプロパティをなめていったときに要素もパースするかどうかの判定に使います
     *
     * DocumentVO.tagListのように、Date型プロパティを持たないTagVOのようなVOの配列プロパティは、掘り下げる必要がないため、ここに列挙しません
     */
    DateConverter.ARRAY_PROPS = [
        'children',
        'items' // SearchConditionVO
    ];
    return DateConverter;
}());



/***/ }),

/***/ "./src/app/core/services/http/map-entry.ts":
/*!*************************************************!*\
  !*** ./src/app/core/services/http/map-entry.ts ***!
  \*************************************************/
/*! exports provided: MapEntry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapEntry", function() { return MapEntry; });
/**
 * Java側(サーバー側)の APIの Map<String, T> は このオブジェクトの配列の形でJSONにしてやりとりします
 */
var MapEntry = /** @class */ (function () {
    function MapEntry() {
    }
    return MapEntry;
}());



/***/ }),

/***/ "./src/app/core/services/http/map-util.ts":
/*!************************************************!*\
  !*** ./src/app/core/services/http/map-util.ts ***!
  \************************************************/
/*! exports provided: MapUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapUtil", function() { return MapUtil; });
/* harmony import */ var _models_client_info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../models/client-info */ "./src/app/core/models/client-info.ts");
/* harmony import */ var _map_entry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map-entry */ "./src/app/core/services/http/map-entry.ts");


/**
 * サーバーから得た値からクライアントのモデルをに変換します
 */
var MapUtil = /** @class */ (function () {
    function MapUtil() {
    }
    MapUtil.createClientInfo = function (array) {
        var METHOD = 'createClientInfo';
        var info = new _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"]();
        // ClientInfoのMapのキーとClientInfoのプロパティ名は同じではないので、(一部キーに '&' が含まれる) 一つ一つキーを調べて値を入れる
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var e = array_1[_i];
            if (e.key === _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"].Key.MAIN_DND_PATH) {
                info.mainDnDPath = e.value;
            }
            else if (e.key === _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"].Key.MAIN_DND_STATUS) {
                info.mainDnDStatus = e.value;
            }
            else if (e.key === _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"].Key.VIEWER_DND_PATH) {
                info.viewerDnDPath = e.value;
            }
            else if (e.key === _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"].Key.VIEWER_DND_STATUS) {
                info.viewerDnDStatus = e.value;
            }
            else if (e.key === _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"].Key.VIEWER_DND_DISABLE_PATH) {
                info.viewerDnDDisablePath = e.value;
            }
            else if (e.key === _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"].Key.SEARCH_MAX_COUNT) {
                info.searchMaxCount = e.value;
            }
            else if (e.key === _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"].Key.TRASH_MAX_COUNT) {
                info.trashMaxCount = e.value;
            }
            else if (e.key === _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"].Key.TIMESTAMP_ON) {
                info.timestampOn = e.value;
            }
            else if (e.key === _models_client_info__WEBPACK_IMPORTED_MODULE_0__["ClientInfo"].Key.TIMESTAMP_TOTAL_TRADE_PRICE_DISPLAY_NAME) {
                info.timestampTotalTradePriceDisplayName = e.value;
            }
            else {
                // throw new ApplicationError(`[${METHOD}] unknown property ${e}`);
            }
        }
        return info;
    };
    /**
     * MapEntryのkey文字列がプロパティ名、valueがその値、であるオブジェクトを作ります。メンバー数はMapEntry配列の要素数と同じになります。
     *
     * @param ctor 生成するオブジェクトのコンストラクタ関数
     * @param props Java層で Map<String, V>で表現されているものを /rpc経由でJSONで受けたもの。オブジェクトのプロパティになります
     */
    MapUtil.create = function (ctor, props) {
        var object = new ctor();
        for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
            var e = props_1[_i];
            object[e.key] = e.value;
        }
        return object;
    };
    /**
     * MapをMapEntry[]に変換します
     * @param map
     */
    MapUtil.convertToMapEntryArray = function (map) {
        var entryArray = [];
        if (map.forEach) {
            map.forEach(function (value, key) {
                if (value != null) {
                    var entry = new _map_entry__WEBPACK_IMPORTED_MODULE_1__["MapEntry"]();
                    entry.key = key;
                    entry.value = value;
                    entryArray.push(entry);
                    //        entryArray.push({ key, value });
                }
            });
        }
        else {
            var entry = new _map_entry__WEBPACK_IMPORTED_MODULE_1__["MapEntry"]();
            for (var _i = 0, _a = Object.getOwnPropertyNames(map); _i < _a.length; _i++) {
                var key = _a[_i];
                entry.key = key;
                entry.value = map[key];
                entryArray.push(entry);
            }
        }
        return entryArray;
    };
    /**
     * Mapの配列用の便利関数
     * @param mapList
     */
    MapUtil.convertToArryaOfMapEntryArray = function (mapList) {
        var arrayOfMapEntryArray = [];
        for (var _i = 0, mapList_1 = mapList; _i < mapList_1.length; _i++) {
            var map = mapList_1[_i];
            arrayOfMapEntryArray.push(MapUtil.convertToMapEntryArray(map));
        }
        return arrayOfMapEntryArray;
    };
    return MapUtil;
}());



/***/ }),

/***/ "./src/app/core/services/http/vo-converter.ts":
/*!****************************************************!*\
  !*** ./src/app/core/services/http/vo-converter.ts ***!
  \****************************************************/
/*! exports provided: VoConverter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VoConverter", function() { return VoConverter; });
/**
 * VOクラスの変換
 */
var VoConverter = /** @class */ (function () {
    function VoConverter() {
    }
    /**
     * VO型のプロパティを、サーバ側のVOと同一プロパティに変換する
     * @param target VOクラスのプロパティを保持している変換対象のVO
     * @param castPair VO型のプロパティの型とtypeGuardのセット{cast, serverVo}
     * @param keys  変換先VOクラスのプロパティリスト
     */
    VoConverter.convertVoProperties = function (target, castPair, keys) {
        var _loop_1 = function (key) {
            if (Array.isArray(target[key])) {
                // リストの場合
                var conv_1 = castPair.find(function (value) {
                    return value.cast(target[key][0]);
                });
                if (conv_1 != null) {
                    // XxxVO[]の場合
                    target[key] = target[key].map(function (obj) {
                        return conv_1.serverVo.convert(obj);
                    });
                }
            }
            else if (typeof target[key] === 'object') {
                // オブジェクトの場合
                var conv = castPair.find(function (value) {
                    return value.cast(target[key]);
                });
                if (conv != null) {
                    // XxxVOの場合
                    target[key] = conv.serverVo.convert(target[key]);
                }
            }
        };
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            _loop_1(key);
        }
        return target;
    };
    return VoConverter;
}());



/***/ }),

/***/ "./src/app/core/services/locator-service-factory.ts":
/*!**********************************************************!*\
  !*** ./src/app/core/services/locator-service-factory.ts ***!
  \**********************************************************/
/*! exports provided: locatorServiceFactory, setLocatorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "locatorServiceFactory", function() { return locatorServiceFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLocatorService", function() { return setLocatorService; });
/* harmony import */ var _utils_injector_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/injector-provider */ "./src/app/core/utils/injector-provider.ts");

/**
 * 現在のlocator serviceインスタンス
 */
var locatorService;
/**
 * locator serviceを返すfactory
 */
function locatorServiceFactory() {
    return locatorService;
}
/**
 * 現在のlocator serviceのクラスを登録する
 * @param serviceType locator serviceのクラス
 */
function setLocatorService(serviceType) {
    locatorService = _utils_injector_provider__WEBPACK_IMPORTED_MODULE_0__["InjectorProvider"].get().get(serviceType);
}


/***/ }),

/***/ "./src/app/core/services/logger.service.ts":
/*!*************************************************!*\
  !*** ./src/app/core/services/logger.service.ts ***!
  \*************************************************/
/*! exports provided: Logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/* harmony import */ var _http_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./http.service */ "./src/app/core/services/http.service.ts");





/**
 * コンソールとサーバーの「クライアントログ」に出力します. 製品版ではコンソールには出力しません
 *
 * @example
 * constructor(private logger: Logger) {}
 *
 * @example
 * this.logger.info('X Component initialized.');
 *
 */
var Logger = /** @class */ (function () {
    function Logger(httpService) {
        this.httpService = httpService;
        this.logLevel = Logger_1.LEVEL_FATAL;
    }
    Logger_1 = Logger;
    Object.defineProperty(Logger.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        set: function (number) {
            this.info =
                !_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production && number >= Logger_1.LEVEL_INFO
                    ? (function () {
                        var timestamp = function () { };
                        timestamp.toString = function () {
                            return Logger_1.now();
                        };
                        return console.log.bind(console, '%s', timestamp, '-');
                    })()
                    : function () { };
            this.warn =
                !_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production && number >= Logger_1.LEVEL_WARN
                    ? (function () {
                        var timestamp = function () { };
                        timestamp.toString = function () {
                            return Logger_1.now();
                        };
                        return console.warn.bind(console, '%s', timestamp, '-');
                    })()
                    : function () { };
            this._logLevel = number;
        },
        enumerable: true,
        configurable: true
    });
    Logger.now = function () {
        return Logger_1.datePipe.transform(Date.now(), Logger_1.dateFormat) || '';
    };
    /**
     * サーバーの「クライアントログ」にメッセージを書き込みます。開発時にのみコンソールにも出力しクライアント時刻を表示します
     *
     * 制限: コンソール出力時 ファイル名・行数はこのファイルのconsolo.errorを呼ぶところになります。
     * 　　　出力はJSON.stringfy()したものとなります。
     * @param args
     */
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var message = JSON.stringify(args);
        if (!_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
            console.error.call(console, Logger_1.now() + ' -', message); // このファイルとこの行番号が出る
        }
        this.outClientLog(message);
    };
    /**
     * infoログを出力可能かどうかを表します。
     *
     * @return true 出力可能 false 出力不可
     */
    Logger.prototype.isDebug = function () {
        return this.canWriteLog(Logger_1.LEVEL_DEBUG);
    };
    /**
     * infoログを出力可能かどうかを表します。
     *
     * @return true 出力可能 false 出力不可
     */
    Logger.prototype.isInfo = function () {
        return this.canWriteLog(Logger_1.LEVEL_INFO);
    };
    /**
     * warnログを出力可能かどうかを表します。
     *
     * @return true 出力可能 false 出力不可
     */
    Logger.prototype.isWarn = function () {
        return this.canWriteLog(Logger_1.LEVEL_WARN);
    };
    /**
     * errorログを出力可能かどうかを表します。
     *
     * @return true 出力可能 false 出力不可
     */
    Logger.prototype.isError = function () {
        return this.canWriteLog(Logger_1.LEVEL_ERROR);
    };
    /**
     * errorログを出力可能かどうかを表します。
     *
     * @return true 出力可能 false 出力不可
     */
    Logger.prototype.isFatal = function () {
        return this.canWriteLog(Logger_1.LEVEL_FATAL);
    };
    Logger.prototype.outClientLog = function (message) {
        this.httpService.outClientLog(this.logLevel, message);
    };
    Logger.prototype.canWriteLog = function (level) {
        return level <= this.logLevel;
    };
    var Logger_1;
    /**
     * LEVEL FATAL
     */
    Logger.LEVEL_FATAL = 0;
    /**
     * LEVEL ERROR
     */
    Logger.LEVEL_ERROR = 1;
    /**
     * LEVEL WARN
     */
    Logger.LEVEL_WARN = 2;
    /**
     * LEVEL INFO
     */
    Logger.LEVEL_INFO = 3;
    /**
     * LEVEL DEBUG
     */
    Logger.LEVEL_DEBUG = 4;
    Logger.dateFormat = 'yyyy-MM-dd HH:mm:ss,SSS';
    Logger.datePipe = new _angular_common__WEBPACK_IMPORTED_MODULE_1__["DatePipe"]('en-US'); // en-US以外は使えない
    Logger = Logger_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_http_service__WEBPACK_IMPORTED_MODULE_4__["HttpService"]])
    ], Logger);
    return Logger;
}());



/***/ }),

/***/ "./src/app/core/services/login.service.ts":
/*!************************************************!*\
  !*** ./src/app/core/services/login.service.ts ***!
  \************************************************/
/*! exports provided: LoginService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginService", function() { return LoginService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _storage_key__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../storage-key */ "./src/app/core/storage-key.ts");
/* harmony import */ var _sys0_java_script_method_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sys0-java-script-method-type */ "./src/app/core/sys0-java-script-method-type.ts");
/* harmony import */ var _utils_external_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/external-interface */ "./src/app/core/utils/external-interface.ts");
/* harmony import */ var _http_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./http.service */ "./src/app/core/services/http.service.ts");
/* harmony import */ var _logger_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./logger.service */ "./src/app/core/services/logger.service.ts");










/**
 * このサービスは開発モード用です
 *
 * 認証を依頼するサービスです
 */
var LoginService = /** @class */ (function () {
    function LoginService(router, httpService, logger) {
        this.router = router;
        this.httpService = httpService;
        this.logger = logger;
        /**
         * ログインされた状態かどうかを保持します
         */
        this.isLoggedIn = false;
        /**
         * パラメータ
         */
        this.queryParams = undefined;
    }
    LoginService.prototype.getRedirectUrl = function () {
        return this.redirectUrl;
    };
    LoginService.prototype.setRedirectUrl = function (url) {
        this.logger.info("setRedirectUrl: " + url);
        this.redirectUrl = url;
    };
    /**
     * 認証APIをコールし認証結果を反映する
     *
     * @param accountName
     * @param password
     * @param domainName
     */
    LoginService.prototype.login = function (accountName, password, domainName) {
        var _this = this;
        // 成功時の処理
        var onSuccess = function (authResult) {
            _this.isLoggedIn = true;
            localStorage.setItem(_storage_key__WEBPACK_IMPORTED_MODULE_5__["StorageKey"].token, authResult.accessToken);
            // JS/ActiveX初期化（本番構成ではサーバーから降ってくるHTMLに呼び出しが含まれている想定なので、開発時のみ自力で呼び出している）
            _utils_external_interface__WEBPACK_IMPORTED_MODULE_7__["ExternalInterface"].call(_sys0_java_script_method_type__WEBPACK_IMPORTED_MODULE_6__["Sys0JavaScriptMethodType"].EXTERNAL_AUTO_EDIT_INIT, authResult.accessToken, '1', '104857600', '10485760');
            // 開発時のみ開発用APIを呼ぶ
            _this.httpService.updateSessionAttribute().subscribe();
        };
        // エラー時の処理
        var onError = function (e) {
            _this.logger.info(e);
            _this.isLoggedIn = false;
        };
        // booleanにする エラーのときは呼ばれない
        var switchToBooleanOnSuccess = function (value, index) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(true);
        };
        return this.httpService.authenticate(accountName, password, domainName).pipe(
        // doを使いたかったが警告が出るのでpipe & tap
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["tap"])(onSuccess, onError), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["switchMap"])(switchToBooleanOnSuccess));
    };
    /**
     * ユーザーが行きたいページに遷移する
     */
    LoginService.prototype.navigate = function () {
        this.logger.info("navigate to " + this.redirectUrl);
        if (this.redirectUrl != null) {
            this.router.navigate([this.redirectUrl], this.queryParams);
        }
    };
    LoginService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _http_service__WEBPACK_IMPORTED_MODULE_8__["HttpService"], _logger_service__WEBPACK_IMPORTED_MODULE_9__["Logger"]])
    ], LoginService);
    return LoginService;
}());



/***/ }),

/***/ "./src/app/core/services/message-dialog.service.ts":
/*!*********************************************************!*\
  !*** ./src/app/core/services/message-dialog.service.ts ***!
  \*********************************************************/
/*! exports provided: MessageDialogService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageDialogService", function() { return MessageDialogService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _ngrx_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
/* harmony import */ var _containers_dialogs_sys0_alert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../containers/dialogs/sys0-alert */ "./src/app/core/containers/dialogs/sys0-alert.ts");
/* harmony import */ var _containers_dialogs_system_close_dialog_system_close_dialog_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../containers/dialogs/system-close-dialog/system-close-dialog.component */ "./src/app/core/containers/dialogs/system-close-dialog/system-close-dialog.component.ts");
/* harmony import */ var _models_alert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/alert */ "./src/app/core/models/alert.ts");
/* harmony import */ var _models_cursor_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/cursor-css */ "./src/app/core/models/cursor-css.ts");
/* harmony import */ var _models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/sys0-alert-type */ "./src/app/core/models/sys0-alert-type.ts");
/* harmony import */ var _store_core_actions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../store/core.actions */ "./src/app/core/store/core.actions.ts");
/* harmony import */ var _store_core_selectors__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../store/core.selectors */ "./src/app/core/store/core.selectors.ts");
/* harmony import */ var _logger_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./logger.service */ "./src/app/core/services/logger.service.ts");
/* harmony import */ var _popup_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./popup.service */ "./src/app/core/services/popup.service.ts");
/* harmony import */ var _state_util_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./state-util.service */ "./src/app/core/services/state-util.service.ts");
/* harmony import */ var _wording_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./wording.service */ "./src/app/core/services/wording.service.ts");














var MessageDialogService = /** @class */ (function () {
    function MessageDialogService(wordingService, popupService, store, logger, stateUtilService) {
        this.wordingService = wordingService;
        this.popupService = popupService;
        this.store = store;
        this.logger = logger;
        this.stateUtilService = stateUtilService;
        // システムエラー表示画面のインスタンス
        this.sysCloseDialog = null;
    }
    MessageDialogService_1 = MessageDialogService;
    /**
     * ポップアップとエラー情報エリアにメッセージを表示します.
     *
     * @param messageKey Alertに表示するメッセージキーを指定します。
     * @param flags	Alertに表示するボタン群を指定します。
     * @param type Alertのエラーの種類を指定します。
     * @param closeHandler Alertを閉じた時に発生したCloseEventを取得するHandlerFunctionを指定します。
     * @param enableCloseOnEscKeyDownFlag Escキーで画面を閉じるかを指定します。
     *
     * @return メッセージ表示ダイアログのインスタンスを返します
     *
     * ★Stitch V1.3対応
     * 引数 textをmessageKeyに変更（本メソッド呼び出し時には用語解決されていないことを明示するため）
     * 引数 parentはAngularで不要のため、削除
     * 引数 defaultButtonFlag及び補正処理はAngularで不要のため、削除（詳細はAlertDialogComponentのクラスコメント参照）
     * 引数 enableCloseOnEscKeyDownFlagは設定した真偽値と逆の動きをするバグがあるので、修正
     */
    MessageDialogService.prototype.showErrorMessage = function (messageKey, flags, type, closeHandler, enableCloseOnEscKeyDownFlag) {
        if (flags === void 0) { flags = _models_alert__WEBPACK_IMPORTED_MODULE_5__["Alert"].OK; }
        if (type === void 0) { type = _models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_7__["Sys0AlertType"].TYPE_WARNING; }
        if (closeHandler === void 0) { closeHandler = null; }
        if (enableCloseOnEscKeyDownFlag === void 0) { enableCloseOnEscKeyDownFlag = true; }
        // 初期化処理の進捗ダイアログが表示中の場合
        if (this.getPreLoadingStatus()) {
            // 進捗ダイアログを閉じる
            this.store.dispatch(new _store_core_actions__WEBPACK_IMPORTED_MODULE_8__["HideInitializationPreLoader"]());
        }
        // ★Stitch v1.3対応
        // title, iconClassの発送を削除
        // これらは実質的にtypeによって定まっているため、
        // Sys0Alert(AlertDialogComponent)側に制御を集約する
        return _containers_dialogs_sys0_alert__WEBPACK_IMPORTED_MODULE_3__["Sys0Alert"].show(messageKey, flags, type, closeHandler, enableCloseOnEscKeyDownFlag);
    };
    /**
     * システムの操作が不能な場合のメッセージダイアログを表示します。
     *
     * アプリケーション停止アクションを発行し、stateのApplicationStopにtrueを設定します
     *
     * @param iconType エラーダイアログのアイコンタイプ。@see Sys0AlertType
     * @param msgKey メッセージのキーを指定します。
     * @param args 可変長引数。用語内の{0}, {1}, ... に置き換える数や文字列を指定
     * @return SystemCloseDialogのインスタンス
     *
     */
    MessageDialogService.prototype.showSystemCloseDialog = function (iconType, msgKey) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var _a;
        // 初期化処理の進捗ダイアログが表示中の場合
        if (this.getPreLoadingStatus()) {
            // 進捗ダイアログを閉じる
            this.store.dispatch(new _store_core_actions__WEBPACK_IMPORTED_MODULE_8__["HideInitializationPreLoader"]());
        }
        if (this.sysCloseDialog != null) {
            // 既に表示されている場合は表示しない。
            return null;
        }
        // アプリケーション停止 Actionを発行する
        this.store.dispatch(new _store_core_actions__WEBPACK_IMPORTED_MODULE_8__["ApplicationStop"]());
        // systemCloseDialogComponentを生成
        this.sysCloseDialog = this.popupService.createComponentInstance(_containers_dialogs_system_close_dialog_system_close_dialog_component__WEBPACK_IMPORTED_MODULE_4__["SystemCloseDialogComponent"]);
        if (this.sysCloseDialog == null) {
            return null;
        }
        // ワード取得が完了しているか判定
        if (!this.wordingService.hasWord()) {
            // 取得出来ていない場合は通信障害とする
            this.sysCloseDialog.instance.messageLabel = MessageDialogService_1.NO_MESSAGE_RESOURCE_ERROR;
        }
        else if (msgKey != null) {
            this.sysCloseDialog.instance.messageLabel = (_a = this.wordingService).get.apply(_a, [msgKey].concat(args));
        }
        this.sysCloseDialog.instance.iconType = iconType;
        this.popupService.addPopUp(this.sysCloseDialog);
        document.body.style.cursor = _models_cursor_css__WEBPACK_IMPORTED_MODULE_6__["CursorType"].AUTO;
        return this.sysCloseDialog;
    };
    /**
     * stateからpreLoading状態を取得します
     * @returns true:  初期化処理で進捗表示中
     */
    MessageDialogService.prototype.getPreLoadingStatus = function () {
        return this.stateUtilService.getCurrentState(_store_core_selectors__WEBPACK_IMPORTED_MODULE_9__["getApplicationInitializationPreLoading"]);
    };
    var MessageDialogService_1;
    /** 通信エラーメッセージ */
    MessageDialogService.NO_MESSAGE_RESOURCE_ERROR = '通信エラーが発生しました。\n画面を閉じて終了してください。';
    MessageDialogService = MessageDialogService_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_wording_service__WEBPACK_IMPORTED_MODULE_13__["WordingService"],
            _popup_service__WEBPACK_IMPORTED_MODULE_11__["PopupService"],
            _ngrx_store__WEBPACK_IMPORTED_MODULE_2__["Store"],
            _logger_service__WEBPACK_IMPORTED_MODULE_10__["Logger"],
            _state_util_service__WEBPACK_IMPORTED_MODULE_12__["StateUtilService"]])
    ], MessageDialogService);
    return MessageDialogService;
}());



/***/ }),

/***/ "./src/app/core/services/popup.service.ts":
/*!************************************************!*\
  !*** ./src/app/core/services/popup.service.ts ***!
  \************************************************/
/*! exports provided: PopupService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopupService", function() { return PopupService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _ngrx_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
/* harmony import */ var _store_core_actions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/core.actions */ "./src/app/core/store/core.actions.ts");




/**
 * ポップアップ画面の管理サービス
 * ポップアップの表示、ポップアップのインスタンス作成、インスタンスの破棄
 * 表示中ポップアップの管理を行います
 */
var PopupService = /** @class */ (function () {
    function PopupService(store) {
        this.store = store;
        // ダイアログの初回表示と最終クローズを検知するため、表示中のポップアップ画面をスタック配列形式で管理
        this.popups = new Array();
    }
    /**
     * ポップアップの表示はしません
     * 渡されたポップアップのインスタンスを作成します
     * @param componentClass インスタンスを作成するポップアップのクラス
     * @returns ポップアップのインスタンス
     */
    PopupService.prototype.createPopUp = function (componentClass) {
        if (!componentClass) {
            return null;
        }
        var componentRef = this.createComponentInstance(componentClass);
        if (!componentRef) {
            return null;
        }
        this.pushPopup(componentRef);
        return componentRef;
    };
    /**
     * ポップアップの表示まで行います
     * 引数のcomponentClassを渡した場合は、引数のインスタンスを作成し、ポップアップの表示をします
     * 引数のcomponentClassを渡さない場合は、最後にcreatePopup or addPopupされたポップアップを表示します
     * @param componentClass  (任意)表示するポップアップのクラス
     * @returns ポップアップのインスタンス
     */
    PopupService.prototype.showPopUp = function (componentClass) {
        var componentRef;
        if (componentClass) {
            componentRef = this.createComponentInstance(componentClass);
            if (!componentRef) {
                return null;
            }
            if (this.popups.length === 0) {
                // ポップアップ初回表示イベントを発行する
                this.store.dispatch(new _store_core_actions__WEBPACK_IMPORTED_MODULE_3__["OpenFirstPopup"](true));
            }
            this.pushPopup(componentRef);
        }
        else {
            if (this.popups.length > 0) {
                if (this.popups.length === 1) {
                    // ポップアップ初回表示イベントを発行する
                    this.store.dispatch(new _store_core_actions__WEBPACK_IMPORTED_MODULE_3__["OpenFirstPopup"](true));
                }
                componentRef = this.popups[this.popups.length - 1];
            }
            else {
                return null;
            }
        }
        // ポップアップ表示
        componentRef.instance.showDialog();
        return componentRef;
    };
    /**
     * 引数で渡されたポップアップのインスタンスを用いて、ポップアップの表示を行います
     * @param componentRef 表示するポップアップのインスタンス
     * @param isProgress 進捗ダイアログか否か
     */
    PopupService.prototype.addPopUp = function (componentRef, isProgress) {
        if (isProgress === void 0) { isProgress = false; }
        if (this.popups.length === 0) {
            // ポップアップ初回表示イベントを発行する
            this.store.dispatch(new _store_core_actions__WEBPACK_IMPORTED_MODULE_3__["OpenFirstPopup"](isProgress));
        }
        this.pushPopup(componentRef);
        // ポップアップを表示する
        componentRef.instance.showDialog();
    };
    /**
     * 現在表示中のポップアップのインスタンスを破棄する
     * 画面のクローズは行わないため、クローズは自身で行ってください
     * @param {boolean} destroyFlag クラスを削除するフラグ
     */
    PopupService.prototype.removePopUp = function (dialog, destroyFlag) {
        if (destroyFlag === void 0) { destroyFlag = true; }
        var popUpInfo = this.popPopup(dialog);
        if (popUpInfo) {
            if (destroyFlag) {
                popUpInfo.destroy();
            }
            if (this.popups.length === 0) {
                // 最後のポップアップを閉じた場合、ポップアップ非表示イベントを発行する
                this.store.dispatch(new _store_core_actions__WEBPACK_IMPORTED_MODULE_3__["CloseLastPopup"]());
            }
        }
    };
    /**
     * ★Stitch V1.3対応
     * destroyする対象のクラスを探す。
     * @param componentRef
     */
    PopupService.prototype.popPopup = function (dialog) {
        var _this = this;
        if (dialog == null) {
            return null;
        }
        var ret = null;
        this.popups.forEach(function (pop, index) {
            if (dialog instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentRef"]) {
                if (pop.instance === dialog.instance) {
                    _this.popups.splice(index, 1);
                    ret = pop;
                }
            }
            else {
                if (pop.instance === dialog) {
                    _this.popups.splice(index, 1);
                    ret = pop;
                }
            }
        });
        return ret;
    };
    /**
     * 現在表示中(※)のポップアップ画面インスタンスを返却する
     * ※最後にshowPopup, addPopup, CreatePopupされたインスタンス
     * @returns コンポーネントのインスタンスを返却、表示中コンポーネントが存在しない場合はnull
     */
    PopupService.prototype.getLastPopUp = function () {
        if (this.popups.length === 0) {
            return null;
        }
        else {
            return this.popups[this.popups.length - 1];
        }
    };
    /**
     * 渡されたコンポーネントクラスから、コンポーネントのインスタンスを作成する
     * @param component 作成するコンポーネント
     * @returns コンポーネントのインスタンス
     */
    PopupService.prototype.createComponentInstance = function (component) {
        if (!this.componentFactoryResolver || !this.viewContainerRef) {
            return null;
        }
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        var componentRef = this.viewContainerRef.createComponent(componentFactory);
        return componentRef;
    };
    /**
     * this.popupsにpushします。
     * すでに存在するポップアップはpushしません。
     * @param componentRef
     */
    PopupService.prototype.pushPopup = function (componentRef) {
        var exist = false;
        for (var _i = 0, _a = this.popups; _i < _a.length; _i++) {
            var ref = _a[_i];
            if (ref.instance.constructor === componentRef.instance.constructor) {
                exist = true;
                break;
            }
        }
        if (!exist) {
            this.popups.push(componentRef);
        }
    };
    PopupService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ngrx_store__WEBPACK_IMPORTED_MODULE_2__["Store"]])
    ], PopupService);
    return PopupService;
}());



/***/ }),

/***/ "./src/app/core/services/progress-manager.service.ts":
/*!***********************************************************!*\
  !*** ./src/app/core/services/progress-manager.service.ts ***!
  \***********************************************************/
/*! exports provided: ProgressManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgressManager", function() { return ProgressManager; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_components_progress_dialog_progress_dialog_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/components/progress-dialog/progress-dialog.component */ "./src/app/shared/components/progress-dialog/progress-dialog.component.ts");
/* harmony import */ var _models_cursor_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/cursor-css */ "./src/app/core/models/cursor-css.ts");
/* harmony import */ var _logger_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logger.service */ "./src/app/core/services/logger.service.ts");
/* harmony import */ var _popup_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./popup.service */ "./src/app/core/services/popup.service.ts");






/**
 * リモートオブジェクトに対応するプログレスダイアログを制御します。
 *
 * 内部ではただ一つのProgressDialogを保持します。
 * 内部にICancelProgressを実装するクラス(RpcCommandなど)の配列を保持してプログレス表示と関連付けています。
 *
 */
var ProgressManager = /** @class */ (function () {
    /**
     * コンストラクタです。
     *
     * @param {Logger} logger ログサービスです。
     * @param {PopupService} popup ポップアップサービスです。
     *
     */
    function ProgressManager(logger, popup) {
        this.logger = logger;
        this.popup = popup;
        /**
         * 半透明にするかどうか
         * trueであれば半透明。falseであれば透明。
         *
         * ★Stitch V1.3対応 blurは表示非表示の制御のみ行う。
         */
        this.blur = true;
        /**
         * コマンド
         */
        this.commands = [];
    }
    Object.defineProperty(ProgressManager.prototype, "dialog", {
        get: function () {
            if (!this._dialog) {
                this.initDialog();
            }
            return this._dialog;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * キャンセルボタン
     *
     * ICancelProgressのcancel関数を実行する
     */
    ProgressManager.prototype.onCancelProgress = function () {
        for (var i = this.commands.length - 1; i >= 0; i--) {
            this.commands[i].cancel();
        }
    };
    /**
     * コマンドクラスを追加してプログレスダイアログの表示をします。
     * commandにnullが指定されている場合は、カーソルをビジーに変更します。
     * プログレスダイアログが表示中の場合には、再表示をしません。
     *
     * @param command ICancelProgressインターフェイスを実装したクラスのインスタンスです。
     * 操作しているコマンドクラス。通常はRpcCommand
     * プログレスバーからのキャンセルをする場合は必須です。
     * @param cancelable キャンセル可能かどうかを表します。
     * @param allCount 実行合計数
     * @param objectName 実行しているアイテムの名前を指定します。
     * @param objectNameLabel プログレスバーのラベルを指定します。例）項目名：
     * @param progressMessageLabel 複数オブジェクト操作時に表示するメッセージを指定します。例）コピー中です...
     * @param progressCountLabel 複数オブジェクト操作時にプログレスの進捗具合を示すラベルを指定します。例）X件中Y件完了しました。
     * @param addCount 処理完了数
     * @param displayProgress メッセージラベル・進捗ラベル・実行アイテムラベル表示
     *
     */
    ProgressManager.prototype.addCommand = function (command, cancelable, allCount, objectName, objectNameLabel, progressMessageLabel, progressCountLabel, addCount, displayProgress) {
        if (addCount === void 0) { addCount = 0; }
        if (displayProgress === void 0) { displayProgress = false; }
        if (command != null) {
            this.commands.push(command);
        }
        else {
            document.body.style.cursor = _models_cursor_css__WEBPACK_IMPORTED_MODULE_3__["CursorType"].WAIT;
        }
        // 進捗中表示を使用するときだけ変更する。
        if (this.dialog.owner == null) {
            // ★Stitch V1.3対応 blurは表示非表示の制御のみ行う
            this.dialog.blur = displayProgress;
            // 親が指定されていない場合
            if (displayProgress) {
                // メッセージラベル・実行アイテムラベル・進捗ラベル表示
                this.dialog.setProgressCount(allCount, addCount);
                // メッセージラベル表示
                if (progressMessageLabel != null) {
                    this.dialog.showProgressMessageLabel = true;
                    this.dialog._progressMessageLabel = progressMessageLabel;
                }
                // 実行しているアイテムラベル表示
                if (objectNameLabel != null) {
                    this.dialog.showObjectNameLabel = true;
                    this.dialog.setObjectNameLabel(objectNameLabel, objectName || '');
                }
                // 進捗ラベル表示
                if (progressCountLabel != null) {
                    this.dialog.showProgressCountLabel = true;
                    this.dialog._progressCountLabel = progressCountLabel;
                }
                this.dialog.updateProgress(objectName || '', addCount);
                // キャンセルボタン
                this.dialog.cancelable = cancelable;
            }
            // true 不確定型のプログレス表示, false 確定型のプログレス表示
            this.dialog.indeterminate = allCount <= 1;
            // ダイアログ表示
            this.popup.addPopUp(this.componentRef, true);
        }
        else {
            this.logger.info('dialog.owner: ' + this._dialog.owner.constructor.name);
        }
    };
    /**
     * 膜だけを張ります。
     * 内部では、addCommandを呼び出しプログレスダイアログ非表示の状態でポップアップします。
     *
     * @param command コマンドクラスです。
     *
     */
    ProgressManager.prototype.transProgress = function (command) {
        if (command === void 0) { command = null; }
        this.addCommand(command, false, 0, null, null, null, null);
    };
    /**
     * 透明な膜とビジーカーソルを表示させます。
     * 内部では、addCommandを呼び出しプログレスダイアログ非表示の状態でポップアップします。
     * カーソルをビジーカーソルに変更します。
     *
     * @param command コマンドクラスです。
     *
     */
    ProgressManager.prototype.setTransProgressBusyCursor = function (command) {
        if (command === void 0) { command = null; }
        document.body.style.cursor = _models_cursor_css__WEBPACK_IMPORTED_MODULE_3__["CursorType"].WAIT;
        this.addCommand(command, false, 0, null, null, null, null);
    };
    /**
     * setTransProgressBusyCursorと対で呼び出します。
     * 表示した透明な膜と、ビジーカーソルを非表示にします。
     *
     * @param command コマンドクラスです。
     *
     */
    ProgressManager.prototype.removeTransProgressBusyCursor = function (command) {
        document.body.style.cursor = _models_cursor_css__WEBPACK_IMPORTED_MODULE_3__["CursorType"].AUTO;
        this.removeCommand(command);
    };
    /**
     * 複数オブジェクト操作時の進捗中表示の場合、プログレスバーを更新します。
     * addCommandでプログレスダイアログを表示後の場合のみ動作します。
     *
     * @param addCount 処理完了数です。
     * @param objectName 次に処理を実行するアイテムの名前を指定します。
     * @param command コマンドクラスです。
     */
    ProgressManager.prototype.updateProgress = function (addCount, objectName, command) {
        if (this.dialog != null) {
            this.dialog.updateProgress(objectName, addCount);
        }
        if (this.commands.length > 0) {
            // コマンドクラスを差し替えます
            this.commands[this.commands.length - 1] = command;
        }
        else {
            this.commands.push(command);
        }
    };
    /**
     * 登録されたコマンドクラスを消去してプログレスダイアログを非表示にします。
     * commandにnullが指定された場合には、ビジーカーソルを解除します。
     * コマンドクラスが残っている場合には、プログレスダイアログを非表示にしません。
     *
     * @param command 操作しているコマンドクラス。通常はRpcCommand
     * プログレスバーからのキャンセルをする場合は必須です。
     */
    ProgressManager.prototype.removeCommand = function (command) {
        if (command) {
            for (var i = this.commands.length - 1; i >= 0; i--) {
                if (this.commands[i] === command) {
                    this.commands.splice(i, 1);
                }
            }
        }
        else {
            document.body.style.cursor = _models_cursor_css__WEBPACK_IMPORTED_MODULE_3__["CursorType"].AUTO;
        }
        if (this.dialog != null && this.commands.length < 1) {
            if (this.dialog.cancelable) {
                this.dialog.cancelable = false;
            }
            // ダイアログ非表示
            this.dialog.closeDialog();
            this.popup.removePopUp(this._dialog, false);
            // this.popup.removePopUp(this._dialog);
            document.body.style.cursor = _models_cursor_css__WEBPACK_IMPORTED_MODULE_3__["CursorType"].AUTO;
        }
    };
    /**
     * 進捗中表示に登録しているコマンドの削除を行います。
     * removeCommandでコマンドクラスを消去できない場合に使用します。
     *
     * @param command 削除するコマンド
     *
     */
    ProgressManager.prototype.clearCommand = function (command) {
        for (var i = this.commands.length - 1; i >= 0; i--) {
            if (this.commands[i] === command) {
                this.commands.splice(i, 1);
            }
        }
    };
    /**
     * プログレスダイアログのインスタンス作成する
     */
    ProgressManager.prototype.initDialog = function () {
        var componentRef = this.popup.createComponentInstance(_shared_components_progress_dialog_progress_dialog_component__WEBPACK_IMPORTED_MODULE_2__["ProgressDialogComponent"]);
        if (componentRef == null) {
            this.logger.info('cannot create component instance');
        }
        else {
            this.componentRef = componentRef;
            this._dialog = this.componentRef.instance;
            // キャンセル押下イベント時処理設定
            this._dialog.cancelFunction = this.onCancelProgress.bind(this);
        }
    };
    ProgressManager = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_logger_service__WEBPACK_IMPORTED_MODULE_4__["Logger"], _popup_service__WEBPACK_IMPORTED_MODULE_5__["PopupService"]])
    ], ProgressManager);
    return ProgressManager;
}());



/***/ }),

/***/ "./src/app/core/services/routing-manage.service.ts":
/*!*********************************************************!*\
  !*** ./src/app/core/services/routing-manage.service.ts ***!
  \*********************************************************/
/*! exports provided: RoutingManageService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoutingManageService", function() { return RoutingManageService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var url_search_params_polyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url-search-params-polyfill */ "./node_modules/url-search-params-polyfill/index.js");
/* harmony import */ var url_search_params_polyfill__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(url_search_params_polyfill__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../app-routing.module */ "./src/app/app-routing.module.ts");








/**
 * routing設定を管理するサービスです
 */
var RoutingManageService = /** @class */ (function () {
    function RoutingManageService(location, router) {
        this.location = location;
        this.router = router;
    }
    /**
     * 現在のurlを元にroutingコンフィグをセットします
     */
    RoutingManageService.prototype.setConfigByUrl = function () {
        var url = this.location.path();
        var urlSplit = url.split('?');
        // /rsn/xxx?aaa=111&bbb=222 から  /xxx　部分だけ抜き出し
        var urlParam = urlSplit[0];
        // /rsn/xxx?aaa=111&bbb=222 から  getパラメータ部分だけ抜き出し
        var queryParams = new URLSearchParams(urlSplit.length === 1 ? '' : urlSplit[1]);
        var appId = queryParams.get('appId');
        if (!_environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].production && urlParam === '/login') {
            // 開発モード限定でloginの場合はログイン処理に任せて何もしない
        }
        else if (urlParam === '/DocViewer' || appId === 'Viewer') {
            // Viewer用のroutingConfigを設定する
            this.setConfigForViewer();
        }
        else {
            // main用のroutingConfigを設定する
            this.setConfigForMain();
        }
    };
    /**
     * main画面用のroutingコンフィグをセットします
     *
     * ダミー用のコンフィグはロードしません
     */
    RoutingManageService.prototype.setConfigForMain = function () {
        var config;
        // main用のroutingConfigを追加する
        if (_environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].production) {
            config = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1__(_app_routing_module__WEBPACK_IMPORTED_MODULE_7__["prodRoutes"]);
            _app_routing_module__WEBPACK_IMPORTED_MODULE_7__["prodMainRoutes"].forEach(function (route) { return config.push(route); });
        }
        else {
            config = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1__(_app_routing_module__WEBPACK_IMPORTED_MODULE_7__["devRoutes"]);
            _app_routing_module__WEBPACK_IMPORTED_MODULE_7__["devMainRoutes"].forEach(function (route) { return config.push(route); });
        }
        this.deleteDummyRouting(config);
        this.router.resetConfig(config);
    };
    /**
     * viewer画面用のroutingコンフィグをセットします
     *
     * ダミー用のコンフィグはロードしません
     */
    RoutingManageService.prototype.setConfigForViewer = function () {
        var config;
        // Viewer用のroutingConfigを追加する
        if (_environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].production) {
            config = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1__(_app_routing_module__WEBPACK_IMPORTED_MODULE_7__["prodRoutes"]);
            _app_routing_module__WEBPACK_IMPORTED_MODULE_7__["prodViewerRoutes"].forEach(function (route) { return config.push(route); });
        }
        else {
            config = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1__(_app_routing_module__WEBPACK_IMPORTED_MODULE_7__["devRoutes"]);
            _app_routing_module__WEBPACK_IMPORTED_MODULE_7__["devViewerRoutes"].forEach(function (route) { return config.push(route); });
        }
        this.deleteDummyRouting(config);
        this.router.resetConfig(config);
    };
    RoutingManageService.prototype.deleteDummyRouting = function (configs) {
        this.deleteRouting(configs, 'dummyMain');
        this.deleteRouting(configs, 'dummyViewer');
    };
    RoutingManageService.prototype.deleteRouting = function (configs, key) {
        var index = configs.findIndex(function (_a) {
            var path = _a.path;
            return path === key;
        });
        configs.splice(index, 1);
    };
    RoutingManageService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common__WEBPACK_IMPORTED_MODULE_3__["Location"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]])
    ], RoutingManageService);
    return RoutingManageService;
}());



/***/ }),

/***/ "./src/app/core/services/state-util.service.ts":
/*!*****************************************************!*\
  !*** ./src/app/core/services/state-util.service.ts ***!
  \*****************************************************/
/*! exports provided: StateUtilService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateUtilService", function() { return StateUtilService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _ngrx_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _application_error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../application-error */ "./src/app/core/application-error.ts");
/* harmony import */ var _logger_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./logger.service */ "./src/app/core/services/logger.service.ts");








/**
 * Stateに関するユーティリティサービス
 */
var StateUtilService = /** @class */ (function () {
    function StateUtilService(store, logger) {
        this.store = store;
        this.logger = logger;
    }
    StateUtilService_1 = StateUtilService;
    /**
     * 現在のStateのスナップショットを取得する
     * @param selector セレクタ
     * @returns セレクタによって取得したState断片のスナップショット
     */
    StateUtilService.prototype.getCurrentState = function (selector) {
        // stateに値が代入されたかどうかを判定するためのオブジェクト
        var unchangedMarker = {};
        // 戻り値になるstate。初期値としてunchangedMarkerへの参照を入れておく。
        // Stateをselectした結果がnullの場合を考えて、nullでの取得チェックではなく、参照でチェックすることにした。
        var state = unchangedMarker;
        // 同期的にStateを取得する
        // of関数はデフォルトで同期的取得であることが公式ドキュメントに記述されているのでofを使う
        // 引数のnullはダミーであり結果には入ってこない
        Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(null)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["withLatestFrom"])(this.store.pipe(Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_2__["select"])(selector))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (_a) {
            var __ = _a[0], s = _a[1];
            return s;
        }))
            .subscribe(function (s) { return (state = s); });
        // 取得値チェック
        if (state === unchangedMarker) {
            // ここに来るのは想定外の状態
            this.logger.error("[" + StateUtilService_1.className + "] Failed to get current state.");
            throw new _application_error__WEBPACK_IMPORTED_MODULE_6__["ApplicationError"]("[" + StateUtilService_1.className + "] Failed to get current state.");
        }
        // Stateを書き換えてしまう事故を防ぐためにコピーする
        return lodash__WEBPACK_IMPORTED_MODULE_3__["cloneDeep"](state);
    };
    var StateUtilService_1;
    StateUtilService.className = 'StateUtilService';
    StateUtilService = StateUtilService_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ngrx_store__WEBPACK_IMPORTED_MODULE_2__["Store"], _logger_service__WEBPACK_IMPORTED_MODULE_7__["Logger"]])
    ], StateUtilService);
    return StateUtilService;
}());



/***/ }),

/***/ "./src/app/core/services/url.config.ts":
/*!*********************************************!*\
  !*** ./src/app/core/services/url.config.ts ***!
  \*********************************************/
/*! exports provided: urlConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "urlConfig", function() { return urlConfig; });
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");

/**
 * URLに関する設定ファイル
 */
var urlConfig = {
    host: _environments_environment__WEBPACK_IMPORTED_MODULE_0__["environment"].apiOrigin || location.origin,
    baseHref: '/rsn',
    path: '/rsn/rpc',
    // workflow系URLは仮  workflowの新APIは次バージョンで実装します
    applyDocument: '/workflow/{id}/apply',
    approveDocument: ' /workflow/{id}/approve',
    createWorkflowTemplate: '/workflow/template',
    deleteWorkflowTemplate: '/workflow/template',
    disallowDocument: '/workflow/{id}/disallow',
    examineDocument: '/workflow/{id}/examine',
    // ★Stitch V1.3対応
    // ワークフロー機能は提供しない
    // getWorkflow: '/workflow',
    getWorkflowTemplate: '/workflow/template',
    getWorkflowTemplateList: '/workflow/template/list',
    sendWorkflowMail: '/workflow/{id}/email',
    updateWorkflowTemplate: '/workflow/template',
    withdrawDocument: '/workflow/{id}/withdraw',
    // 新API
    acquireOwnership: '/v2/acl/ownership/acquire',
    addWord: '/v2/wordBook/update',
    authenticate: '/v2/service/auth',
    bindDocuments: '/v2/document/bind',
    cancelExportCSVFile: '/v2/service/documents/csvFile/export/cancel',
    cancelExportDocuments: '/v2/service/documents/export/cancel',
    cancelExportSection: '/v2/service/section/export/cancel',
    cancelSearch: '/v2/search/cancel',
    checkExistLoginUser: '/v2/user/existence/get',
    clearTag: '/v2/section/updateMode/tag/clear',
    clearTrashAsync: '/v2/trash/empty/async',
    connectObject: '/v2/object/connect',
    connectServer: '/v2/service/connect',
    copy: '/v2/object/copy',
    copyFolderAsync: '/v2/folder/async/copy',
    createDocument: '/v2/document/create',
    createDocumentSubData: '/v2/document/subData/update',
    createFavorite: '/v2/favorite/create',
    createFavoriteCategory: '/v2/favorite/category/create',
    createFolder: '/v2/folder/create',
    createShortcut: '/v2/shortcut/create',
    declareAccessDocument: '/v2/document/access',
    deleteFavoriteObject: '/v2/favorite/delete',
    deleteObject: '/v2/object/delete',
    deleteProfileDisplayList: '/v2/user/profile/displayList/delete',
    deleteProfileSearchCondition: '/v2/search/profileCondition/delete',
    deleteSection: '/v2/section/delete',
    deleteTag: '/v2/section/tag/delete',
    deleteVersion: '/v2/document/version/delete',
    disconnectObject: '/v2/object/disconnect',
    divideDocument: '/v2/document/divide',
    documentUpdateEnd: '/v2/document/checkIn',
    documentUpdateStart: '/v2/document/checkOut',
    editDocumentDetail: '/v2/document/update',
    editTag: '/v2/section/updateMode/tag/edit',
    endRetrieve: '/v2/folder/resultSetId/release',
    eraseFolderAsync: '/v2/trash/folder/delete/async',
    eraseObject: '/v2/trash/object/delete',
    exportCSV: '/v2/service/documents/csvFile/export',
    exportDocuments: '/v2/service/documents/export',
    exportSection: '/v2/service/section/export',
    getAcl: '/v2/acl/get',
    getChildren: '/v2/folder/object/get',
    getClientInfo: '/v2/service/clientInfo/get',
    getClientLogLevel: '/v2/service/clientLogLevel/get',
    getConfig: '/v2/service/config/get',
    getDefaultFavorite: '/v2/favorite/default/get',
    getDocumentDetail: '/v2/document/get',
    getDocumentTypeDetail: '/v2/documentType/get',
    getDocumentTypeList: '/v2/documentType/list/get',
    getDocumentUserNumber: '/v2/document/userNumber/issue',
    getDomainList: '/v2/user/list/domain/get',
    getFavoriteCategoryDetail: '/v2/favorite/category/get',
    getFavoriteCategoryList: '/v2/favorite/category/list/get',
    getFavoriteDetail: '/v2/favorite/detail/get',
    getFavoriteList: '/v2/favorite/list/get',
    getFavoriteTarget: '/v2/favorite/target/get',
    getFolderDetail: '/v2/folder/detail/get',
    getFolderList: '/v2/folder/subFolderList/get',
    getFolderSize: '/v2/folder/size/get',
    getLoginInfo: '/v2/user/info/get',
    getObjectMobileUrl: '/v2/object/mobileUrl/get',
    getObjectUrl: '/v2/object/url/get',
    getProfileDisplayList: '/v2/user/profile/displayList/get',
    getProfileQuickViewer: '/v2/user/profile/quickViewer/get',
    getProfileSearchCondition: '/v2/search/profileCondition/get',
    getProfileSetting: '/v2/user/profile/setting/get',
    getProfileToolBar: '/v2/user/profile/toolbar/get',
    getResultClearTrashAsync: '/v2/trash/result/empty/async/get',
    getResultCopyFolderAsync: '/v2/folder/async/resultCopy/get',
    getResultEraseFolderAsync: '/v2/trash/result/folder/delete/async/get',
    getResultSetContainerAclAsync: '/v2/acl/update/async/result',
    getSectionDetail: '/v2/section/detail/get',
    getSectionDetailForPrint: '/v2/section/detailForPrint/get',
    getSectionList: '/v2/section/list/get',
    getSectionThumbnail: '/v2/section/thumbnail/get',
    getServerInfo: '/v2/service/serverInfo/get',
    getServerTime: '/v2/service/serverTime/get',
    getSortedFolderList: '/v2/folder/list/sorted/get',
    getTargetStatus: '/v2/object/status/get',
    getThresholdForSetACL: '/v2/acl/threshold/get',
    getTopFolder: '/v2/folder/top/get',
    getUserMailAddress: '/v2/user/mailAddress/get',
    getVersionDetail: '/v2/document/version/get',
    getVersionList: '/v2/document/version/list/get',
    getWordBook: '/v2/wordBook/get',
    getWording: '/v2/service/wording/get',
    getWorkingSectionDetail: '/v2/section/detail/working/get',
    getWorkingSectionThumbnail: '/v2/section/thumbnail/working/get',
    getWorkflowInfo: '/v2/workFlow/get',
    insertSection: '/v2/section/insert',
    isConnectServer: '/v2/service/connectivity/get',
    keepAlive: '/v2/service/keepAlive',
    makeTag: '/v2/section/tag/create',
    move: '/v2/object/move',
    moveFavorite: '/v2/favorite/move',
    moveFavoriteCategory: '/v2/favorite/category/move',
    moveSection: '/v2/section/move',
    outClientLog: '/v2/service/clientLog/output',
    outOperationLog: '/v2/service/operationLog/output',
    reSortSearchResult: '/v2/search/sort',
    renameSection: '/v2/section/name/update',
    replaceAllSection: '/v2/section/list/replace',
    replaceSection: '/v2/section/replace',
    requestSearch: '/v2/search/preprocess',
    retrieveAllChildren: '/v2/folder/retrieve',
    retrieveAllChildrenExceptFolderList: '/v2/folder/subObjectList/exceptFolder/get',
    retrieveEntryList: '/v2/user/list/entry/get',
    retrieveSearchResult: '/v2/search/getResult',
    saveProfileDisplayList: '/v2/user/profile/displayList/update',
    saveProfileQuickViewer: '/v2/user/profile/quickViewer/update',
    saveProfileSearchCondition: '/v2/search/profileCondition/save',
    saveProfileSetting: '/v2/user/profile/setting/update',
    saveProfileToolBar: '/v2/user/profile/toolbar/update',
    sendInformMail: '/v2/service/informMail/send',
    setAcl: '/v2/acl/update',
    setContainerAclAsync: '/v2/acl/update/async',
    setSubData: '/v2/section/subData/update',
    startExportDocuments: '/v2/service/documents/export/start',
    startExportSection: '/v2/service/section/export/start',
    startSearch: '/v2/search/start',
    unbindDocument: '/v2/document/unbind',
    undelete: '/v2/trash/object/move',
    updateDocumentAfterApprove: '/v2/document/approved/update',
    updateFavorite: '/v2/favorite/update',
    updateFavoriteCategoryDetail: '/v2/favorite/category/update',
    updateLoginUserAddress: '/v2/user/mailAddress/update',
    updateLoginUserPassword: '/v2/user/password/update',
    updateTag: '/v2/section/tag/update',
    updateVersionDetail: '/v2/document/version/comment/update',
    // 開発用API
    updateSessionAttribute: '/v2/develop/session/attribute/update'
};


/***/ }),

/***/ "./src/app/core/services/view-manager.service.ts":
/*!*******************************************************!*\
  !*** ./src/app/core/services/view-manager.service.ts ***!
  \*******************************************************/
/*! exports provided: ViewManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewManagerService", function() { return ViewManagerService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


/**
 * ViewManagerクラス。
 * 登録したView（ISupportCommandMap）を取得できる。
 */
var ViewManagerService = /** @class */ (function () {
    function ViewManagerService() {
        this.map = new Map();
    }
    /**
     * Viewを取得する
     * @param viewType Viewのタイプ
     */
    ViewManagerService.prototype.get = function (viewType) {
        return this.map.get(viewType);
    };
    /**
     * Viewを登録する
     * @param viewType Viewのタイプ
     * @param view 登録するView
     */
    ViewManagerService.prototype.set = function (viewType, view) {
        this.map.set(viewType, view);
    };
    ViewManagerService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        })
    ], ViewManagerService);
    return ViewManagerService;
}());



/***/ }),

/***/ "./src/app/core/services/wording.service.ts":
/*!**************************************************!*\
  !*** ./src/app/core/services/wording.service.ts ***!
  \**************************************************/
/*! exports provided: WordingService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WordingService", function() { return WordingService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);



/**
 * 用語を扱うサービスです
 */
var WordingService = /** @class */ (function () {
    function WordingService() {
        this.words = new Map();
    }
    /**
     * 用語リストをセットします
     * @param words key:用語ID, value:用語のMap
     */
    WordingService.prototype.set = function (words) {
        this.words = lodash__WEBPACK_IMPORTED_MODULE_2__["cloneDeep"](words);
    };
    /**
     * 用語IDに対する用語を返します.
     * 可変長引数には、用語が{0}, {1}, ... を含んでいた場合に埋め込む数値または文字列を与えることができます。
     * @param id 用語ID
     * @param args 可変長引数。用語内の{0}, {1}, ... に置き換える数や文字列。はじめの引数を{0}に、次を{1}に、、、と順に置き換えます。引数の数と{n}の数が合わなければundefinedという文字列に置き換えられることがあります。
     * @returns 用語。idに対応する用語がなければ用語IDを返します。
     * @example
     *  // id: 'info.messagearea.copymulti', value: '{0}件の項目を{1}に複製しました'のキーがある場合...
     *  constructor(private wording WordingService) {}
     *  this.wording.get('info.messagearea.copymulti', 20, '新規フォルダ'); // '20件の項目を新規フォルダに複製しました'
     */
    WordingService.prototype.get = function (id) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var text = this.words.get(id);
        if (text == null) {
            return id;
        }
        else {
            return this.format(text, args);
        }
    };
    /**
     * WordingServiceが用語リストを持っているか否かを返します.
     *
     * @return 用語リストを持っているか否か
     */
    WordingService.prototype.hasWord = function () {
        return this.words.size > 0;
    };
    /**
     * {0} {1} ...  があれば argsの該当インデクス値に置換
     * @param text
     * @param args
     */
    WordingService.prototype.formatEx = function (text) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!text) {
            return '';
        }
        return this.format(text, args);
    };
    /**
     * {0} {1} ...  があれば argsの該当インデクス値に置換
     * @param { string } text
     * @param { (string | number)[] } args 配列。要素はstringかnumber (getの可変長引数をそのまま渡してください)
     */
    WordingService.prototype.format = function (text, args) {
        // 引数がない場合はそのまま帰す
        if (!args || args.length <= 0) {
            return text;
        }
        return text.replace(/\{(\d+)\}/g, function (match, submatch) {
            // match: {0}, {1}, {2}, ...
            // submatch: 0, 1, 2, ...
            var replacement = args[submatch];
            return replacement !== undefined ? replacement.toString() : replacement;
        });
    };
    WordingService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], WordingService);
    return WordingService;
}());



/***/ }),

/***/ "./src/app/core/storage-key.ts":
/*!*************************************!*\
  !*** ./src/app/core/storage-key.ts ***!
  \*************************************/
/*! exports provided: StorageKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageKey", function() { return StorageKey; });
/**
 * Web Storage 関連の定数
 */
var StorageKey = /** @class */ (function () {
    function StorageKey() {
    }
    StorageKey.token = 'token';
    return StorageKey;
}());



/***/ }),

/***/ "./src/app/core/store/action-interfaces.ts":
/*!*************************************************!*\
  !*** ./src/app/core/store/action-interfaces.ts ***!
  \*************************************************/
/*! exports provided: actionHasPayload, actionHasParentObject, actionIsSuccessOrError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "actionHasPayload", function() { return actionHasPayload; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "actionHasParentObject", function() { return actionHasParentObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "actionIsSuccessOrError", function() { return actionIsSuccessOrError; });
/**
 * ActionがActionWithPayloadであることを確認するType Guard
 * @param action
 */
function actionHasPayload(action) {
    return 'payload' in action;
}
/**
 * ActionがActionWithParentObjectであることを確認するType Guard
 * @param action
 */
function actionHasParentObject(action) {
    return action.parentObject != null;
}
/**
 * ActionがSuccessOrErrorActionであることを確認するType Guard
 * @param action
 */
function actionIsSuccessOrError(action) {
    return actionHasPayload(action) && typeof action.originalType === 'string';
}


/***/ }),

/***/ "./src/app/core/store/core.actions.ts":
/*!********************************************!*\
  !*** ./src/app/core/store/core.actions.ts ***!
  \********************************************/
/*! exports provided: CoreActionTypes, ApplicationInitialize, ApplicationStop, AppletMessageClose, UploadEnd, UploadComplete, EditComplete, ResumeEditConfirm, UnknownFileExt, ImageEdit, ApplicationInitializeComplete, ShowInitializationPreLoader, HideInitializationPreLoader, SetLoginInfo, SetServerInfo, SetClientInfo, SetDomainList, OpenFirstPopup, CloseLastPopup, MergeState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CoreActionTypes", function() { return CoreActionTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationInitialize", function() { return ApplicationInitialize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationStop", function() { return ApplicationStop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppletMessageClose", function() { return AppletMessageClose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UploadEnd", function() { return UploadEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UploadComplete", function() { return UploadComplete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditComplete", function() { return EditComplete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResumeEditConfirm", function() { return ResumeEditConfirm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnknownFileExt", function() { return UnknownFileExt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageEdit", function() { return ImageEdit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationInitializeComplete", function() { return ApplicationInitializeComplete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShowInitializationPreLoader", function() { return ShowInitializationPreLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HideInitializationPreLoader", function() { return HideInitializationPreLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetLoginInfo", function() { return SetLoginInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetServerInfo", function() { return SetServerInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetClientInfo", function() { return SetClientInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetDomainList", function() { return SetDomainList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenFirstPopup", function() { return OpenFirstPopup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloseLastPopup", function() { return CloseLastPopup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeState", function() { return MergeState; });
/**
 * coreのActionのtype定義
 */
var CoreActionTypes;
(function (CoreActionTypes) {
    CoreActionTypes["ApplicationInitialize"] = "[Core] Application Initialize";
    CoreActionTypes["ApplicationStop"] = "[Core] Application Stop";
    CoreActionTypes["AppletMessageClose"] = "[Core] Applet Message Close";
    CoreActionTypes["EditComplete"] = "[Core] Edit Complete";
    CoreActionTypes["UploadComplete"] = "[Core] Upload Complete";
    CoreActionTypes["ResumeEditConfirm"] = "[Core] Resume Edit Confirm";
    CoreActionTypes["UnknownFileExt"] = "[Core] Unknown File Ext";
    CoreActionTypes["ImageEdit"] = "[Core] Image Edit";
    CoreActionTypes["ApplicationInitializeComplete"] = "[Core] Application Initialize Complete";
    CoreActionTypes["ShowInitializationPreLoader"] = "[Core] Show Initialization PreLoader";
    CoreActionTypes["HideInitializationPreLoader"] = "[Core] Hide Initialization PreLoader";
    CoreActionTypes["SetLoginInfo"] = "[Core] Set Login Info";
    CoreActionTypes["SetServerInfo"] = "[Core] Set Server Info";
    CoreActionTypes["SetClientInfo"] = "[Core] Set Client Info";
    CoreActionTypes["SetDomainList"] = "[Core] Set Domain List";
    CoreActionTypes["MergeState"] = "[Core] Merge State";
    CoreActionTypes["OpenFirstPopup"] = "[Core] Open First Popup";
    CoreActionTypes["CloseLastPopup"] = "[Core] Close Last Popup ";
})(CoreActionTypes || (CoreActionTypes = {}));
/**
 * アプリケーションの初期化アクション
 */
var ApplicationInitialize = /** @class */ (function () {
    function ApplicationInitialize() {
        this.type = CoreActionTypes.ApplicationInitialize;
    }
    return ApplicationInitialize;
}());

/**
 * アプリケーションの停止アクション
 */
var ApplicationStop = /** @class */ (function () {
    function ApplicationStop(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.ApplicationStop;
    }
    return ApplicationStop;
}());

/**
 * アラートが閉じられた時のAction
 */
var AppletMessageClose = /** @class */ (function () {
    function AppletMessageClose(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.AppletMessageClose;
    }
    return AppletMessageClose;
}());

/**
 * アップロード完了Action
 */
var UploadEnd = /** @class */ (function () {
    function UploadEnd(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.ApplicationInitializeComplete;
    }
    return UploadEnd;
}());

/**
 * 直接編集-アップロード完了Action
 */
var UploadComplete = /** @class */ (function () {
    function UploadComplete(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.UploadComplete;
    }
    return UploadComplete;
}());

/**
 * 直接編集-編集完了Action
 */
var EditComplete = /** @class */ (function () {
    function EditComplete(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.EditComplete;
    }
    return EditComplete;
}());

/**
 * 直接編集-ファイルサイズオーバーAction
 */
var ResumeEditConfirm = /** @class */ (function () {
    function ResumeEditConfirm(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.ResumeEditConfirm;
    }
    return ResumeEditConfirm;
}());

/**
 * 直接編集-関連付けのないファイルを開いた場合のAction
 */
var UnknownFileExt = /** @class */ (function () {
    function UnknownFileExt(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.UnknownFileExt;
    }
    return UnknownFileExt;
}());

/**
 * 直接編集-イメージを直接編集した場合のAction
 */
var ImageEdit = /** @class */ (function () {
    function ImageEdit(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.ImageEdit;
    }
    return ImageEdit;
}());

/**
 * アプリケーション初期化完了Action
 */
var ApplicationInitializeComplete = /** @class */ (function () {
    function ApplicationInitializeComplete(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.ApplicationInitializeComplete;
    }
    return ApplicationInitializeComplete;
}());

/**
 * 初期化処理中の進捗ダイアログ表示Action
 */
var ShowInitializationPreLoader = /** @class */ (function () {
    function ShowInitializationPreLoader(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.ShowInitializationPreLoader;
    }
    return ShowInitializationPreLoader;
}());

/**
 * 初期化処理中の進捗ダイアログ非表示Action
 */
var HideInitializationPreLoader = /** @class */ (function () {
    function HideInitializationPreLoader(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.HideInitializationPreLoader;
    }
    return HideInitializationPreLoader;
}());

/**
 * ログイン情報設定Action
 */
var SetLoginInfo = /** @class */ (function () {
    function SetLoginInfo(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.SetLoginInfo;
    }
    return SetLoginInfo;
}());

/**
 * サーバ情報設定Action
 */
var SetServerInfo = /** @class */ (function () {
    function SetServerInfo(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.SetServerInfo;
    }
    return SetServerInfo;
}());

/**
 * クライアント情報設定Action
 */
var SetClientInfo = /** @class */ (function () {
    function SetClientInfo(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.SetClientInfo;
    }
    return SetClientInfo;
}());

/**
 * ドメインリスト設定Action
 */
var SetDomainList = /** @class */ (function () {
    function SetDomainList(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.SetDomainList;
    }
    return SetDomainList;
}());

/**
 * Popup画面の初回表示イベントを発行するアクション
 */
var OpenFirstPopup = /** @class */ (function () {
    function OpenFirstPopup(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.OpenFirstPopup;
    }
    return OpenFirstPopup;
}());

/**
 * Popup画面の最終クローズイベントを発行するアクション
 */
var CloseLastPopup = /** @class */ (function () {
    function CloseLastPopup(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.CloseLastPopup;
    }
    return CloseLastPopup;
}());

/**
 * payloadをStateにマージするAction
 */
var MergeState = /** @class */ (function () {
    function MergeState(payload) {
        this.payload = payload;
        this.type = CoreActionTypes.MergeState;
    }
    return MergeState;
}());



/***/ }),

/***/ "./src/app/core/store/core.effects.ts":
/*!********************************************!*\
  !*** ./src/app/core/store/core.effects.ts ***!
  \********************************************/
/*! exports provided: CoreEffects */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CoreEffects", function() { return CoreEffects; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngrx/effects */ "./node_modules/@ngrx/effects/fesm5/effects.js");
/* harmony import */ var _services_controller_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/controller.service */ "./src/app/core/services/controller.service.ts");




/**
 * Coreモジュールに定義されたActionの副作用を定義するEffectsクラス
 */
var CoreEffects = /** @class */ (function () {
    function CoreEffects(actions$, controller) {
        this.actions$ = actions$;
        this.controller = controller;
    }
    CoreEffects = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__["Actions"], _services_controller_service__WEBPACK_IMPORTED_MODULE_3__["ControllerService"]])
    ], CoreEffects);
    return CoreEffects;
}());



/***/ }),

/***/ "./src/app/core/store/core.selectors.ts":
/*!**********************************************!*\
  !*** ./src/app/core/store/core.selectors.ts ***!
  \**********************************************/
/*! exports provided: selectCoreState, getClientInfo, getDomainList, getApplicationStop, getApplicationInitializeStart, getApplicationInitializeComplete, getApplicationInitializationPreLoading, getLoginInfo, getServerInfo, getDocumentTypeList, getPopupIsOpend */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectCoreState", function() { return selectCoreState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getClientInfo", function() { return getClientInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDomainList", function() { return getDomainList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplicationStop", function() { return getApplicationStop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplicationInitializeStart", function() { return getApplicationInitializeStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplicationInitializeComplete", function() { return getApplicationInitializeComplete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplicationInitializationPreLoading", function() { return getApplicationInitializationPreLoading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLoginInfo", function() { return getLoginInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getServerInfo", function() { return getServerInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDocumentTypeList", function() { return getDocumentTypeList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPopupIsOpend", function() { return getPopupIsOpend; });
/* harmony import */ var _ngrx_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
/* harmony import */ var _store_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store-const */ "./src/app/core/store/store-const.ts");


/**
 * Coreのstateを返すselector
 */
var selectCoreState = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createFeatureSelector"])(_store_const__WEBPACK_IMPORTED_MODULE_1__["StoreConst"].FEATURE_NAME);
/**
 * クライアント情報を返すselector
 */
var getClientInfo = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) { return state.core.clientInfo; });
/**
 * ドメイン一覧を返すselector
 */
var getDomainList = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) { return state.core.domainList; });
/**
 * アプリケーション停止状態を返すselector
 */
var getApplicationStop = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) { return state.core.applicationStop; });
/**
 * アプリケーション初期化処理の開始状態を返すselector
 */
var getApplicationInitializeStart = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) { return state.core.initialStatus && state.core.initialStatus.startApplication; });
/**
 * アプリケーション初期化処理の完了状態を返すComplete
 */
var getApplicationInitializeComplete = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) { return state.core.initialStatus && state.core.initialStatus.appInitializeComplete; });
/**
 * 初期化処理の進捗表示状態を返すselector
 */
var getApplicationInitializationPreLoading = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) { return state.core.initialStatus && state.core.initialStatus.preLoading; });
/**
 *  LoginInfoを返すselector
 */
var getLoginInfo = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) { return state.core.loginInfo; });
/**
 *  ServerInfoを返すselector
 */
var getServerInfo = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) { return state.core.serverInfo; });
/**
 * 文書タイプ一覧リスト<DocumentTypeVO[]>を返すselector
 */
var getDocumentTypeList = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) { return state.core.documentTypeList; });
/**
 * Popup画面の初回表示/最終クローズのイベント状態を返すselector
 *
 * true:初回表示,  false:最終クローズ,  undefined:初期値(イベント未発生状態)
 */
var getPopupIsOpend = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectCoreState, function (state) {
    return state.core.popup;
});


/***/ }),

/***/ "./src/app/core/store/store-const.ts":
/*!*******************************************!*\
  !*** ./src/app/core/store/store-const.ts ***!
  \*******************************************/
/*! exports provided: StoreConst */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StoreConst", function() { return StoreConst; });
/**
 * Store関連の定数定義
 */
var StoreConst = /** @class */ (function () {
    function StoreConst() {
    }
    // Storeを登録する際の機能名
    StoreConst.FEATURE_NAME = 'sma-navi';
    return StoreConst;
}());



/***/ }),

/***/ "./src/app/core/sys0-java-script-method-type.ts":
/*!******************************************************!*\
  !*** ./src/app/core/sys0-java-script-method-type.ts ***!
  \******************************************************/
/*! exports provided: Sys0JavaScriptMethodType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sys0JavaScriptMethodType", function() { return Sys0JavaScriptMethodType; });
/**
 * JavaScriptコール用の定義
 */
var Sys0JavaScriptMethodType = /** @class */ (function () {
    function Sys0JavaScriptMethodType() {
    }
    /** JavaScript利用可能チェック */
    Sys0JavaScriptMethodType.EXTERNAL_IS_ENABLE_JAVASCRIPT = 'isEnableJavascript';
    /** Upload開始 */
    Sys0JavaScriptMethodType.EXTERNAL_UPLOAD_START = 'uploadStart';
    /** Upload終了 */
    Sys0JavaScriptMethodType.EXTERNAL_UPLOAD_END = 'uploadEnd';
    /** 1件upload完了 */
    Sys0JavaScriptMethodType.EXTERNAL_DATA_COMPLETE = 'dataComplete';
    /** メッセージ表示 */
    Sys0JavaScriptMethodType.EXTERNAL_VIEW_MESSEGE = 'viewMassege';
    /** Windowをひらく */
    Sys0JavaScriptMethodType.EXTERNAL_SHOW_APP = 'openApp';
    /** Windowを閉じる */
    Sys0JavaScriptMethodType.EXTERNAL_CLOSE_WIN = 'closeWin';
    /** セッションタイムアウト */
    Sys0JavaScriptMethodType.EXTERNAL_SYSTEM_CLOSE = 'systemClose';
    /** ブラウザが閉じる前に呼び出される。 */
    Sys0JavaScriptMethodType.EXTERNAL_BEFORE_UNLOAD = 'beforeUnload';
    /** Windowタイトルを設定する。 */
    Sys0JavaScriptMethodType.EXTERNAL_SET_TITLE = 'setTitle';
    /** アプレットのリサイズを行ないます。 */
    Sys0JavaScriptMethodType.EXTERNAL_RESIZE = 'resize';
    /** ドロップエリアのサイズ変更時 */
    Sys0JavaScriptMethodType.EXTERNAL_RESIZE_DROP_AREA = 'resizeDropArea';
    /** ドロップ可能エリアかどうか */
    Sys0JavaScriptMethodType.EXTERNAL_CAN_DROP = 'canDrop';
    /** 編集時のエラーが発生 */
    Sys0JavaScriptMethodType.EXTERNAL_ON_ERROR = 'onError';
    /** 編集が終了 */
    Sys0JavaScriptMethodType.EXTERNAL_ON_COMPLETE = 'onCompleted';
    /** 編集をキャンセルした。 */
    Sys0JavaScriptMethodType.EXTERNAL_CANCEL_END = 'cancelEdit';
    /** 編集終了通知 */
    Sys0JavaScriptMethodType.EXTERNAL_END_EDIT = 'endEdit';
    /** ファイルサイズが大きすぎる場合。 */
    Sys0JavaScriptMethodType.EXTERNAL_ON_RESUME_EDIT = 'onResumeEdit';
    /** アプリケーションの再起動を行う。 */
    Sys0JavaScriptMethodType.EXTERNAL_RESUME_EDIT = 'resumeEdit';
    /** ダウンロードが完了した。 */
    Sys0JavaScriptMethodType.EXTERNAL_EDIT_DOWNLOAD_END = 'rsnEditDownLoadEnd';
    /** 関連付けされていないファイルだった場合。 */
    Sys0JavaScriptMethodType.EXTERNAL_UNKNOWN_FILE_EXT = 'rsnUnknownFileExt';
    /** イメージ編集アプリケーションで、ペイントを開く確認をする。 */
    Sys0JavaScriptMethodType.EXTERNAL_IMAGE_EDIT = 'rsnImageEdit';
    /** アプリ編集を開始する。 */
    Sys0JavaScriptMethodType.EXTERNAL_START_EDIT = 'startEdit';
    /** 全文データをアプリ起動する。 */
    Sys0JavaScriptMethodType.EXTERNAL_START_EDIT_FTS = 'startEditFTS';
    /** FTSの編集結果を再起動する */
    Sys0JavaScriptMethodType.EXTERNAL_RESUME_EDIT_FTS = 'resumeEditFTS';
    /** ActiveXにファイルアップロードを依頼します。 */
    Sys0JavaScriptMethodType.EXTERNAL_UPLOAD_FILE = 'uploadFile';
    /** 1ファイルの印刷要求をActiveXに要求 */
    Sys0JavaScriptMethodType.EXTERNAL_PRINT = 'rsnPrint';
    /** ローカルプリンター一覧取得をActiveXに要求 */
    Sys0JavaScriptMethodType.EXTERNAL_GET_PRINTER_LIST = 'rsnGetPrinterList';
    /** ローカルプリンター一覧取得をActiveXに要求 */
    Sys0JavaScriptMethodType.EXTERNAL_PRINTER_LIST = 'rsnPrinterList';
    /** 印刷処理を中止することをActiveXに要求 */
    Sys0JavaScriptMethodType.EXTERNAL_CANCEL_PRINT = 'rsnCancelPrint';
    /** 印刷が開始された事をFlexに通知 */
    Sys0JavaScriptMethodType.EXTERNAL_PRINT_START = 'rsnPrintStart';
    /** 印刷処理が終了したことをFlexに通知 */
    Sys0JavaScriptMethodType.EXTERNAL_PRINT_END = 'rsnPrintEnd';
    /** 印刷処理エラーが発生したことをFlexに通知 */
    Sys0JavaScriptMethodType.EXTERNAL_PRINT_ERROR = 'rsnPrintOnError';
    /** Window height */
    Sys0JavaScriptMethodType.EXTERNAL_WINDOW_HEIGHT = 'windowHeight';
    /** Window width */
    Sys0JavaScriptMethodType.EXTERNAL_WINDOW_WIDTH = 'windowWidth';
    /** セッションチェック */
    Sys0JavaScriptMethodType.EXTERNAL_SESSION_CHECK = 'sessionCheck';
    /** 初期化処理 */
    Sys0JavaScriptMethodType.EXTERNAL_AUTO_EDIT_INIT = 'autoeditInit';
    return Sys0JavaScriptMethodType;
}());



/***/ }),

/***/ "./src/app/core/utils/external-interface.ts":
/*!**************************************************!*\
  !*** ./src/app/core/utils/external-interface.ts ***!
  \**************************************************/
/*! exports provided: ExternalInterface */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExternalInterface", function() { return ExternalInterface; });
/**
 * 外部JS呼び出しインターフェース
 */
var ExternalInterface = /** @class */ (function () {
    function ExternalInterface() {
    }
    /**
     * 関数をJSから呼び出させるように登録します
     * @param funcName 関数名
     * @param callback 関数
     */
    ExternalInterface.addCallback = function (funcName, callback) {
        if (callback === void 0) { callback = null; }
        Sys0Application_addCallback(funcName, callback);
    };
    /**
     * 指定された関数を呼び出します。
     * @param funcName 関数名
     * @param arg 引数
     */
    ExternalInterface.call = function (funcName) {
        var arg = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            arg[_i - 1] = arguments[_i];
        }
        return Sys0Application_call.apply(void 0, [funcName].concat(arg));
    };
    return ExternalInterface;
}());



/***/ }),

/***/ "./src/app/core/utils/injector-provider.ts":
/*!*************************************************!*\
  !*** ./src/app/core/utils/injector-provider.ts ***!
  \*************************************************/
/*! exports provided: InjectorProvider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InjectorProvider", function() { return InjectorProvider; });
/**
 * CoreのInjector（DIに使用する）を提供するクラス
 */
var InjectorProvider = /** @class */ (function () {
    function InjectorProvider() {
    }
    /**
     * Injectorを設定する
     * @param injector Injectorへの参照
     */
    InjectorProvider.set = function (injector) {
        this.injector = injector;
    };
    /**
     * Injectorを取得する
     * @returns injector
     */
    InjectorProvider.get = function () {
        return this.injector;
    };
    return InjectorProvider;
}());



/***/ }),

/***/ "./src/app/core/utils/rsn-event-manager.ts":
/*!*************************************************!*\
  !*** ./src/app/core/utils/rsn-event-manager.ts ***!
  \*************************************************/
/*! exports provided: RsnEventManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RsnEventManager", function() { return RsnEventManager; });
/**
 * Event管理クラス
 *
 * 各コンポーネントでインスタンス化してaddEventListenerと
 * removeEventListerを生やしてコマンドから使ってください。
 */
var RsnEventManager = /** @class */ (function () {
    function RsnEventManager() {
        this._events = new Map();
    }
    /**
     * イベントを処理するリスナーを登録します。
     * 同じキーに複数リスナーを登録できます(上書きはしない)
     *
     * @param key イベントのタイプです。
     * @param func イベントを処理するリスナー関数です。
     */
    RsnEventManager.prototype.addEventListener = function (key, func) {
        var funcs = [];
        var innerFuncs = this._events.get(key);
        if (innerFuncs) {
            funcs = innerFuncs;
        }
        funcs.push(func);
        this._events.set(key, funcs);
    };
    /**
     * リスナーを削除します。
     *
     * @param key イベントのタイプです。
     * @param func 削除するリスナーオブジェクトです。
     */
    RsnEventManager.prototype.removeEventListener = function (key, func) {
        var innerFuncs = this._events.get(key);
        if (innerFuncs) {
            var removeIndex = innerFuncs.indexOf(func);
            if (removeIndex >= 0) {
                innerFuncs.splice(removeIndex, 1);
                this._events.set(key, innerFuncs);
                this._events.clear();
            }
        }
    };
    /**
     * すべてのリスナーを削除します。
     *
     */
    RsnEventManager.prototype.allremoveEventListener = function () {
        this._events.clear();
    };
    /**
     * イベントを実行します。
     *
     * @param key イベントのタイプです。
     * @param event イベントに渡す引数です。
     */
    RsnEventManager.prototype.execute = function (key, event) {
        var innerFuncs = this._events.get(key);
        if (innerFuncs) {
            // innerFuncsでループを回すと
            // ハンドラの中でremoveEventListenerした場合に
            // indexがずれて実行されないハンドラが出てきてしまうので
            // コピーしておく。
            var copied = innerFuncs.slice();
            copied.forEach(function (f) {
                f(event);
            });
        }
    };
    return RsnEventManager;
}());



/***/ }),

/***/ "./src/app/core/vo/access-right-vo.ts":
/*!********************************************!*\
  !*** ./src/app/core/vo/access-right-vo.ts ***!
  \********************************************/
/*! exports provided: AccessRightVO, isAccessRightVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccessRightVO", function() { return AccessRightVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAccessRightVO", function() { return isAccessRightVO; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * 組み合わせアクセス権詳細データモデル
 */
var AccessRightVO = /** @class */ (function () {
    function AccessRightVO() {
        /**
         * プロパティ参照(閲覧)
         */
        this.enableReadProperty = false;
        /**
         * プロパティ更新
         */
        this.enableWriteProperty = false;
        /**
         * 読み取り
         */
        this.enableRead = false;
        /**
         * 更新
         */
        this.enableUpdate = false;
        /**
         * 削除
         */
        this.enableDelete = false;
        /**
         * アクセス権変更
         */
        this.enableChangeACL = false;
        /**
         * 所有権取得
         */
        this.enableAcquireOwnship = false;
        /**
         * 文書作成
         */
        this.enableCreateDocument = false;
        /**
         * ｻﾌﾞフォルダ作成
         */
        this.enableCreateSubFolder = false;
        /**
         * ごみ箱を空にする
         */
        this.enableClearTrash = false;
    }
    /**
     * clone()
     */
    AccessRightVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0__["cloneDeep"](this);
    };
    return AccessRightVO;
}());

/**
 * AccessRightVOであることを確認するType Guard
 * @param object チェック対象
 */
function isAccessRightVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = 'enableReadProperty' in object &&
        'enableWriteProperty' in object &&
        'enableRead' in object &&
        'enableUpdate' in object &&
        'enableDelete' in object &&
        'enableChangeACL' in object &&
        'enableAcquireOwnship' in object &&
        'enableCreateDocument' in object &&
        'enableCreateSubFolder' in object &&
        'enableClearTrash' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new AccessRightVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/ace-vo.ts":
/*!***********************************!*\
  !*** ./src/app/core/vo/ace-vo.ts ***!
  \***********************************/
/*! exports provided: AceVO, isAceVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AceVO", function() { return AceVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAceVO", function() { return isAceVO; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * １ユーザーはドキュメントまたはショートカットオブジェクトに対するアクセス権詳細データモデル
 */
var AceVO = /** @class */ (function () {
    function AceVO() {
        /**
         * ユーザーアカウント情報
         */
        this.entry = null;
        /**
         * オブジェクトの組み合わせアクセス権(BL側は利用しない)
         */
        this.accessRight = null;
        /**
         * オブジェクトの組み合わせアクセス権に伴う詳細アクセス権オプション
         * 特殊なアクセス権以外は設定しても無視する
         */
        this.detail = null;
        /**
         * 文書のデフォルト組み合わせアクセス権(フォルダのみ有効)(BL側は利用しない)
         */
        this.documentDefaultaccessRight = null;
        /**
         * 文書の組み合わせアクセス権(デフォルト)に伴う詳細アクセス権オプション
         * 特殊なアクセス権以外は設定しても無視する
         * フォルダオブジェクトのみ有効
         */
        this.documentDefaultDetail = null;
    }
    /**
     * clone()
     */
    AceVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0__["cloneDeep"](this);
    };
    return AceVO;
}());

/**
 * AceVOであることを確認するType Guard
 * @param object チェック対象
 */
function isAceVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = 'entry' in object &&
        'accessRight' in object &&
        'detail' in object &&
        'documentDefaultaccessRight' in object &&
        'documentDefaultDetail' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new AceVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/acl-vo.ts":
/*!***********************************!*\
  !*** ./src/app/core/vo/acl-vo.ts ***!
  \***********************************/
/*! exports provided: AclVO, isAclVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AclVO", function() { return AclVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAclVO", function() { return isAclVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _object_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object-base-vo */ "./src/app/core/vo/object-base-vo.ts");



/**
 * オブジェクトのアクセス権詳細データクラス
 * id,cabIdはアクセス権の対象のオブジェクトのID
 *
 */
var AclVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AclVO, _super);
    /**
     * コンストラクタです。
     **/
    function AclVO() {
        var _this = _super.call(this) || this;
        /**
         * Sys0BaseVO.idにオブジェクトID
         * Sys0BaseVO.nameにオブジェクト名
         */
        /**
         * 所有者情報
         */
        _this.owner = null;
        /**
         * ACL一覧
         */
        _this.aceList = null;
        return _this;
    }
    /**
     * clone()
     */
    AclVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    /**
     * アクセス権定数
     */
    /**
     * アクセス権なし
     */
    AclVO.AC_NOTHING = 0;
    /**
     * フルコントロール
     */
    AclVO.AC_FULLCONTROL = 1;
    /**
     * 更新
     */
    AclVO.AC_UPDATE = 2;
    /**
     * 閲覧(プロパティ参照)
     */
    AclVO.AC_BROWER = 3;
    /**
     * 読み取り
     */
    AclVO.AC_READ = 4;
    /**
     * 特殊なアクセス権
     */
    AclVO.AC_SPECIAL = 5;
    /**
     * アカウントのカテゴリ
     */
    /**
     * ユーザ
     */
    AclVO.USERCATEGORY_USER = 0;
    /**
     * ローカルグループ
     */
    AclVO.USERCATEGORY_LOCALGROUP = AclVO.USERCATEGORY_USER + 1;
    /**
     * グローバルグループ
     */
    AclVO.USERCATEGORY_GLOBALGROUP = AclVO.USERCATEGORY_LOCALGROUP + 1;
    /**
     * 不明
     */
    AclVO.USERCATEGORY_UNKNOWN = AclVO.USERCATEGORY_GLOBALGROUP + 1;
    return AclVO;
}(_object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"]));

/**
 * AclVOであることを確認するType Guard
 * @param object チェック対象
 */
function isAclVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    // 判定に使用するtypeのリスト
    var objectTypes = [
        _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_FOLDER,
        _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_CABINET,
        _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_FAVORITE_CATEGORY,
        _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_FAVORITE,
        _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_TRASH,
        _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_DOCUMENT,
        _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_SHORTCUT
    ];
    var ok = ('owner' in object || 'aceList' in object) && objectTypes.findIndex(object.type) >= 0;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new AclVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/cabinet-vo.ts":
/*!***************************************!*\
  !*** ./src/app/core/vo/cabinet-vo.ts ***!
  \***************************************/
/*! exports provided: CabinetVO, isCabinetVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CabinetVO", function() { return CabinetVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCabinetVO", function() { return isCabinetVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _object_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object-base-vo */ "./src/app/core/vo/object-base-vo.ts");



/**
 * キャビネットデータモデル
 */
var CabinetVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CabinetVO, _super);
    /**
     * コンストラクタです。
     **/
    function CabinetVO() {
        var _this = _super.call(this) || this;
        /**
         * デフォルト文書タイプ
         */
        _this.typeId = null;
        return _this;
    }
    /**
     * clone()
     */
    CabinetVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    return CabinetVO;
}(_object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"]));

/**
 * CabinetVOであることを確認するType Guard
 * @param object チェック対象
 */
function isCabinetVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = !('owner' in object) && !('aceList' in object) && object.type === _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_CABINET;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new CabinetVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/config-file-vo.ts":
/*!*******************************************!*\
  !*** ./src/app/core/vo/config-file-vo.ts ***!
  \*******************************************/
/*! exports provided: ConfigFileVO, isConfigFileVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigFileVO", function() { return ConfigFileVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isConfigFileVO", function() { return isConfigFileVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sys0-base-vo */ "./src/app/core/vo/sys0-base-vo.ts");



/**
 * プロファイルデータモデル
 */
var ConfigFileVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ConfigFileVO, _super);
    /**
     * コンストラクタです。
     **/
    function ConfigFileVO() {
        var _this = _super.call(this) || this;
        /**
         * idに文書ID
         * nameにプロファイル名
         */
        /**
         * プロファイルＩＤ
         */
        _this.profileId = null;
        /**
         * プロファイルの分類(指定の文字列は分類のフォルダ名になる)
         */
        _this.type = null;
        return _this;
    }
    /**
     * clone()
     */
    ConfigFileVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    /**
     * 設定ファイルタイプ（ツールバー）
     */
    ConfigFileVO.CONFIG_FILE_TYPE_TOOLBAR = 'toolbar';
    /**
     * 設定ファイルタイプ（一覧表示）
     */
    ConfigFileVO.CONFIG_FILE_TYPE_DISPLAY = 'display';
    /**
     * 設定ファイルタイプ（ワークフロー）
     */
    ConfigFileVO.CONFIG_FILE_TYPE_WORKFLOW = 'workflow';
    /**
     * 設定ファイルタイプ（デフォルトお気に入り）
     */
    ConfigFileVO.CONFIG_FILE_TYPE_DEFAULT_FAVORITE = 'defaultFavorite';
    /**
     * 設定ファイルタイプ（個人設定）
     */
    ConfigFileVO.CONFIG_FILE_TYPE_SETTING = 'setting';
    /**
     * 文書タイプ（全ての文書タイプ）
     */
    ConfigFileVO.LIST_TYPE_ALL_DOC_TYPE = 'allDocType';
    /**
     * 文書タイプ（TODOリスト）
     * ここの値はプロファイルに登録される文書名になる。（制限120文字）
     * 文書タイプ名が重複してしまう可能性があるので、文書タイプ名の制限値（32文字）よりも大きい値を設定している。
     */
    ConfigFileVO.LIST_TYPE_TODO_LIST = 'profile_display_list_doc_type_name_todo_list';
    return ConfigFileVO;
}(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["Sys0BaseVO"]));

/**
 * ConfigFileVOであることを確認するType Guard
 * @param object チェック対象
 */
function isConfigFileVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = Object(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["isSys0BaseVO"])(object, false) && 'profileId' in object && 'type' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new ConfigFileVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/document-vo.ts":
/*!****************************************!*\
  !*** ./src/app/core/vo/document-vo.ts ***!
  \****************************************/
/*! exports provided: DocumentVO, isDocumentVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentVO", function() { return DocumentVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDocumentVO", function() { return isDocumentVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _object_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object-base-vo */ "./src/app/core/vo/object-base-vo.ts");
/* harmony import */ var _workflow_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./workflow-vo */ "./src/app/core/vo/workflow-vo.ts");




/**
 * 文書データモデル
 */
var DocumentVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DocumentVO, _super);
    /**
     * コンストラクタです。
     **/
    function DocumentVO() {
        var _this = _super.call(this) || this;
        /**
         * 文書番号
         */
        _this.number = null;
        /**
         *  編集できるかどうか
         */
        _this.editable = true;
        /**
         * 作成者
         */
        _this.creater = null;
        /**
         * 最終更新日
         */
        _this.lastUpdateDate = null;
        /**
         * 保管期限日
         */
        _this.retensionDate = null;
        /**
         * セクション数
         */
        _this.sections = null;
        /**
         * 文書サイズ
         */
        _this.size = -1;
        /**
         * 文書状態
         */
        _this.status = null;
        /**
         * 文書タイプID
         */
        _this.typeId = null;
        /**
         * パスIDリスト。見えない場合は空文字列
         */
        _this.pathIds = null;
        /**
         * パス名リスト。見えない場合は空文字列
         */
        _this.pathNames = null;
        /**
         * 版
         */
        _this.version = '1.0';
        /**
         * 版コメント
         */
        _this.versionMemo = null;
        /**
         * ゴミ箱からのドキュメント(true)
         */
        _this.trashDoc = false;
        /**
         * 作成日
         *
         * ※サーバー側のバグにより以下の通りになっています。
         * 登録日=createDate
         * 作成日=entryDate
         */
        _this.entryDate = null;
        /**
         * 最終アクセス日
         */
        _this.lastAccessDate = null;
        /**
         * アクセス回数
         */
        _this.accessCount = null;
        /**
         * ユーザー文字列1
         */
        _this.userString1 = null;
        /**
         * ユーザー文字列2
         */
        _this.userString2 = null;
        /**
         * ユーザー文字列3
         */
        _this.userString3 = null;
        /**
         * ユーザー文字列4
         */
        _this.userString4 = null;
        /**
         * ユーザー文字列5
         */
        _this.userString5 = null;
        /**
         * ユーザー文字列6
         */
        _this.userString6 = null;
        /**
         * ユーザー文字列7
         */
        _this.userString7 = null;
        /**
         * ユーザー文字列8
         */
        _this.userString8 = null;
        /**
         * ユーザー文字列9
         */
        _this.userString9 = null;
        /**
         * ユーザー文字列10
         */
        _this.userString10 = null;
        /**
         * ユーザー文字列11
         */
        _this.userString11 = null;
        /**
         * ユーザー文字列12
         */
        _this.userString12 = null;
        /**
         * ユーザー文字列13
         */
        _this.userString13 = null;
        /**
         * ユーザー文字列14
         */
        _this.userString14 = null;
        /**
         * ユーザー文字列15
         */
        _this.userString15 = null;
        /**
         * ユーザー文字列16
         */
        _this.userString16 = null;
        /**
         * ユーザー文字列17
         */
        _this.userString17 = null;
        /**
         * ユーザー文字列18
         */
        _this.userString18 = null;
        /**
         * ユーザー文字列19
         */
        _this.userString19 = null;
        /**
         * ユーザー文字列20
         */
        _this.userString20 = null;
        /**
         * ユーザー数値1
         */
        _this.userInteger1 = null;
        /**
         * ユーザー数値2
         */
        _this.userInteger2 = null;
        /**
         * ユーザー数値3
         */
        _this.userInteger3 = null;
        /**
         * ユーザー数値4
         */
        _this.userInteger4 = null;
        /**
         * ユーザー数値5
         */
        _this.userInteger5 = null;
        /**
         * ユーザー数値6
         */
        _this.userInteger6 = null;
        /**
         * ユーザー数値7
         */
        _this.userInteger7 = null;
        /**
         * ユーザー数値8
         */
        _this.userInteger8 = null;
        /**
         * ユーザー数値9
         */
        _this.userInteger9 = null;
        /**
         * ユーザー数値10
         */
        _this.userInteger10 = null;
        /**
         * ユーザーメモ1
         */
        _this.userMemo1 = null;
        /**
         * ユーザーメモ2
         */
        _this.userMemo2 = null;
        /**
         * ユーザーメモ3
         */
        _this.userMemo3 = null;
        /**
         * ユーザーメモ4
         */
        _this.userMemo4 = null;
        /**
         * ユーザーメモ5
         */
        _this.userMemo5 = null;
        /**
         * ユーザー日付1
         */
        _this.userDate1 = null;
        /**
         * ユーザー日付2
         */
        _this.userDate2 = null;
        /**
         * ユーザー日付3
         */
        _this.userDate3 = null;
        /**
         * ユーザー日付4
         */
        _this.userDate4 = null;
        /**
         * ユーザー日付5
         */
        _this.userDate5 = null;
        /**
         * ユーザー文字列(採番)
         */
        _this.userNumber = null;
        /**
         * 自動採番フラグ
         */
        _this.autoNumber = false;
        /**
         * メモ
         */
        _this.memo = null;
        /**
         * ワークフローデータ
         */
        /**
         * ワークフロー状態(取得のみ)。可能値はDocumentVOのワークフロー状態を参照
         */
        _this.workFlowStatus = _workflow_vo__WEBPACK_IMPORTED_MODULE_3__["WorkflowVO"].WFSTATUS_EMPTY;
        /**
         * 申請者(取得のみ)
         */
        _this.applicant = null;
        /**
         * 承認者(取得のみ)
         */
        _this.approver = null;
        /**
         * 次の審査/承認者(取得のみ)
         */
        _this.waitingApprover = null;
        // ★Stitch V1.3対応 BASE64の文字列として扱う
        /**
         * メイン画面でのサムネイル表示用
         */
        _this.thumbnailData = null;
        /**
         * 付箋あり(1)/なし(0)フラグ
         */
        _this.tagStatus = 0;
        /**
         * 付箋情報。
         * 指定によって、取得しないことがある。
         * 従って、nullによって、付箋あり/なしのを判断できない
         */
        _this.tagList = null;
        /**
         * 取引金額で使われているプロパティを指定する。
         */
        _this.tradingAmountName = null;
        _this.type = _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_DOCUMENT;
        return _this;
    }
    Object.defineProperty(DocumentVO.prototype, "tradingAmount", {
        /**
         * 取引金額用仮想フィールド。<br />
         * 電調法対応。15桁数値対応。
         */
        get: function () {
            if (this.tradingAmountName != null && this.hasOwnProperty(this.tradingAmountName)) {
                var userString = this[this.tradingAmountName]; // 指定されたプロパティの値を取得。
                return userString != null ? Number(userString) : null; // Numberとして返す。
            }
            else {
                return NaN;
            }
        },
        set: function (value) {
            if (this.tradingAmountName != null && this.hasOwnProperty(this.tradingAmountName)) {
                if (value == null) {
                    this[this.tradingAmountName] = null;
                    return;
                }
                var num = value;
                if (isNaN(num)) {
                    this[this.tradingAmountName] = value;
                }
                else {
                    var absvalue = Math.abs(num); // 絶対値を取得
                    var valueString = null;
                    valueString = absvalue.toString(10); // 10進数で文字列変換
                    if (value < 0) {
                        // マイナスの場合
                        // 先頭にマイナスを付与する
                        valueString = '-' + valueString;
                    }
                    // 元のプロパティに変換後の値を設定する。
                    this[this.tradingAmountName] = valueString;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * clone()
     */
    DocumentVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    return DocumentVO;
}(_object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"]));

/**
 * DocumentVOであることを確認するType Guard
 * @param object チェック対象
 */
function isDocumentVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = !('owner' in object) && !('aceList' in object) && object.type === _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_DOCUMENT;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new DocumentVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/domain-vo.ts":
/*!**************************************!*\
  !*** ./src/app/core/vo/domain-vo.ts ***!
  \**************************************/
/*! exports provided: DomainVO, isDomainVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomainVO", function() { return DomainVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDomainVO", function() { return isDomainVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sys0-base-vo */ "./src/app/core/vo/sys0-base-vo.ts");



/**
 * ドメイン用のデータモデル
 *
 * @author $Author: koichi $
 * @version $Id: DomainVO.as 13694 2010-03-26 08:11:28Z koichi $
 */
var DomainVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DomainVO, _super);
    /**
     * コンストラクタです。
     **/
    function DomainVO() {
        return _super.call(this) || this;
    }
    /**
     * clone()
     */
    DomainVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    return DomainVO;
}(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["Sys0BaseVO"]));

/**
 * DomainVOであることを確認するType Guard
 * @param object チェック対象
 */
function isDomainVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = 'folderType' in object && 'phoneticName' in object && 'pathName' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new DomainVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/entry-vo.ts":
/*!*************************************!*\
  !*** ./src/app/core/vo/entry-vo.ts ***!
  \*************************************/
/*! exports provided: EntryVO, isEntryVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntryVO", function() { return EntryVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEntryVO", function() { return isEntryVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sys0-base-vo */ "./src/app/core/vo/sys0-base-vo.ts");



/**
 * UDから取得したエントリ（ユーザー、グループ）
 */
var EntryVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](EntryVO, _super);
    /**
     * コンストラクタです。
     **/
    function EntryVO() {
        var _this = _super.call(this) || this;
        /**
         * ユーザーのメールアドレス
         */
        _this.mailAddress = null;
        /**
         * グループに所属するメンバーのメールアドレスリスト
         */
        _this.mailAddressList = null;
        return _this;
    }
    /**
     * clone()
     */
    EntryVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    return EntryVO;
}(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["Sys0BaseVO"]));

/**
 * EntryVOであることを確認するType Guard
 * @param object チェック対象
 */
function isEntryVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = Object(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["isSys0BaseVO"])(object, false) &&
        'entryType' in object &&
        'userSpace' in object &&
        'domainName' in object &&
        'shortName' in object &&
        'longName' in object &&
        'phoneticName' in object &&
        'index' in object &&
        'protected' in object &&
        'propPrefixes' in object &&
        'mailAddress' in object &&
        'mailAddressList' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new EntryVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/favorite-vo.ts":
/*!****************************************!*\
  !*** ./src/app/core/vo/favorite-vo.ts ***!
  \****************************************/
/*! exports provided: FavoriteVO, isFavoriteVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FavoriteVO", function() { return FavoriteVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFavoriteVO", function() { return isFavoriteVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _object_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object-base-vo */ "./src/app/core/vo/object-base-vo.ts");



/**
 * お気に入データモデル
 */
var FavoriteVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](FavoriteVO, _super);
    /**
     * コンストラクタです。
     **/
    function FavoriteVO() {
        var _this = _super.call(this) || this;
        /**
         * プロファイルID
         */
        _this.profileId = null;
        /**
         * 実データの場所(id)
         */
        _this.linkId = null;
        /**
         * 検索条件のダイジェスト<br>
         * 検索条件以外のお気に入りはnull
         */
        _this.digest = null;
        /**
         * デフォルト表示かどうかを表す
         */
        _this.isDefault = false;
        /**
         * パスIDリスト
         */
        _this.pathIds = null;
        /**
         * パス名リスト
         */
        _this.pathNames = null;
        /**
         * お気に入りの実体
         */
        _this.linkObject = null;
        _this.type = _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_FAVORITE;
        return _this;
    }
    /**
     * clone()
     */
    FavoriteVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    /**
     * お気に入りタイプ定数
     */
    FavoriteVO.FAVORITE_TYPE_DOCUMENT = 1;
    FavoriteVO.FAVORITE_TYPE_FOLDER = 2;
    FavoriteVO.FAVORITE_TYPE_QUERY = 3;
    return FavoriteVO;
}(_object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"]));

/**
 * FavoriteVOであることを確認するType Guard
 * @param object チェック対象
 */
function isFavoriteVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = !('owner' in object) && !('aceList' in object) && object.type === _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_FAVORITE;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new FavoriteVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/folder-vo.ts":
/*!**************************************!*\
  !*** ./src/app/core/vo/folder-vo.ts ***!
  \**************************************/
/*! exports provided: FolderVO, isFolderVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FolderVO", function() { return FolderVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFolderVO", function() { return isFolderVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _object_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object-base-vo */ "./src/app/core/vo/object-base-vo.ts");



/**
 * フォルダーデータモデル
 */
var FolderVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](FolderVO, _super);
    /**
     * コンストラクタです。
     **/
    function FolderVO() {
        var _this = _super.call(this) || this;
        /**
         * フォルダサイズ　(単位：KB)
         */
        _this.size = null;
        /**
         * デフォルト文書タイプ
         */
        _this.typeId = null;
        /**
         * パスIDリスト
         */
        _this.pathIds = null;
        /**
         * パス名リスト
         */
        _this.pathNames = null;
        _this.type = _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_FOLDER;
        return _this;
    }
    /**
     * clone()
     */
    FolderVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    return FolderVO;
}(_object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"]));

/**
 * FolderVOであることを確認するType Guard
 * @param object チェック対象
 */
function isFolderVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = !('owner' in object) && !('aceList' in object) && object.type === _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_FOLDER;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new FolderVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/object-base-vo.ts":
/*!*******************************************!*\
  !*** ./src/app/core/vo/object-base-vo.ts ***!
  \*******************************************/
/*! exports provided: ObjectBaseVO, isObjectBaseVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectBaseVO", function() { return ObjectBaseVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObjectBaseVO", function() { return isObjectBaseVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var angular2_uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular2-uuid */ "./node_modules/angular2-uuid/index.js");
/* harmony import */ var angular2_uuid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular2_uuid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _sys0_base_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sys0-base-vo */ "./src/app/core/vo/sys0-base-vo.ts");




/**
 * Sys0上で使用するオブジェクト（文書、ショートカット、フォルダ、お気に入り、ごみ箱、キャビネットなど）のベースモデル。
 */
var ObjectBaseVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ObjectBaseVO, _super);
    /**
     * コンストラクタです。
     **/
    function ObjectBaseVO() {
        var _this = _super.call(this) || this;
        /**
         * オブジェクトタイプ
         * 各サブクラスのコンストラクタで初期設定される。
         *
         */
        _this.type = null;
        /**
         * アイコン識別子
         * <pre>
         * フォルダー: folder
         * お気に入りカテゴリ:
         *
         * ロジックからの取得時に設定する。
         * </pre>
         */
        _this.icon = null;
        /**
         * 子フォルダ
         * <pre>
         * nullの場合は、ツリーに+/-が表示されない。
         * 空でもListが存在する場合は、ツリーに+/-が表示される。
         * </pre>
         */
        _this.children = [];
        /**
         * 親フォルダのid
         */
        _this.parentId = null;
        _this._uid = null;
        return _this;
    }
    Object.defineProperty(ObjectBaseVO.prototype, "fill", {
        /**
         *
         */
        get: function () {
            return name != null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ObjectBaseVO.prototype, "uid", {
        /**
         *
         */
        get: function () {
            if (this._uid == null || this._uid === '') {
                if (this.id === ObjectBaseVO.DELETED_OBJECT_ID || this.id == null || this.id === '') {
                    this._uid = angular2_uuid__WEBPACK_IMPORTED_MODULE_1__["UUID"].UUID();
                }
                else {
                    this._uid = this.id;
                }
                return this._uid;
            }
            else {
                return this._uid;
            }
        },
        set: function (value) {
            if (value != null && value !== '') {
                this._uid = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * clone()
     */
    ObjectBaseVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_2__["cloneDeep"](this);
    };
    /**
     * フォルダ
     */
    ObjectBaseVO.TYPE_FOLDER = 'folder';
    /**
     * キャビネット
     */
    ObjectBaseVO.TYPE_CABINET = 'cabinet';
    /**
     * お気に入り カテゴリー
     */
    ObjectBaseVO.TYPE_FAVORITE_CATEGORY = 'favoriteCategory';
    /**
     * お気に入り
     */
    ObjectBaseVO.TYPE_FAVORITE = 'favorite';
    /**
     * ゴミ箱
     */
    ObjectBaseVO.TYPE_TRASH = 'trash';
    /**
     * 文書
     */
    ObjectBaseVO.TYPE_DOCUMENT = 'document';
    /**
     * ショートカット
     */
    ObjectBaseVO.TYPE_SHORTCUT = 'shortcut';
    /**
     * 裏でオブジェクトが削除された際にBL側から返ってくるid
     */
    ObjectBaseVO.DELETED_OBJECT_ID = '00000000';
    return ObjectBaseVO;
}(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_3__["Sys0BaseVO"]));

/**
 * ObjectBaseVOであることを確認するType Guard
 * @param object チェック対象
 */
function isObjectBaseVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = Object(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_3__["isSys0BaseVO"])(object, false) && 'type' in object && 'icon' in object && 'children' in object && 'parentId' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new ObjectBaseVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/property-detail-vo.ts":
/*!***********************************************!*\
  !*** ./src/app/core/vo/property-detail-vo.ts ***!
  \***********************************************/
/*! exports provided: PropertyDetailVO, isPropertyDetailVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyDetailVO", function() { return PropertyDetailVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPropertyDetailVO", function() { return isPropertyDetailVO; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * 属性詳細データモデル
 */
var PropertyDetailVO = /** @class */ (function () {
    function PropertyDetailVO() {
        /**
         * システム属性名
         */
        this.name = null;
        /**
         * 属性の表示名
         */
        this.displayName = null;
        /**
         * 属性のデータタイプ
         *     PROPERTY_TYPE_STRING
         *     PROPERTY_TYPE_INTEGER
         *     PROPERTY_TYPE_DATE
         */
        this.type = null;
        /**
         * 初期値
         */
        this.initialValue = null;
        /**
         * 値必須(true)
         */
        this.notNull = null;
        /**
         * 制約
         */
        this.maxSize = null;
        /**
         * 新規登録時に編集可能(true)
         */
        this.editableEntry = null;
        /**
         * ﾌﾟﾛﾊﾟﾃｨ表示時に編集可能(true)
         */
        this.editableUpdate = null;
        /**
         * 対応単語帳名。対応なしの場合は、nullである。
         */
        this.wordBookName = null;
        /**
         * 単語帳+手入力可能(true)
         */
        this.overWordBook = null;
        /**
         * 検索画面表示位置
         */
        this.searchDispIdx = null;
        /**
         * 結果画面表示位置
         */
        this.resultDispIdx = null;
        /**
         * 入力画面表示位置
         */
        this.propDispIdx = null;
    }
    /**
     * clone()
     */
    PropertyDetailVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0__["cloneDeep"](this);
    };
    /**
     * 属性のデータタイプ
     */
    /**
     * 文字列
     */
    PropertyDetailVO.PROPERTY_TYPE_STRING = 0x40;
    /**
     * 数字
     */
    PropertyDetailVO.PROPERTY_TYPE_INTEGER = 0x20;
    /**
     * 日付
     */
    PropertyDetailVO.PROPERTY_TYPE_DATE = 0x4;
    /**
     * BOOLEAN
     */
    PropertyDetailVO.PROPERTY_TYPE_BOOLEAN = 0x2;
    /**
     * BINARY
     */
    PropertyDetailVO.PROPERTY_TYPE_BINARY = 0x1;
    /**
     * 採番プロパティ
     */
    PropertyDetailVO.PROPERTY_TYPE_USERNUMBER = 0x8000;
    /**
     * 不明
     */
    PropertyDetailVO.PROPERTY_TYPE_NA = 0x0;
    return PropertyDetailVO;
}());

/**
 * PropertyDetailVOであることを確認するType Guard
 * @param object チェック対象
 */
function isPropertyDetailVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = 'name' in object &&
        'displayName' in object &&
        'type' in object &&
        'initialValue' in object &&
        'notNull' in object &&
        'maxSize' in object &&
        'editableEntry' in object &&
        'editableUpdate' in object &&
        'wordBookName' in object &&
        'overWordBook' in object &&
        'searchDispIdx' in object &&
        'resultDispIdx' in object &&
        'propDispIdx' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new PropertyDetailVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/search-condition-item-vo.ts":
/*!*****************************************************!*\
  !*** ./src/app/core/vo/search-condition-item-vo.ts ***!
  \*****************************************************/
/*! exports provided: SearchConditionItemVO, isSearchConditionItemVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchConditionItemVO", function() { return SearchConditionItemVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSearchConditionItemVO", function() { return isSearchConditionItemVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sys0-base-vo */ "./src/app/core/vo/sys0-base-vo.ts");



/**
 * 詳細検索の検索項目データモデル
 */
var SearchConditionItemVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SearchConditionItemVO, _super);
    /**
     * コンストラクタです。
     **/
    function SearchConditionItemVO() {
        var _this = _super.call(this) || this;
        /**
         * 検索項目名
         * DocumentVOの該当プロパティを指定
         * 例：文書名は検索項目の場合は、"name"を設定
         */
        // 		name: string | null = null;
        /**
         * 文字列型の検索値
         * 検索キーワードの区切りは呼び出す側が行うとする
         */
        _this.values = null;
        /**
         * 検索キーワード
         * 画面上の項目と連動する。
         */
        _this.keyword = null;
        /**
         * 数値型の検索値(From)
         * FromとToは揃える必要がなし、片方を指定可能
         */
        _this.intValueFrom = null;
        /**
         * 数値型の検索値(To)
         * FromとToは揃える必要がなし、片方を指定可能
         */
        _this.intValueTo = null;
        /**
         * 日付型の検索値(From)
         * FromとToは揃える必要がなし、片方を指定可能
         */
        _this.dateValueFrom = null;
        /**
         * 日付型の検索値(To)
         * FromとToは揃える必要がなし、片方を指定可能
         */
        _this.dateValueTo = null;
        /**
         * 文書状態/ワークフロー状態 検索タイプ
         */
        _this.matchConditionType = null;
        /**
         * 付箋色の選択時の値
         */
        _this.tagColorConditionPattern = null;
        /**
         * 文字列型か数値型か日付型か採番プロパティの指定(値が属性のデータタイプを参照)
         */
        _this.type = null;
        /**
         * 検索項目に対するマッチパターン
         * 設定可能の定数は、SearchConditionVO.MATCHPATTERN_XXXXを参照
         */
        _this.matchPattern = null;
        return _this;
    }
    /**
     * clone()
     */
    SearchConditionItemVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    return SearchConditionItemVO;
}(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["Sys0BaseVO"]));

/**
 * SearchConditionItemVOであることを確認するType Guard
 * @param object チェック対象
 */
function isSearchConditionItemVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = Object(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["isSys0BaseVO"])(object, false) &&
        'values' in object &&
        'keyword' in object &&
        'intValueFrom' in object &&
        'intValueTo' in object &&
        'dateValueFrom' in object &&
        'dateValueTo' in object &&
        'matchConditionType' in object &&
        'type' in object &&
        'matchPattern' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new SearchConditionItemVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/search-condition-vo.ts":
/*!************************************************!*\
  !*** ./src/app/core/vo/search-condition-vo.ts ***!
  \************************************************/
/*! exports provided: SearchConditionVO, isSearchConditionVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchConditionVO", function() { return SearchConditionVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSearchConditionVO", function() { return isSearchConditionVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sys0-base-vo */ "./src/app/core/vo/sys0-base-vo.ts");
/* harmony import */ var _workflow_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./workflow-vo */ "./src/app/core/vo/workflow-vo.ts");




/**
 * 検索条件データモデル
 */
var SearchConditionVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SearchConditionVO, _super);
    /**
     * コンストラクタです。
     **/
    function SearchConditionVO() {
        var _this = _super.call(this) || this;
        /**
         * 検索条件のダイジェスト
         */
        _this.digest = null;
        /**
         * 検索条件タイプ
         */
        _this.type = SearchConditionVO.SIMPLE_SEARCH;
        /**
         * 検索範囲。
         */
        _this.range = null;
        /**
         * ソート条件
         */
        _this.sort = null;
        /**
         * 取得するドキュメントのプロパティリスト。
         * nullの場合はすべて取得とする。
         */
        _this.docProps = null;
        /**
         * 簡易検索条件のキーワードリスト
         * 詳細検索のすべてのキーワードを含むキーワードリスト
         */
        _this.keywords = null;
        /**
         * 詳細検索のいずれかのキーワードを含むキーワードリスト
         */
        _this.orKeywords = null;
        /**
         * 詳細検索のいずれかのキーワードを含まないキーワードリスト
         */
        _this.notKeywords = null;
        /**
         * 詳細検索の文書検索対象にするかとの指定
         */
        _this.searchDocument = true;
        /**
         * 詳細検索のフォルダ検索対象にするかとの指定
         */
        _this.searchFolder = false;
        /**
         * 詳細検索の全文検索指定
         */
        _this.fts = true;
        /**
         * 詳細検索のサブフォルダも検索対象指定
         */
        _this.searchSubFolder = true;
        /**
         * 文書タイプの指定。nullの場合は、すべての文書タイプとする
         */
        _this.documentTypeId = null;
        /**
         * 文書タイプ名nullの場合は、すべての文書タイプとする。
         * BLでの検索には使用しないが、お気に入り保存後に文書タイプIDが付け変わっている可能性があるため、
         * 文書タイプ名を保存し、再度検索する際は名前をキーにIDを特定し、documentTypeIdにセットして検索する。
         */
        _this.documentTypeName = null;
        /**
         * 詳細検索の詳細項目のブール演算子
         * ただし、詳細検索条件の項目リストitemsはnullの場合は、無視する
         */
        _this.boolOperator = SearchConditionVO.MATCHPATTERN_AND;
        /**
         * 詳細検索条件の項目リスト
         */
        _this.items = null;
        /**
         * すべてのキーワード(画面設定項目)
         */
        _this.keyword = null;
        /**
         * いずれかのキーワード(画面設定項目)
         */
        _this.orKeyword = null;
        /**
         * いずれかのキーワードに含まないキーワードリスト(画面設定項目)
         */
        _this.notKeyword = null;
        /**
         * ソートキー(画面設定項目)
         */
        _this.sortKey = null;
        /**
         * ソート順(画面設定項目)
         */
        _this.sortOrder = 1;
        /**
         * 画面上で検索条件が展開されているか
         */
        _this.isExpanded = undefined;
        return _this;
    }
    /**
     * clone()
     */
    SearchConditionVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    /**
     * 検索タイプ定数
     */
    /**
     * 簡易検索
     */
    SearchConditionVO.SIMPLE_SEARCH = 0;
    /**
     * 詳細検索
     */
    SearchConditionVO.CONDITIONAL_SEARCH = 1;
    /**
     * 詳細検索項目の処理パターン指定
     */
    /**
     * 項目間条件のすべて一致(AND検索)
     * またはすべてを含む
     */
    SearchConditionVO.MATCHPATTERN_AND = 0;
    /**
     * すべての条件(キーワード)がORで検索
     * またはいずれかを含む
     */
    SearchConditionVO.MATCHPATTERN_OR = 1;
    /**
     * いずれも含まないまたは範囲外(Not)
     */
    SearchConditionVO.MATCHPATTERN_NOT = 2;
    /**
     * すべて
     */
    SearchConditionVO.MATCHPATTERN_ALL = 3;
    /**
     * である
     */
    SearchConditionVO.MATCHPATTERN_EQUAL = 4;
    /**
     * 値なし
     */
    SearchConditionVO.MATCHPATTERN_NOTSETVALUE = 5;
    /**
     * いずれかで始まる(前方一致)
     */
    SearchConditionVO.MATCHPATTERN_PREFIX = 11;
    /**
     * いずれかで終わる(後方一致)
     */
    SearchConditionVO.MATCHPATTERN_SUFFIX = 12;
    /**
     * どれかである(完全一致 or)
     */
    SearchConditionVO.MATCHPATTERN_EQUAL_OR = 13;
    /**
     * どれでもない(完全一致 not)
     */
    SearchConditionVO.MATCHPATTERN_EQUAL_NOT = 14;
    /**
     * 範囲内(Between...And)
     */
    SearchConditionVO.MATCHPATTERN_SCOPE = 21;
    /**
     * 三日以内
     */
    SearchConditionVO.MATCHPATTERN_3DAYS = 22;
    /**
     * １週間以内
     */
    SearchConditionVO.MATCHPATTERN_1WEEK = 23;
    /**
     * １ヶ月以内
     */
    SearchConditionVO.MATCHPATTERN_1MONTH = 24;
    /**
     * １時間以内
     */
    SearchConditionVO.MATCHPATTERN_1HOUR = 25;
    /**
     * 6時間以内
     */
    SearchConditionVO.MATCHPATTERN_6HOUR = 26;
    /**
     * 12時間以内
     */
    SearchConditionVO.MATCHPATTERN_12HOUR = 27;
    /**
     * 一日以内
     */
    SearchConditionVO.MATCHPATTERN_1DAY = 28;
    /**
     * 小（100KBより小さい）
     */
    SearchConditionVO.MATCHPATTERN_SIZESMALL = 31;
    /**
     * 中（1MBより小さい）
     */
    SearchConditionVO.MATCHPATTERN_SIZEMIDDLE = 32;
    /**
     * 大（1MBより大きい）
     */
    SearchConditionVO.MATCHPATTERN_SIZELARGE = 33;
    /**
     * ワークフロー状態(状態なし)
     */
    SearchConditionVO.MATCHPATTERN_EMPTY = _workflow_vo__WEBPACK_IMPORTED_MODULE_3__["WorkflowVO"].WFSTATUS_EMPTY;
    /**
     * ワークフロー状態(回覧中)
     */
    SearchConditionVO.MATCHPATTERN_REVIEWING = _workflow_vo__WEBPACK_IMPORTED_MODULE_3__["WorkflowVO"].WFSTATUS_REVIEWING;
    /**
     * ワークフロー状態(承認済み)
     */
    SearchConditionVO.MATCHPATTERN_APPROVED = _workflow_vo__WEBPACK_IMPORTED_MODULE_3__["WorkflowVO"].WFSTATUS_APPROVED;
    /**
     * ワークフロー状態(承後修正)
     */
    SearchConditionVO.MATCHPATTERN_EDITED = 4;
    /**
     * ワークフロー状態(取り下げ)
     */
    SearchConditionVO.MATCHPATTERN_WITHDRAWN = 5;
    /**
     * ワークフロー状態(差し戻し)
     */
    SearchConditionVO.MATCHPATTERN_REVERTING = 6;
    return SearchConditionVO;
}(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["Sys0BaseVO"]));

/**
 * SearchConditionVOであることを確認するType Guard
 * @param object チェック対象
 */
function isSearchConditionVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = Object(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["isSys0BaseVO"])(object, false) &&
        'digest' in object &&
        'type' in object &&
        'range' in object &&
        'sort' in object &&
        'docProps' in object &&
        'keywords' in object &&
        'orKeywords' in object &&
        'notKeywords' in object &&
        'searchDocument' in object &&
        'searchFolder' in object &&
        'fts' in object &&
        'searchSubFolder' in object &&
        'documentTypeId' in object &&
        'documentTypeName' in object &&
        'boolOperator' in object &&
        'items' in object &&
        'keyword' in object &&
        'orKeyword' in object &&
        'notKeyword' in object &&
        'sortKey' in object &&
        'sortOrder' in object &&
        'isExpanded' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new SearchConditionVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/section-vo.ts":
/*!***************************************!*\
  !*** ./src/app/core/vo/section-vo.ts ***!
  \***************************************/
/*! exports provided: SectionVO, isSectionVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SectionVO", function() { return SectionVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSectionVO", function() { return isSectionVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var angular2_uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular2-uuid */ "./node_modules/angular2-uuid/index.js");
/* harmony import */ var angular2_uuid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular2_uuid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _sys0_base_vo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sys0-base-vo */ "./src/app/core/vo/sys0-base-vo.ts");




/**
 * セクションデータモデル
 */
var SectionVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SectionVO, _super);
    /**
     * コンストラクタです。
     **/
    function SectionVO() {
        var _this = _super.call(this) || this;
        /**
         * サムネイル情報有無
         */
        _this.enableThumbnail = false;
        /**
         * PDFデータ情報有無
         */
        _this.enablePDF = false;
        /**
         * 全文データ情報有無
         */
        _this.enableFullText = false;
        /**
         * 実データファイルパス
         */
        _this.dataFilePath = null;
        /**
         * サムネイルファイルパス
         */
        _this.thumbnailFilePath = null;
        // ★Stitch V1.3対応 BASE64の文字列として扱う
        /**
         * サムネイルデータ
         */
        _this.thumbnailData = null;
        /**
         * PDFファイルパス
         */
        _this.pdfFilePath = null;
        /**
         * 全文検索ファイルパス
         */
        _this.fullTextFilePath = null;
        /**
         * セクションNo(順番)
         */
        _this.sectionNo = null;
        /**
         * 実データのアイコン種別
         */
        _this.icon = null;
        /**
         * セクション実データサイズ
         */
        _this.dataSize = null;
        /**
         * 付箋データ
         */
        _this.tag = null;
        /**
         * アプリケーションが起動中かどうかを表します。
         */
        _this.runningApp = 0;
        _this._tagList = null;
        _this._uid = null;
        return _this;
    }
    Object.defineProperty(SectionVO.prototype, "tagList", {
        /**
         *
         */
        get: function () {
            if (this.tag) {
                if (this._tagList == null) {
                    this._tagList = [];
                }
                if (this._tagList.length === 1) {
                    // 先頭のタグデータを置き換える
                    this._tagList.splice(0, 1, this.tag);
                }
                else {
                    this._tagList.push(this.tag);
                }
            }
            else {
                if (this._tagList) {
                    // 配列の全要素を削除
                    this._tagList.length = 0;
                    this._tagList = null;
                }
            }
            return this._tagList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SectionVO.prototype, "fill", {
        /**
         *
         */
        get: function () {
            return this.thumbnailData != null && this.thumbnailData.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SectionVO.prototype, "uid", {
        /**
         *
         */
        get: function () {
            if (this.sectionNo == null) {
                if (this._uid == null) {
                    this._uid = angular2_uuid__WEBPACK_IMPORTED_MODULE_1__["UUID"].UUID();
                }
                return this._uid;
            }
            else {
                return this.sectionNo.toString();
            }
        },
        set: function (value) { },
        enumerable: true,
        configurable: true
    });
    /**
     * clone()
     */
    SectionVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_2__["cloneDeep"](this);
    };
    /**
     * 注意：idにはドキュメントIDを入れる。
     */
    /**
     * RENDITION_TYPE
     */
    /**
     * 全レンディションデータ
     */
    SectionVO.RENDITION_TYPE_ALL = 0xf;
    /**
     * 実データ
     */
    SectionVO.RENDITION_TYPE_PRIMARY = 0x1;
    /**
     * サムネイルデータ
     */
    SectionVO.RENDITION_TYPE_THUMBNAIL = 0x2;
    /**
     * PDFデータ
     */
    SectionVO.RENDITION_TYPE_PDF = 0x4;
    /**
     * 全文データ
     */
    SectionVO.RENDITION_TYPE_FTS = 0x8;
    /**
     * アプリケーションを開いていない
     */
    SectionVO.APP_CLOSE = 0;
    /**
     * 読み取り専用でアプリケーションを開いている
     */
    SectionVO.APP_OPEN_READONLY = 1;
    /**
     * 更新可能でアプリケーションを開いている
     */
    SectionVO.APP_OPEN = 2;
    return SectionVO;
}(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_3__["Sys0BaseVO"]));

/**
 * SectionVOであることを確認するType Guard
 * @param object チェック対象
 */
function isSectionVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = Object(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_3__["isSys0BaseVO"])(object, false) &&
        'enableThumbnail' in object &&
        'enablePDF' in object &&
        'enableFullText' in object &&
        'dataFilePath' in object &&
        'thumbnailFilePath' in object &&
        'thumbnailData' in object &&
        'pdfFilePath' in object &&
        'fullTextFilePath' in object &&
        'sectionNo' in object &&
        'icon' in object &&
        'dataSize' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new SectionVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/shortcut-vo.ts":
/*!****************************************!*\
  !*** ./src/app/core/vo/shortcut-vo.ts ***!
  \****************************************/
/*! exports provided: ShortcutVO, isShortcutVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShortcutVO", function() { return ShortcutVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isShortcutVO", function() { return isShortcutVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _object_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object-base-vo */ "./src/app/core/vo/object-base-vo.ts");



/**
 * ショートカットデータモデル
 */
var ShortcutVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ShortcutVO, _super);
    /**
     * コンストラクタです。
     **/
    function ShortcutVO() {
        var _this = _super.call(this) || this;
        /**
         * ショートカット自身のパスIDリスト
         */
        _this.pathIds = null;
        /**
         * ショートカット自身のパス名リスト
         */
        _this.pathNames = null;
        return _this;
    }
    /**
     * clone()
     */
    ShortcutVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    return ShortcutVO;
}(_object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"]));

/**
 * FolderVOであることを確認するType Guard
 * @param object チェック対象
 */
function isShortcutVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = !('owner' in object) && !('aceList' in object) && object.type === _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_SHORTCUT;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new ShortcutVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/sys0-base-vo.ts":
/*!*****************************************!*\
  !*** ./src/app/core/vo/sys0-base-vo.ts ***!
  \*****************************************/
/*! exports provided: Sys0BaseVO, isSys0BaseVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sys0BaseVO", function() { return Sys0BaseVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSys0BaseVO", function() { return isSys0BaseVO; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * ベースデータモデル
 */
var Sys0BaseVO = /** @class */ (function () {
    function Sys0BaseVO() {
        /**
         * 一意のid
         */
        this.id = null;
        /**
         * 表示名
         */
        this.name = null;
        /**
         * 所属するキャビネットID
         */
        this.cabId = null;
        /**
         * 登録日
         *
         * ※サーバー側のバグにより以下の通りになっています。
         * 登録日=createDate
         * 作成日=entryDate
         */
        this.createDate = null;
    }
    /**
     * clone()
     */
    Sys0BaseVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0__["cloneDeep"](this);
    };
    return Sys0BaseVO;
}());

/**
 * Sys0BaseVOであることを確認するType Guard
 * @param object チェック対象
 * @param isConvertObject オブジェクトをSys0BaseVOに変換するかの判定
 */
function isSys0BaseVO(object, isConvertObject) {
    if (isConvertObject === void 0) { isConvertObject = true; }
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = 'id' in object && 'name' in object && 'cabId' in object && 'createDate' in object;
    // オブジェクトをSys0BaseVOに変換するか
    if (ok && isConvertObject) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new Sys0BaseVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/tag-vo.ts":
/*!***********************************!*\
  !*** ./src/app/core/vo/tag-vo.ts ***!
  \***********************************/
/*! exports provided: TagVO, isTagVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TagVO", function() { return TagVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTagVO", function() { return isTagVO; });
/* harmony import */ var angular2_uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular2-uuid */ "./node_modules/angular2-uuid/index.js");
/* harmony import */ var angular2_uuid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular2_uuid__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);


/**
 * 付箋データモデル
 */
var TagVO = /** @class */ (function () {
    function TagVO() {
        /**
         * セクションNo(順番)
         */
        this.sectionNo = null;
        /**
         * コメント
         */
        this.tagText = null;
        /**
         * 色
         */
        this.tagColor = null;
        /**
         * 選択されている。
         */
        this.selected = false;
        this._uid = null;
    }
    Object.defineProperty(TagVO.prototype, "uid", {
        /**
         *
         */
        get: function () {
            if (this.sectionNo == null) {
                if (this._uid == null) {
                    this._uid = angular2_uuid__WEBPACK_IMPORTED_MODULE_0__["UUID"].UUID();
                }
                return this._uid;
            }
            else {
                return this.sectionNo.toString();
            }
        },
        set: function (value) { },
        enumerable: true,
        configurable: true
    });
    /**
     * clone()
     */
    TagVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    // 赤
    TagVO.TAG_COLOR_RED = 'Tag01';
    // 緑
    TagVO.TAG_COLOR_GREEN = 'Tag02';
    // 青
    TagVO.TAG_COLOR_BLUE = 'Tag03';
    // 黄
    TagVO.TAG_COLOR_YELLOW = 'Tag04';
    // 水色
    TagVO.TAG_COLOR_SYAN = 'Tag05';
    // ピンク
    TagVO.TAG_COLOR_PINK = 'Tag06';
    // 紫
    TagVO.TAG_COLOR_PURPLE = 'Tag07';
    // オレンジ
    TagVO.TAG_COLOR_ORANGE = 'Tag08';
    // 茶色
    TagVO.TAG_COLOR_BROWN = 'Tag09';
    return TagVO;
}());

/**
 * TagVOであることを確認するType Guard
 * @param object チェック対象
 */
function isTagVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = 'sectionNo' in object && 'tagText' in object && 'tagColor' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new TagVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/trash-vo.ts":
/*!*************************************!*\
  !*** ./src/app/core/vo/trash-vo.ts ***!
  \*************************************/
/*! exports provided: TrashVO, isTrashVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrashVO", function() { return TrashVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTrashVO", function() { return isTrashVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _object_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object-base-vo */ "./src/app/core/vo/object-base-vo.ts");



/**
 * ゴミ箱データモデル
 */
var TrashVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](TrashVO, _super);
    /**
     * コンストラクタです。
     **/
    function TrashVO() {
        return _super.call(this) || this;
    }
    /**
     * clone()
     */
    TrashVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    // TrashVO型をObjectBaseVO型から峻別するためのダミープロパティ（メソッド）
    TrashVO.prototype._thisIsTrashVO = function () { };
    return TrashVO;
}(_object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"]));

/**
 * TrashVOであることを確認するType Guard
 * @param object チェック対象
 */
function isTrashVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = !('owner' in object) && !('aceList' in object) && object.type === _object_base_vo__WEBPACK_IMPORTED_MODULE_2__["ObjectBaseVO"].TYPE_TRASH;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new TrashVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/version-vo.ts":
/*!***************************************!*\
  !*** ./src/app/core/vo/version-vo.ts ***!
  \***************************************/
/*! exports provided: VersionVO, isVersionVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VersionVO", function() { return VersionVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isVersionVO", function() { return isVersionVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sys0-base-vo */ "./src/app/core/vo/sys0-base-vo.ts");



/**
 * 版のデータモデル
 */
var VersionVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](VersionVO, _super);
    /**
     * コンストラクタです。
     **/
    function VersionVO() {
        var _this = _super.call(this) || this;
        /**
         * id <- 版Id
         */
        /**
         * name <- 版番号
         */
        /**
         * cabId <- キャビネットId
         */
        /**
         * ドキュメントID
         */
        _this.docId = null;
        /**
         * 更新日
         */
        _this.checkinDate = null;
        /**
         * 更新者
         */
        _this.checkinUser = null;
        /**
         * コメント
         */
        _this.comment = null;
        /**
         * 版のセクション数
         */
        _this.sections = null;
        return _this;
    }
    /**
     * clone()
     */
    VersionVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    return VersionVO;
}(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["Sys0BaseVO"]));

/**
 * VersionVOであることを確認するType Guard
 * @param object チェック対象
 */
function isVersionVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = Object(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["isSys0BaseVO"])(object, false) &&
        'docId' in object &&
        'checkinDate' in object &&
        'checkinUser' in object &&
        'comment' in object &&
        'sections' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new VersionVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/core/vo/workflow-vo.ts":
/*!****************************************!*\
  !*** ./src/app/core/vo/workflow-vo.ts ***!
  \****************************************/
/*! exports provided: WorkflowVO, isWorkflowVO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WorkflowVO", function() { return WorkflowVO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isWorkflowVO", function() { return isWorkflowVO; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sys0-base-vo */ "./src/app/core/vo/sys0-base-vo.ts");



/**
 * ワークフローのデータモデルです。
 */
var WorkflowVO = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](WorkflowVO, _super);
    /**
     * コンストラクタです。
     **/
    function WorkflowVO() {
        var _this = _super.call(this) || this;
        /**
         * ワークフロー状態。可能値はワークフロー状態を参照
         */
        _this.workFlowStatus = WorkflowVO.WFSTATUS_EMPTY;
        /**
         * 申請者
         */
        _this.applicant = null;
        /**
         * 承認者
         */
        _this.approver = null;
        /**
         * 次の審査/承認者
         */
        _this.waitingApprover = null;
        /**
         * 回覧ルート
         */
        _this.circularList = null;
        /**
         * 配布先
         */
        _this.distributionList = null;
        /**
         * ログ
         * Map key=totalLog,currentLog
         * LOG_TYPE_TOTAL		…全てのログ
         * 　　　　　　　　　　　　　　　　差し戻し時もクリアせず、その後のログを追加していく。
         * LOG_TYPE_CURRENT		…現在のフローのログ
         * 　　　　　　　　　　　　　　　　現在回覧中のルートに関するログのみ。再申請時はクリアする。
         */
        _this.log = null;
        /**
         * メール送信可能かを表す。
         * 初期値はfalse、ワークフロー操作実行後のこのオブジェクトはtrueをセットしないとメール送信できない。
         */
        _this.enableSendMail = false;
        /**
         * メール送信時用のコメント
         */
        _this.mailComment = null;
        return _this;
    }
    /**
     * clone()
     */
    WorkflowVO.prototype.clone = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](this);
    };
    /**
     * idには文書ＩＤを格納する
     * cabIdにはキャビネットＩＤを格納する
     */
    /**
     * ワークフロー状態
     */
    /**
     * 状態なし
     */
    WorkflowVO.WFSTATUS_EMPTY = 1;
    /**
     * 回覧中
     */
    WorkflowVO.WFSTATUS_REVIEWING = 2;
    /**
     * 承認済み
     */
    WorkflowVO.WFSTATUS_APPROVED = 3;
    /**
     * 承認後修正
     */
    WorkflowVO.WFSTATUS_EDITED = 4;
    /**
     * 取り下げ
     */
    WorkflowVO.WFSTATUS_WITHDRAWN = 5;
    /**
     * 差し戻し
     */
    WorkflowVO.WFSTATUS_REVERTING = 6;
    /**
     * ログリスト種類（全て）
     */
    WorkflowVO.LOG_TYPE_TOTAL = 'totalLog';
    /**
     * ログリスト種類（現在のフローに関するログ）
     */
    WorkflowVO.LOG_TYPE_CURRENT = 'currentLog';
    return WorkflowVO;
}(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["Sys0BaseVO"]));

/**
 * WorkflowVOであることを確認するType Guard
 * @param object チェック対象
 */
function isWorkflowVO(object) {
    if (object == null || typeof object !== 'object') {
        return false;
    }
    var ok = Object(_sys0_base_vo__WEBPACK_IMPORTED_MODULE_2__["isSys0BaseVO"])(object, false) &&
        'workFlowStatus' in object &&
        'applicant' in object &&
        'approver' in object &&
        'waitingApprover' in object &&
        'circularList' in object &&
        'distributionList' in object &&
        'log' in object &&
        'enableSendMail' in object &&
        'mailComment' in object;
    if (ok) {
        // メソッドをチェック対象オブジェクトに生やす
        // サーバー返却値にはメソッドが存在しないため
        var proto = Object.getPrototypeOf(new WorkflowVO());
        Object.setPrototypeOf(object, proto);
    }
    return ok;
}


/***/ }),

/***/ "./src/app/shared/components/progress-dialog/progress-dialog.component.html":
/*!**********************************************************************************!*\
  !*** ./src/app/shared/components/progress-dialog/progress-dialog.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog\r\n  [header]=\"dialogTitle\"\r\n  [(visible)]=\"visible\"\r\n  [width]=\"width\"\r\n  [modal]=\"true\"\r\n  [responsive]=\"false\"\r\n  [closable]=\"false\"\r\n  [resizable]=\"false\"\r\n  [minHeight]=\"minHeight\"\r\n  class=\"hide-dialog\"\r\n  [class.hide-dialog]=\"!blur\"\r\n>\r\n  <div class=\"message progress-message-label\" *ngIf=\"showProgressMessageLabel\">{{ progressMessageLabel }}</div>\r\n  <div class=\"message object-name-label\" *ngIf=\"showObjectNameLabel\">{{ objectNameLabel }}{{ objectName }}</div>\r\n  <div class=\"message progress-count-label\" *ngIf=\"showProgressCountLabel\">{{ progressCountLabel }}</div>\r\n\r\n  <p-progressBar class=\"determinated-progressbar\" *ngIf=\"!indeterminate\" [value]=\"this.progressValue\" [showValue]=\"false\"></p-progressBar>\r\n  <p-progressBar class=\"indeterminated-progressbar \" *ngIf=\"indeterminate\" mode=\"indeterminate\"></p-progressBar>\r\n  <div class=\"stop-button\">\r\n    <button #elemStopButton pButton type=\"button\" *ngIf=\"cancelable\" (click)=\"onStop()\" label=\"{{ stopButton }}\"></button>\r\n  </div>\r\n</p-dialog>\r\n"

/***/ }),

/***/ "./src/app/shared/components/progress-dialog/progress-dialog.component.scss":
/*!**********************************************************************************!*\
  !*** ./src/app/shared/components/progress-dialog/progress-dialog.component.scss ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".hide-dialog {\n  display: none; }\n\n.progress-message-label {\n  font-weight: bold;\n  text-align: center;\n  padding: 10px; }\n\n.object-name-label,\n.progress-count-label {\n  padding: 5px; }\n\n.stop-button {\n  padding: 5px;\n  width: 100%;\n  text-align: right; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2NvbXBvbmVudHMvcHJvZ3Jlc3MtZGlhbG9nL0M6XFxVc2Vyc1xcZzEwMDE2ODUxXFxEb2N1bWVudHNcXGFuZ3VsYXItd29ya3NwYWNlXFxzbWEtbmF2aVxcYW5ndWxhclxccnNuL3NyY1xcYXBwXFxzaGFyZWRcXGNvbXBvbmVudHNcXHByb2dyZXNzLWRpYWxvZ1xccHJvZ3Jlc3MtZGlhbG9nLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYSxFQUFBOztBQUdmO0VBQ0UsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixhQUFhLEVBQUE7O0FBR2Y7O0VBRUUsWUFBWSxFQUFBOztBQUdkO0VBQ0UsWUFBWTtFQUNaLFdBQVc7RUFDWCxpQkFBaUIsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9jb21wb25lbnRzL3Byb2dyZXNzLWRpYWxvZy9wcm9ncmVzcy1kaWFsb2cuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaGlkZS1kaWFsb2cge1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi5wcm9ncmVzcy1tZXNzYWdlLWxhYmVsIHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgcGFkZGluZzogMTBweDtcclxufVxyXG5cclxuLm9iamVjdC1uYW1lLWxhYmVsLFxyXG4ucHJvZ3Jlc3MtY291bnQtbGFiZWwge1xyXG4gIHBhZGRpbmc6IDVweDtcclxufVxyXG5cclxuLnN0b3AtYnV0dG9uIHtcclxuICBwYWRkaW5nOiA1cHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbn1cclxuIl19 */"

/***/ }),

/***/ "./src/app/shared/components/progress-dialog/progress-dialog.component.ts":
/*!********************************************************************************!*\
  !*** ./src/app/shared/components/progress-dialog/progress-dialog.component.ts ***!
  \********************************************************************************/
/*! exports provided: ProgressDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgressDialogComponent", function() { return ProgressDialogComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _core_services_wording_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/services/wording.service */ "./src/app/core/services/wording.service.ts");



var ProgressDialogComponent = /** @class */ (function () {
    /**
     * コンストラクタ
     * ChangeDetectorRefをDI。
     * 親画面(p-dialog)の状態を書き換えるため、detectChangeを走らせる必要がある。
     */
    function ProgressDialogComponent(wording, cd) {
        this.wording = wording;
        this.cd = cd;
        /**
         * ダイアログサイズ
         */
        this.width = 400;
        this.minHeight = 50;
        this.owner = null;
        /**
         * プログレスバーの進捗状態
         */
        this.progressValue = 0;
        /**
         * 表示フラグ
         */
        this.showProgressMessageLabel = false;
        /**
         * 複数オブジェクト操作時に表示するメッセージを指定します。例）コピー中です...
         */
        this.progressMessageLabel = null;
        /**
         * 表示フラグ
         */
        this.showProgressCountLabel = false;
        /**
         * 複数オブジェクト操作時にプログレスの進捗具合を示すラベルを指定します。例）X件中Y件完了しました。
         */
        this.progressCountLabel = null;
        /**
         * 表示フラグ
         */
        this.showObjectNameLabel = false;
        /**
         * プログレスバーのラベルを指定します。例）項目名：
         */
        this.objectNameLabel = null;
        /**
         * 実行しているアイテムの名前を指定します。
         */
        this.objectName = null;
        /**
         * キャンセルボタン表示
         */
        this.cancelable = false;
        /**
         * ダイアログを表示する
         */
        this.visible = false;
        /**
         * プログレスバーのアニメーション表示をするか
         */
        this.indeterminate = false;
        this.blur = true;
        /**
         * キャンセルボタン実行関数
         */
        this.progressStopped = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * 背景色を透明にセット済みか
         */
        this.isSetTransparent = false;
    }
    Object.defineProperty(ProgressDialogComponent.prototype, "_allCount", {
        /**
         * 実行合計数
         */
        set: function (allCount) {
            this.allCount = allCount;
            this._calcProgressbarValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressDialogComponent.prototype, "_addCount", {
        /**
         * 処理完了数
         */
        set: function (addCount) {
            this.addCount = addCount;
            this._calcProgressbarValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressDialogComponent.prototype, "_progressMessageLabel", {
        /**
         * プログレスダイアログのタイトルラベルを設定します。
         * true: 表示します。false: 非表示にします。
         * デフォルトは非表示です。
         */
        set: function (value) {
            this.progressMessageLabel = value;
            this.showProgressMessageLabel = value != null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressDialogComponent.prototype, "_progressCountLabel", {
        /**
         * プログレスダイアログの進捗具合のメッセージ表示を行ないます。
         * valueが指定されている場合は、件数表示を行ないます。
         * valueが指定されていない場合は、件数表示をしません。
         * デフォルトは非表示です。
         */
        set: function (value) {
            this.progressCountLabel = value;
            this.showProgressCountLabel = value != null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 初期処理
     */
    ProgressDialogComponent.prototype.ngOnInit = function () {
        // ラベル取得
        this.dialogTitle = this.wording.get('lbl.progress.title');
        this.stopButton = this.wording.get('lbl.alert.stop');
    };
    ProgressDialogComponent.prototype.ngAfterViewChecked = function () {
        if (!this.blur && !this.isSetTransparent) {
            // ★Stitch V1.3対応 ダイアログのマスク領域を取得、p-dialogの外側にいるためこの方法でしかマスクにアクセスできない
            var el = document.querySelector('.ui-dialog-mask');
            if (el) {
                // マスクの背景を透明にする
                el.style.backgroundColor = 'transparent';
                this.isSetTransparent = true;
            }
        }
    };
    /**
     * 不確定プログレスバーの初期値を設定します。
     *
     * @param {number} allCount 実行合計数
     * @param {number} addCount 処理完了数
     */
    ProgressDialogComponent.prototype.setProgressCount = function (allCount, addCount) {
        this.addCount = addCount;
        this.allCount = allCount;
    };
    /**
     * 複数登録時のタイトルの表示を行います。
     * labelが指定されている場合は、項目名を表示します。
     * labelが指定されていない場合は、項目名を非表示にします。
     *
     * @param {string} objectNameLabel プログレスバーのラベルを指定します。例）項目名：
     * @param {string} objectName 実行しているアイテムの名前を指定します。
     */
    ProgressDialogComponent.prototype.setObjectNameLabel = function (objectNameLabel, objectName) {
        this.objectNameLabel = objectNameLabel;
        this.objectName = objectName;
    };
    /**
     * プログレスダイアログの更新を行ないます。
     * 既に表示中の場合に、項目表示を切り替えます。
     *
     * @param {string} objectName 実行しているアイテムの名前を指定します。
     * @param {number} addCount 処理完了数
     */
    ProgressDialogComponent.prototype.updateProgress = function (objectName, addCount) {
        this.objectName = objectName;
        this.addCount = addCount;
        this.progressCountLabel = this.wording.formatEx(this.progressCountLabel, this.allCount, this.addCount);
        this._calcProgressbarValue();
    };
    /**
     * ダイアログを表示
     */
    ProgressDialogComponent.prototype.showDialog = function () {
        this.visible = true;
        this.isSetTransparent = false;
        if (this.cancelable) {
            this.focusStopButton();
        }
        this.cd.detectChanges();
    };
    /**
     * ダイアログを非表示
     */
    ProgressDialogComponent.prototype.closeDialog = function () {
        this.visible = false;
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    };
    ProgressDialogComponent.prototype.onStop = function () {
        this.progressStopped.emit();
        if (this.cancelFunction) {
            this.cancelFunction();
        }
    };
    /**
     * プログレスバーの進捗状態を計算する
     */
    ProgressDialogComponent.prototype._calcProgressbarValue = function () {
        if (this.allCount === 0) {
            this.progressValue = 0;
        }
        else {
            this.progressValue = (this.addCount / this.allCount) * 100;
        }
    };
    ProgressDialogComponent.prototype.focusStopButton = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.elemStopButton) {
                _this.elemStopButton.nativeElement.focus();
            }
            else {
                _this.focusStopButton();
            }
        }, 500);
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('elemStopButton'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
    ], ProgressDialogComponent.prototype, "elemStopButton", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ProgressDialogComponent.prototype, "progressMessageLabel", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ProgressDialogComponent.prototype, "cancelable", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ProgressDialogComponent.prototype, "visible", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ProgressDialogComponent.prototype, "indeterminate", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('allCount'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Number),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Number])
    ], ProgressDialogComponent.prototype, "_allCount", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('addCount'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Number),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Number])
    ], ProgressDialogComponent.prototype, "_addCount", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('progressMessageLabel'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [String])
    ], ProgressDialogComponent.prototype, "_progressMessageLabel", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('progressCountLabel'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [String])
    ], ProgressDialogComponent.prototype, "_progressCountLabel", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ProgressDialogComponent.prototype, "blur", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ProgressDialogComponent.prototype, "progressStopped", void 0);
    ProgressDialogComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-progress-dialog',
            template: __webpack_require__(/*! ./progress-dialog.component.html */ "./src/app/shared/components/progress-dialog/progress-dialog.component.html"),
            styles: [__webpack_require__(/*! ./progress-dialog.component.scss */ "./src/app/shared/components/progress-dialog/progress-dialog.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_core_services_wording_service__WEBPACK_IMPORTED_MODULE_2__["WordingService"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
    ], ProgressDialogComponent);
    return ProgressDialogComponent;
}());



/***/ }),

/***/ "./src/app/shared/containers/dialogs/alert-dialog/alert-dialog.component.html":
/*!************************************************************************************!*\
  !*** ./src/app/shared/containers/dialogs/alert-dialog/alert-dialog.component.html ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog\r\n  [modal]=\"true\"\r\n  [header]=\"title\"\r\n  [(visible)]=\"display\"\r\n  [focusOnShow]=\"true\"\r\n  [closable]=\"false\"\r\n  (keydown)=\"keyDownHandler($event)\"\r\n  cdkTrapFocus\r\n>\r\n  <div>\r\n    <div class=\"ui-message\">\r\n      <i class=\"{{ iconClass }}\"></i>\r\n      <span class=\"message\">{{ message }}</span>\r\n    </div>\r\n\r\n    <div class=\"ui-dialog-footer\">\r\n      <p-footer class=\"button-area\">\r\n        <ng-container *ngFor=\"let btn of buttons\">\r\n          <button type=\"button\" pButton [label]=\"btn.label\" (click)=\"clickHandler(btn.name)\"></button>\r\n        </ng-container>\r\n      </p-footer>\r\n    </div>\r\n  </div>\r\n</p-dialog>\r\n"

/***/ }),

/***/ "./src/app/shared/containers/dialogs/alert-dialog/alert-dialog.component.scss":
/*!************************************************************************************!*\
  !*** ./src/app/shared/containers/dialogs/alert-dialog/alert-dialog.component.scss ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ":host ::ng-deep .ui-dialog .ui-dialog-content {\n  display: flex;\n  align-items: center; }\n\n:host ::ng-deep .ui-message {\n  display: flex;\n  padding: 0 0 2 0;\n  border-style: none;\n  display: inline-flex; }\n\n:host ::ng-deep .message {\n  margin: 0.5em;\n  white-space: pre; }\n\n:host ::ng-deep .ui-dialog .ui-dialog-footer {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 0 0 0;\n  border-style: none; }\n\n:host ::ng-deep button {\n  vertical-align: middle;\n  text-align: center; }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2NvbnRhaW5lcnMvZGlhbG9ncy9hbGVydC1kaWFsb2cvQzpcXFVzZXJzXFxnMTAwMTY4NTFcXERvY3VtZW50c1xcYW5ndWxhci13b3Jrc3BhY2VcXHNtYS1uYXZpXFxhbmd1bGFyXFxyc24vc3JjXFxhcHBcXHNoYXJlZFxcY29udGFpbmVyc1xcZGlhbG9nc1xcYWxlcnQtZGlhbG9nXFxhbGVydC1kaWFsb2cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFHSSxhQUFhO0VBQ2IsbUJBQW1CLEVBQUE7O0FBSnZCO0VBT0ksYUFBYTtFQUNiLGdCQUFnQjtFQUVoQixrQkFBa0I7RUFDbEIsb0JBQW9CLEVBQUE7O0FBWHhCO0VBZUksYUFBYTtFQUNiLGdCQUFnQixFQUFBOztBQWhCcEI7RUFxQkksYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsZ0JBQWdCO0VBRWhCLGtCQUFrQixFQUFBOztBQTFCdEI7RUE4Qkksc0JBQXNCO0VBQ3RCLGtCQUFrQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvc2hhcmVkL2NvbnRhaW5lcnMvZGlhbG9ncy9hbGVydC1kaWFsb2cvYWxlcnQtZGlhbG9nLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3QgOjpuZy1kZWVwIHtcclxuICAvLyDjgrPjg7Pjg4bjg7Pjg4Tjgqjjg6rjgqJcclxuICAudWktZGlhbG9nIC51aS1kaWFsb2ctY29udGVudCB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcbiAgLnVpLW1lc3NhZ2Uge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIHBhZGRpbmc6IDAgMCAyIDA7XHJcbiAgICAvLyDmnqDnt5rjga/nhKHjgZdcclxuICAgIGJvcmRlci1zdHlsZTogbm9uZTtcclxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xyXG4gIH1cclxuXHJcbiAgLm1lc3NhZ2Uge1xyXG4gICAgbWFyZ2luOiAwLjVlbTtcclxuICAgIHdoaXRlLXNwYWNlOiBwcmU7XHJcbiAgfVxyXG5cclxuICAvLyDjg5Xjg4Pjgr/jgqjjg6rjgqJcclxuICAudWktZGlhbG9nIC51aS1kaWFsb2ctZm9vdGVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nOiAwIDAgMCAwO1xyXG4gICAgLy8g5p6g57ea44Gv54Sh44GXXHJcbiAgICBib3JkZXItc3R5bGU6IG5vbmU7XHJcbiAgfVxyXG5cclxuICBidXR0b24ge1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbn1cclxuIl19 */"

/***/ }),

/***/ "./src/app/shared/containers/dialogs/alert-dialog/alert-dialog.component.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/shared/containers/dialogs/alert-dialog/alert-dialog.component.ts ***!
  \**********************************************************************************/
/*! exports provided: ButtonModel, AlertDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonModel", function() { return ButtonModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertDialogComponent", function() { return AlertDialogComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _core_controls_image_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/controls/image-manager */ "./src/app/core/controls/image-manager.ts");
/* harmony import */ var _core_models_alert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../core/models/alert */ "./src/app/core/models/alert.ts");
/* harmony import */ var _core_models_close_event__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../core/models/close-event */ "./src/app/core/models/close-event.ts");
/* harmony import */ var _core_models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../core/models/sys0-alert-type */ "./src/app/core/models/sys0-alert-type.ts");
/* harmony import */ var _core_services_popup_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../core/services/popup.service */ "./src/app/core/services/popup.service.ts");
/* harmony import */ var _core_services_wording_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../core/services/wording.service */ "./src/app/core/services/wording.service.ts");
/* harmony import */ var _core_utils_injector_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../core/utils/injector-provider */ "./src/app/core/utils/injector-provider.ts");
/* harmony import */ var _core_utils_rsn_event_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../core/utils/rsn-event-manager */ "./src/app/core/utils/rsn-event-manager.ts");










/**
 * ボタンモデル定義
 */
var ButtonModel = /** @class */ (function () {
    /**
     * コンストラクタ
     */
    function ButtonModel(label, name) {
        this.label = label;
        this.name = name;
    }
    return ButtonModel;
}());

/**
 * Alert Dialogコンポーネント
 *
 * ★Stitch V1.3
 * Flex Alertの代用コンポーネントとして新規作成
 * また、Flex AlertFormの責務も集約する
 * 用語解決の責務も集約する
 *
 * PrimeNGに依存するため、Sharedに配置
 *
 * デフォルトボタンの制御は、最初のボタンにフォーカスを当てるPrimeNG Dialog focusOnShow trueに代替する
 * Flexにおいてははい・いいえモードの場合[はい]、
 * その他の場合[OK]もしくは最初の配置ボタンに設定していたが、
 * これは上記のプロパティを有効化するだけで条件を満たすため
 */
var AlertDialogComponent = /** @class */ (function () {
    /**
     * コンストラクタ
     * @param wording 用語解決サービス
     */
    function AlertDialogComponent(wording) {
        this.wording = wording;
        /**
         * ボタンラベル定義
         *
         * ★Stitch V1.3対応
         * yes、no、ok、cancelはresourceManager利用でFlex定義値を取得していたが、
         * AngularのWordingServiceでは取れないので、固定値にする
         */
        this.LABEL_YES = 'はい';
        this.LABEL_NO = 'いいえ';
        this.LABEL_OK = 'OK';
        this.LABEL_CANCEL = 'キャンセル';
        this.LABEL_SKIP = this.wording.get('lbl.alert.skip');
        this.LABEL_RENAME = this.wording.get('lbl.alert.rename');
        this.LABEL_STOP = this.wording.get('lbl.alert.stop');
        /**
         * 表示フラグ
         */
        this._display = false;
        /**
         * 表示メッセージ
         */
        this._message = '';
        /**
         * ダイアログタイトル
         */
        this._title = '';
        /**
         * アイコンクラス
         */
        this._iconClass = null;
        /**
         * EscキーによるClose有効化フラグ
         *
         * ★Stitch V1.3対応
         * Flexにおいて変数名が示す意味合いと真偽が逆に設定されているバグが有ったので、
         * 関連の判定処理も含めて正しく統一した
         */
        this._enableAlartCloseOnEscKeyDownFlag = true;
        /**
         * ★Stitch V1.3対応
         * 埋め込み画像管理クラス
         */
        this.imageManager = new _core_controls_image_manager__WEBPACK_IMPORTED_MODULE_2__["ImageManager"]();
        /**
         * ★Stitch V1.3対応
         * Event管理クラス
         */
        this.rsnEventManager = new _core_utils_rsn_event_manager__WEBPACK_IMPORTED_MODULE_9__["RsnEventManager"]();
    }
    AlertDialogComponent_1 = AlertDialogComponent;
    Object.defineProperty(AlertDialogComponent.prototype, "display", {
        get: function () {
            return this._display;
        },
        set: function (flag) {
            this._display = flag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertDialogComponent.prototype, "buttonFlags", {
        get: function () {
            return this._buttonFlags;
        },
        /**
         * 使用できるボタンを示すビットマスクを受け取り、該当のボタンモデルを生成する
         */
        set: function (flags) {
            this.createButtons(flags);
            this._buttonFlags = flags;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertDialogComponent.prototype, "buttons", {
        get: function () {
            return this._buttons;
        },
        set: function (buttons) {
            this._buttons = buttons;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertDialogComponent.prototype, "messageKey", {
        /**
         * 表示メッセージキーを受け取り、用語解決する
         */
        set: function (key) {
            this._message = this.wording.get(key);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertDialogComponent.prototype, "message", {
        get: function () {
            return this._message;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertDialogComponent.prototype, "titleKey", {
        /**
         * ダイアログタイトルキーを受け取り、用語解決する
         */
        set: function (key) {
            this._title = this.wording.get(key);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertDialogComponent.prototype, "title", {
        get: function () {
            return this._title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertDialogComponent.prototype, "iconClass", {
        get: function () {
            return this._iconClass;
        },
        set: function (iconClass) {
            this._iconClass = iconClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertDialogComponent.prototype, "type", {
        /**
         * Alertタイプを受け取り、ダイアログタイトル・アイコンを定める
         */
        set: function (type) {
            this.setTitle(type);
            this.setIconClass(type);
            this._type = type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertDialogComponent.prototype, "enableAlartCloseOnEscKeyDownFlag", {
        get: function () {
            return this._enableAlartCloseOnEscKeyDownFlag;
        },
        set: function (flag) {
            this._enableAlartCloseOnEscKeyDownFlag = flag;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 画面を表示する
     */
    AlertDialogComponent.prototype.showDialog = function () {
        this.display = true;
    };
    /**
     * ★Stitch V1.3対応
     * addEventListerner
     */
    AlertDialogComponent.prototype.addEventListener = function (key, func) {
        this.rsnEventManager.addEventListener(key, func);
    };
    /**
     * イベントハンドラー:ボタンクリック
     *
     * @param buttonName 押下されたボタン名
     *
     * ★Stitch V1.3対応
     * ボタン名を直接受け取る仕様に変更
     */
    AlertDialogComponent.prototype.clickHandler = function (buttonName) {
        this.removeAlert(buttonName);
    };
    /**
     * イベントハンドラー:キー押下
     *
     * @param event イベント情報
     */
    AlertDialogComponent.prototype.keyDownHandler = function (event) {
        if (this.enableAlartCloseOnEscKeyDownFlag === false) {
            return;
        }
        var buttonFlags = this.buttonFlags;
        if (event.keyCode === AlertDialogComponent_1.KEYBOARD_ESCAPE) {
            if (buttonFlags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].CANCEL || !(buttonFlags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].NO)) {
                this.removeAlert(AlertDialogComponent_1.NAME_CANCEL);
            }
            else if (buttonFlags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].NO) {
                this.removeAlert(AlertDialogComponent_1.NAME_NO);
            }
        }
        // ★Stitch V1.3対応
        // Sys0AlertFormにて、AlertのkeyDownHandler（removeAlert）を呼んだあとに
        // 再度クローズ処理を実行しているが、重複処理と思われるので削除
    };
    /**
     * ボタンを生成する
     * @param flags 使用できるボタンを示すビットマスク
     */
    AlertDialogComponent.prototype.createButtons = function (flags) {
        this.buttons = new Array();
        if (flags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].OK) {
            this.buttons.push(new ButtonModel(this.LABEL_OK, AlertDialogComponent_1.NAME_OK));
        }
        if (flags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].YES) {
            this.buttons.push(new ButtonModel(this.LABEL_YES, AlertDialogComponent_1.NAME_YES));
        }
        if (flags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].NO) {
            this.buttons.push(new ButtonModel(this.LABEL_NO, AlertDialogComponent_1.NAME_NO));
        }
        if (flags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].CANCEL) {
            this.buttons.push(new ButtonModel(this.LABEL_CANCEL, AlertDialogComponent_1.NAME_CANCEL));
        }
        if (flags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].SKIP) {
            this.buttons.push(new ButtonModel(this.LABEL_SKIP, AlertDialogComponent_1.NAME_SKIP));
        }
        if (flags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].RENAME) {
            this.buttons.push(new ButtonModel(this.LABEL_RENAME, AlertDialogComponent_1.NAME_RENAME));
        }
        if (flags & _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].STOP) {
            this.buttons.push(new ButtonModel(this.LABEL_STOP, AlertDialogComponent_1.NAME_STOP));
        }
    };
    /**
     * AlertTypeに応じてタイトルを設定する
     * @param type AlertType
     */
    AlertDialogComponent.prototype.setTitle = function (type) {
        switch (type) {
            case _core_models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_5__["Sys0AlertType"].TYPE_QUESTION: {
                this.titleKey = 'lbl.alert.confirm';
                break;
            }
            case _core_models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_5__["Sys0AlertType"].TYPE_INFO: {
                this.titleKey = 'lbl.alert.info';
                break;
            }
            default: {
                this.titleKey = 'lbl.common.error';
                break;
            }
        }
    };
    /**
     * AlertTypeに応じてIconClassを設定する
     * @param type AlertType
     */
    AlertDialogComponent.prototype.setIconClass = function (type) {
        // ★Stitch V1.3対応
        // iconClassは、css定義 → staticプロパティの順で確認していたが、実際にはcss定義は存在しなかった。
        // imageManagerに設定したstaticプロパティ相当のリソースを直接設定する
        switch (type) {
            case _core_models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_5__["Sys0AlertType"].TYPE_SYSTEM_ERROR: {
                this.iconClass = this.imageManager.iconSystemError;
                break;
            }
            case _core_models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_5__["Sys0AlertType"].TYPE_ERROR: {
                this.iconClass = this.imageManager.iconError;
                break;
            }
            case _core_models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_5__["Sys0AlertType"].TYPE_WARNING: {
                this.iconClass = this.imageManager.iconWarning;
                break;
            }
            case _core_models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_5__["Sys0AlertType"].TYPE_QUESTION: {
                this.iconClass = this.imageManager.iconQuestion;
                break;
            }
            case _core_models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_5__["Sys0AlertType"].TYPE_INFO: {
                this.iconClass = this.imageManager.iconInfo;
                break;
            }
            case _core_models_sys0_alert_type__WEBPACK_IMPORTED_MODULE_5__["Sys0AlertType"].TYPE_NONE:
            default:
                this.iconClass = null;
                break;
        }
    };
    /**
     * アラートのクローズ処理
     *
     * @param buttonPressed 押下されたボタン名
     */
    AlertDialogComponent.prototype.removeAlert = function (buttonPressed) {
        this.display = false;
        var closeEvent = new _core_models_close_event__WEBPACK_IMPORTED_MODULE_4__["CloseEvent"](_core_models_close_event__WEBPACK_IMPORTED_MODULE_4__["CloseEvent"].CLOSE);
        if (buttonPressed === AlertDialogComponent_1.NAME_YES) {
            closeEvent.detail = _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].YES;
        }
        else if (buttonPressed === AlertDialogComponent_1.NAME_NO) {
            closeEvent.detail = _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].NO;
        }
        else if (buttonPressed === AlertDialogComponent_1.NAME_OK) {
            closeEvent.detail = _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].OK;
        }
        else if (buttonPressed === AlertDialogComponent_1.NAME_CANCEL) {
            closeEvent.detail = _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].CANCEL;
        }
        else if (buttonPressed === AlertDialogComponent_1.NAME_SKIP) {
            closeEvent.detail = _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].SKIP;
        }
        else if (buttonPressed === AlertDialogComponent_1.NAME_RENAME) {
            closeEvent.detail = _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].RENAME;
        }
        else if (buttonPressed === AlertDialogComponent_1.NAME_STOP) {
            closeEvent.detail = _core_models_alert__WEBPACK_IMPORTED_MODULE_3__["Alert"].STOP;
        }
        if (closeEvent.detail > 0) {
            var injector = _core_utils_injector_provider__WEBPACK_IMPORTED_MODULE_8__["InjectorProvider"].get();
            var popup = injector.get(_core_services_popup_service__WEBPACK_IMPORTED_MODULE_6__["PopupService"]);
            popup.removePopUp(this);
            this.rsnEventManager.execute(_core_models_close_event__WEBPACK_IMPORTED_MODULE_4__["CloseEvent"].CLOSE, closeEvent);
        }
    };
    var AlertDialogComponent_1;
    AlertDialogComponent.KEYBOARD_ESCAPE = 27;
    /**
     * ボタン名定義
     */
    AlertDialogComponent.NAME_YES = 'YES';
    AlertDialogComponent.NAME_NO = 'NO';
    AlertDialogComponent.NAME_OK = 'OK';
    AlertDialogComponent.NAME_CANCEL = 'CANCEL';
    AlertDialogComponent.NAME_SKIP = 'Skip';
    AlertDialogComponent.NAME_RENAME = 'Rename';
    AlertDialogComponent.NAME_STOP = 'Stop';
    AlertDialogComponent = AlertDialogComponent_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-alert-dialog',
            template: __webpack_require__(/*! ./alert-dialog.component.html */ "./src/app/shared/containers/dialogs/alert-dialog/alert-dialog.component.html"),
            styles: [__webpack_require__(/*! ./alert-dialog.component.scss */ "./src/app/shared/containers/dialogs/alert-dialog/alert-dialog.component.scss")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_core_services_wording_service__WEBPACK_IMPORTED_MODULE_7__["WordingService"]])
    ], AlertDialogComponent);
    return AlertDialogComponent;
}());



/***/ }),

/***/ "./src/environments/environment.prod.ts":
/*!**********************************************!*\
  !*** ./src/environments/environment.prod.ts ***!
  \**********************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
var environment = {
    production: true,
    apiOrigin: null
};


/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `.angular-cli.json`.
var environment = {
    production: false,
    // REST APIのorigin(protocol + host + port)
    apiOrigin: 'http://sma-001.src.ricoh.co.jp:8080'
};


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    .catch(function (err) { return console.log(err); });


/***/ }),

/***/ 0:
/*!************************************************************************!*\
  !*** multi (webpack)-dev-server/client?http://0.0.0.0:0 ./src/main.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\Users\g10016851\Documents\angular-workspace\sma-navi\angular\rsn\node_modules\webpack-dev-server\client\index.js?http://0.0.0.0:0 */"./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:0");
module.exports = __webpack_require__(/*! C:\Users\g10016851\Documents\angular-workspace\sma-navi\angular\rsn\src\main.ts */"./src/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map