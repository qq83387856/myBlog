<!--
author: 小莫
date: 2016-05-14
title: wepback的使用
tags: webback
category: 自动化构建工具
status: publish
summary: 说到自动化构建，你想到了什么？基于AMD的requirejs？还是基于commoJS的browserify？
他们都在各自的领域或者说时代发挥了很重要的作用。但是时代的变迁，webpack成了现在的佼佼者，我们不知道
什么时候wepback也会被取代，但是现在我们必须要掌握。我不担心我学完webpack新东西来了就没用了，相反的
我很期待也很高兴有新的东西来取代webpack，因为如果能取代，必然是更好的东西。如果是更好的，那又为什么
要拒绝呢？活在当下，认真学习。
-->

#今日分享
###webpack的使用
##一、基本简介##
webpack和requirejs browserify一样，都是一款打包工具，那为什么要选这个？我们进行一个对比
1. requirejs 很老的产物了，它兴起的时候web模块化的标准都还没有完善。那个时候出了一款基于AMD的打包工具，
不得不说对前端的发展起到了至关重要的作用，如果它可以功成身退了。
2. browserify 是一个和webpack差不多同时代的产物，但是它只支持基于commonJS，对于AMD来说只能兴叹了。
并且它只支持打包js,如果你对这两个缺点不那么在意，那么就是它了。
3. webpack 支持AMD和commonJS,以模块化为起点,我们不仅可以用它打包js，也可以打包css，
包括图片。webpack把任何一个文件都看成一个模块，因此你准备好要迎接模块化的挑战了吗？

##二、环境搭建##
1. IDE推荐  
 `IDEA`、`webstrom`、`sublime`、`atom`  都是很不错的编辑工具，`idea`大而全，`webstrom`是`idea`的简化版、`sublime`轻量但不失稳重、atom新兴但不失典雅，东西不分上下，重在自己喜欢。找一个自己顺手的就好，顺便一提，我现在主要使用`IDEA`、辅助`atom`。因为我是一个`java`党啊，少不了`IDEA`，`atom`的界面是我最喜欢的。
 2. 环境搭建  
 a.新建项目
 `mkdir webpack-study && cd webpack-study`
 b.初始化环境
 `npm init -y`  
 c.安装工具(如果你没安装taobao源，把cnpm换成npm)  
 `cnpm install --save-dev webpack webpack-dev-server`  
说明:webpack是核心文件、wepback-dev-server是类http-server的web启动工具，建议juanju安装一下这个server
d.新建配置文件  (名字一定不能换)
`touch webpack.config.js`  
e. 配置webpack

```
  module.exprots={
    entry:'index.js',
    output:{
      path:__dirname,
      filename:'bundle.js'
    }

  }
```  

说明:  
模块化`module.export`
入口文件:`entry` 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了  
输出 `output`,`path`是输出路径,`__dirname`是nodejs的全局变量，表示当前目录, `filename`，打包后的文件名

3. 写一个小测试
a. 新建入口文件  
`touch index.js`
  document.write('Hello world');  
  说明:往html写入一句话 `Hello world`  
b. 新建一个css  
`touch style.css`  
```
  body{
    background-color:pink;
  }
```
4.webpack的重头戏要来了 那就是loaders，wepback的一大特色就是可以将一些浏览器不能原生支持的文件通过loaders编译成浏览器可以支持的文件
a.安装loaders  
`cnpm install style-loader css-loader `  
b.打开`webpack.config.js`  
添加模块
```
  module:{
    loaders:[
    {
      test:/\.css*/,
      loaders:['style-loader','css-loader']
      }
  ]

  }
```

说明：  
模块下定义大的loaders去loader需要的东西，它是一个数组，意味着它可以定义多个  
一个对象就是一个loader，`test`用正则匹配文件后缀  
loaders指定采用哪个loader,注意它是从右往左执行，所以这里先执行css-loader  
`css-loader`处理css的一些url，包括相对的绝对的之类的东西  
`style-loader` 是将css文件采用js动态写入html页面
