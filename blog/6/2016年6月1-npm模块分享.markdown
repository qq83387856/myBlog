<!--
author: 小莫
date: 2016-06-01
title: npm模块分享
tags: npm
category: npm
status: publish
summary: 平时自己用的npm模块也不算少了，其实网上有很多牛人开发的npm模块都很好，希望不要被埋没了。
-->

## 一、 实用的模块

*  
 [thunder-vip](https://github.com/nswbmw/thunder-vip)  

  获取最新可用的迅雷 vip 账号。

  解决什么：  
  不用每次打开网站去找号。。

  ##### 用法：

  `$ thunder`  
  or

  ```
    var thunderVip = require('thunder-vip');

    thunderVip(function (err, accounts) {
    console.log(accounts);
    });
  ```

  截图  

  ![1](https://dn-cnode.qbox.me/FskKgd_Epv4IYYh0waATFFHoD7g9)


*  
[npm-user-downloads](https://github.com/nswbmw/npm-user-downloads)  

  查看 npm 用户某个时间段内所有模块的下载量，按从高到低排名。

  解决什么：

  起初是想看自己的那些模块下载量多，好重点维护。。

  用法：

  `$ nud hupengbest last-month --limit=20`

  截图：

  ![1](https://dn-cnode.qbox.me/FhJDMWtAwWxgkXsEMWsfIz4XZ3Jl)

## 二、koa开发模块

*  [co](https://npm.taobao.org/package/co)  
作用：异步控制  

1 栗子

```
	co(function* () {
	  var result = yield Promise.resolve(true);
	  return result;
	}).then(function (value) {
	  console.log(value);
	}, function (err) {
	  console.error(err.stack);
	});
```

2 如果你想把一个 co-generator-function 转成真实的functionu并返回一个promise 可以使用`co.wrap(fn*)`

```
	var fn = co.wrap(function* (val) {
	  return yield Promise.resolve(val);
	});

	fn(true).then(function (val) {

	});
```

3 完整的example  

```
	var co = require('co');

	co(function *(){
	  // yield any promise
	  var result = yield Promise.resolve(true);
	}).catch(onerror);

	co(function *(){
	  // resolve multiple promises in parallel
	  var a = Promise.resolve(1);
	  var b = Promise.resolve(2);
	  var c = Promise.resolve(3);
	  var res = yield [a, b, c];
	  console.log(res);
	  // => [1, 2, 3]
	}).catch(onerror);

	// errors can be try/catched
	co(function *(){
	  try {
	    yield Promise.reject(new Error('boom'));
	  } catch (err) {
	    console.error(err.message); // "boom"
	 }
	}).catch(onerror);

	function onerror(err) {
	  // log any uncaught errors
	  // co will not throw any errors you do not handle!!!
	  // HANDLE ALL YOUR ERRORS!!!
	  console.error(err.stack);
	}
```

4 api  

`co(fn*).then( val => )`  
解决一个generator然后返回一个promise

```
	co(function* () {
	  return yield Promise.resolve(true);
	}).then(function (val) {
	  console.log(val);
	}, function (err) {
	  console.error(err.stack);
	});
```

`var fn = co.wrap(fn*)`  
将一个generator转成普通的function并返回一个promise  

```
	var fn = co.wrap(function* (val) {
	  return yield Promise.resolve(val);
	});

	fn(true).then(function (val) {

	});
```
## 1、
*  [debug](https://npm.taobao.org/package/debug)  

` cnpm install debug`  

1. 使用方法  

`Example app.js`

```
	var debug = require('debug')('http')
	  , http = require('http')
	  , name = 'My App';

	// fake app

	debug('booting %s', name);

	http.createServer(function(req, res){
	  debug(req.method + ' ' + req.url);
	  res.end('hello\n');
	}).listen(3000, function(){
	  debug('listening');
	});

	// fake worker of some kind

	require('./worker');
```

`Example worker.js:`

```
	var debug = require('debug')('worker');

	setInterval(function(){
	  debug('doing some work');
	}, 1000);
```

效果图  
![1](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)

在windows环境下需要设置环境变量`set DEBUG=*,-not_this` 我这里使用的是idea的debug调试  
![1](http://static.xiaomo.info/images/debug.png)

windows 下启动方式  
![1](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)

将debug日志转存到文件中  
`DEBUG_FD=3 node your-app.js 3> whatever.log`   

## 2、
* [koa-bodyparser](https://npm.taobao.org/package/koa-bodyparser)   

使用方法  

```
  var koa = require('koa');
  var bodyParser = require('koa-bodyparser');

  var app = koa();
  app.use(bodyParser());

  app.use(function *() {
    this.body = this.request.body;
  });
```


在koa2中使用   

`npm install koa-bodyparser@next --save`
